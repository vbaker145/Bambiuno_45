
Bambiuno_45.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a03c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800a1d0  0800a1d0  0000b1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a66c  0800a66c  0000c1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a66c  0800a66c  0000b66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a674  0800a674  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a674  0800a674  0000b674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a678  0800a678  0000b678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800a67c  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001ec  0800a868  0000c1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800a868  0000c504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eef2  00000000  00000000  0000c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002000  00000000  00000000  0001b10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0001d110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4f  00000000  00000000  0001de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028708  00000000  00000000  0001e8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f083  00000000  00000000  00046fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd1f6  00000000  00000000  00056052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dac  00000000  00000000  0015328c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00158038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1b4 	.word	0x0800a1b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a1b4 	.word	0x0800a1b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <SendNextion>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define NEXT_BUFF_SZ 50
uint8_t NextionBuff[NEXT_BUFF_SZ];

int SendNextion(char *buf, uint32_t size) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	uint32_t i;

	if( size > NEXT_BUFF_SZ ) return -1;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	2b32      	cmp	r3, #50	@ 0x32
 800102e:	d902      	bls.n	8001036 <SendNextion+0x16>
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	e02c      	b.n	8001090 <SendNextion+0x70>
	for( i=0; i<size; i++ ) NextionBuff[i] = buf[i];
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	e00b      	b.n	8001054 <SendNextion+0x34>
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4413      	add	r3, r2
 8001042:	7819      	ldrb	r1, [r3, #0]
 8001044:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <SendNextion+0x78>)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4413      	add	r3, r2
 800104a:	460a      	mov	r2, r1
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3301      	adds	r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d3ef      	bcc.n	800103c <SendNextion+0x1c>
	NextionBuff[i++] = 0xff;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	60fa      	str	r2, [r7, #12]
 8001062:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <SendNextion+0x78>)
 8001064:	21ff      	movs	r1, #255	@ 0xff
 8001066:	54d1      	strb	r1, [r2, r3]
	NextionBuff[i++] = 0xff;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60fa      	str	r2, [r7, #12]
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <SendNextion+0x78>)
 8001070:	21ff      	movs	r1, #255	@ 0xff
 8001072:	54d1      	strb	r1, [r2, r3]
	NextionBuff[i++] = 0xff;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	60fa      	str	r2, [r7, #12]
 800107a:	4a07      	ldr	r2, [pc, #28]	@ (8001098 <SendNextion+0x78>)
 800107c:	21ff      	movs	r1, #255	@ 0xff
 800107e:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit(&huart1, NextionBuff, i,100);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	b29a      	uxth	r2, r3
 8001084:	2364      	movs	r3, #100	@ 0x64
 8001086:	4904      	ldr	r1, [pc, #16]	@ (8001098 <SendNextion+0x78>)
 8001088:	4804      	ldr	r0, [pc, #16]	@ (800109c <SendNextion+0x7c>)
 800108a:	f003 fd13 	bl	8004ab4 <HAL_UART_Transmit>

	return 0;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000037c 	.word	0x2000037c
 800109c:	2000026c 	.word	0x2000026c

080010a0 <calcTempC>:

#define R2val 465.0
#define VCC 3.31

double calcTempC( uint32_t adcVal )  {
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	static double a=0.001064, b=0.00024823, c=-0.0000000026;

	double rcalc, rcalc_ln, t_inv;

	if( adcVal == 0 ) return 150.0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d103      	bne.n	80010b6 <calcTempC+0x16>
 80010ae:	a34f      	add	r3, pc, #316	@ (adr r3, 80011ec <calcTempC+0x14c>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	e07b      	b.n	80011ae <calcTempC+0x10e>

	//Convert ADC counts to millivolts
	rcalc = R2val * ( (4096.0 / (double) adcVal ) - 1 );
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fa24 	bl	8000504 <__aeabi_ui2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	f04f 0000 	mov.w	r0, #0
 80010c4:	4944      	ldr	r1, [pc, #272]	@ (80011d8 <calcTempC+0x138>)
 80010c6:	f7ff fbc1 	bl	800084c <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b41      	ldr	r3, [pc, #260]	@ (80011dc <calcTempC+0x13c>)
 80010d8:	f7ff f8d6 	bl	8000288 <__aeabi_dsub>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	a336      	add	r3, pc, #216	@ (adr r3, 80011c0 <calcTempC+0x120>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff fa85 	bl	80005f8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	rcalc_ln = log(rcalc);
 80010f6:	ed97 0b06 	vldr	d0, [r7, #24]
 80010fa:	f008 fe65 	bl	8009dc8 <log>
 80010fe:	ed87 0b04 	vstr	d0, [r7, #16]

	t_inv = a+b*rcalc_ln+c*rcalc_ln*rcalc_ln*rcalc_ln;
 8001102:	4b37      	ldr	r3, [pc, #220]	@ (80011e0 <calcTempC+0x140>)
 8001104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001108:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800110c:	f7ff fa74 	bl	80005f8 <__aeabi_dmul>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	4b32      	ldr	r3, [pc, #200]	@ (80011e4 <calcTempC+0x144>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff f8b5 	bl	800028c <__adddf3>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4614      	mov	r4, r2
 8001128:	461d      	mov	r5, r3
 800112a:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <calcTempC+0x148>)
 800112c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001130:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001134:	f7ff fa60 	bl	80005f8 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001144:	f7ff fa58 	bl	80005f8 <__aeabi_dmul>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001154:	f7ff fa50 	bl	80005f8 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4620      	mov	r0, r4
 800115e:	4629      	mov	r1, r5
 8001160:	f7ff f894 	bl	800028c <__adddf3>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if( t_inv> 0 ) {
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001178:	f7ff fcce 	bl	8000b18 <__aeabi_dcmpgt>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d012      	beq.n	80011a8 <calcTempC+0x108>
		return (1/t_inv) - 273.15;
 8001182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4914      	ldr	r1, [pc, #80]	@ (80011dc <calcTempC+0x13c>)
 800118c:	f7ff fb5e 	bl	800084c <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	a30b      	add	r3, pc, #44	@ (adr r3, 80011c8 <calcTempC+0x128>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff f873 	bl	8000288 <__aeabi_dsub>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e002      	b.n	80011ae <calcTempC+0x10e>
	} else {
		return 455.0;
 80011a8:	a309      	add	r3, pc, #36	@ (adr r3, 80011d0 <calcTempC+0x130>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
	}

}
 80011ae:	ec43 2b17 	vmov	d7, r2, r3
 80011b2:	eeb0 0a47 	vmov.f32	s0, s14
 80011b6:	eef0 0a67 	vmov.f32	s1, s15
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	00000000 	.word	0x00000000
 80011c4:	407d1000 	.word	0x407d1000
 80011c8:	66666666 	.word	0x66666666
 80011cc:	40711266 	.word	0x40711266
 80011d0:	00000000 	.word	0x00000000
 80011d4:	407c7000 	.word	0x407c7000
 80011d8:	40b00000 	.word	0x40b00000
 80011dc:	3ff00000 	.word	0x3ff00000
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000010 	.word	0x20000010
 80011ec:	00000000 	.word	0x00000000
 80011f0:	4062c000 	.word	0x4062c000

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fa:	f000 fc7d 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fe:	f000 f879 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001202:	f000 f9ab 	bl	800155c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001206:	f000 f979 	bl	80014fc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800120a:	f000 f947 	bl	800149c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800120e:	f000 f8c3 	bl	8001398 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_Start(&hadc1);
 8001212:	4833      	ldr	r0, [pc, #204]	@ (80012e0 <main+0xec>)
 8001214:	f001 f822 	bl	800225c <HAL_ADC_Start>
	adc = HAL_ADC_GetValue(&hadc1);
 8001218:	4831      	ldr	r0, [pc, #196]	@ (80012e0 <main+0xec>)
 800121a:	f001 f8d9 	bl	80023d0 <HAL_ADC_GetValue>
 800121e:	6278      	str	r0, [r7, #36]	@ 0x24

	sprintf((char *) txData, "z1.val=%lu", adc*180/4096);
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	22b4      	movs	r2, #180	@ 0xb4
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	0b1a      	lsrs	r2, r3, #12
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	492d      	ldr	r1, [pc, #180]	@ (80012e4 <main+0xf0>)
 800122e:	4618      	mov	r0, r3
 8001230:	f005 f98a 	bl	8006548 <siprintf>
	SendNextion( (char *) txData, strlen( (char *) txData ));
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f81a 	bl	8000270 <strlen>
 800123c:	4602      	mov	r2, r0
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff feec 	bl	8001020 <SendNextion>
	sprintf((char *) txData, "t0.txt=\"%.1f\"", calcTempC(adc) );
 8001248:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800124a:	f7ff ff29 	bl	80010a0 <calcTempC>
 800124e:	ec53 2b10 	vmov	r2, r3, d0
 8001252:	1d38      	adds	r0, r7, #4
 8001254:	4924      	ldr	r1, [pc, #144]	@ (80012e8 <main+0xf4>)
 8001256:	f005 f977 	bl	8006548 <siprintf>
	SendNextion( (char *) txData, strlen( (char *) txData ));
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f807 	bl	8000270 <strlen>
 8001262:	4602      	mov	r2, r0
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fed9 	bl	8001020 <SendNextion>

	HAL_Delay(50);
 800126e:	2032      	movs	r0, #50	@ 0x32
 8001270:	f000 fcbe 	bl	8001bf0 <HAL_Delay>

	if(  HAL_UART_Receive(&huart1, rxData, 5, 20) != HAL_TIMEOUT ) {
 8001274:	f107 0118 	add.w	r1, r7, #24
 8001278:	2314      	movs	r3, #20
 800127a:	2205      	movs	r2, #5
 800127c:	481b      	ldr	r0, [pc, #108]	@ (80012ec <main+0xf8>)
 800127e:	f003 fca2 	bl	8004bc6 <HAL_UART_Receive>
 8001282:	4603      	mov	r3, r0
 8001284:	2b03      	cmp	r3, #3
 8001286:	d0c4      	beq.n	8001212 <main+0x1e>
		rxData[10] = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		//memset(txData, 255, 20);
		//for( int i=0; i<20; i++ ) txData[i] = 255;
		sprintf((char *) txData, "t0.txt=\"%lu\"", adc);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001292:	4917      	ldr	r1, [pc, #92]	@ (80012f0 <main+0xfc>)
 8001294:	4618      	mov	r0, r3
 8001296:	f005 f957 	bl	8006548 <siprintf>
		//strcpy((char *) txData,"cls BLUE");
		adc = strlen(txData);
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4618      	mov	r0, r3
 800129e:	f7fe ffe7 	bl	8000270 <strlen>
 80012a2:	6278      	str	r0, [r7, #36]	@ 0x24
		txData[adc] = 255;
 80012a4:	1d3a      	adds	r2, r7, #4
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	4413      	add	r3, r2
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	701a      	strb	r2, [r3, #0]
		txData[adc+1] = 255;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	3301      	adds	r3, #1
 80012b2:	3328      	adds	r3, #40	@ 0x28
 80012b4:	443b      	add	r3, r7
 80012b6:	22ff      	movs	r2, #255	@ 0xff
 80012b8:	f803 2c24 	strb.w	r2, [r3, #-36]
		txData[adc+2] = 255;
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	3302      	adds	r3, #2
 80012c0:	3328      	adds	r3, #40	@ 0x28
 80012c2:	443b      	add	r3, r7
 80012c4:	22ff      	movs	r2, #255	@ 0xff
 80012c6:	f803 2c24 	strb.w	r2, [r3, #-36]
		HAL_UART_Transmit(&huart1, txData, adc+3,100);
 80012ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3303      	adds	r3, #3
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	1d39      	adds	r1, r7, #4
 80012d4:	2364      	movs	r3, #100	@ 0x64
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <main+0xf8>)
 80012d8:	f003 fbec 	bl	8004ab4 <HAL_UART_Transmit>
	HAL_ADC_Start(&hadc1);
 80012dc:	e799      	b.n	8001212 <main+0x1e>
 80012de:	bf00      	nop
 80012e0:	20000208 	.word	0x20000208
 80012e4:	0800a1d0 	.word	0x0800a1d0
 80012e8:	0800a1dc 	.word	0x0800a1dc
 80012ec:	2000026c 	.word	0x2000026c
 80012f0:	0800a1ec 	.word	0x0800a1ec

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b096      	sub	sp, #88	@ 0x58
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	2244      	movs	r2, #68	@ 0x44
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f005 f985 	bl	8006612 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001316:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800131a:	f002 f86b 	bl	80033f4 <HAL_PWREx_ControlVoltageScaling>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001324:	f000 f980 	bl	8001628 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001328:	2302      	movs	r3, #2
 800132a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001330:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001332:	2310      	movs	r3, #16
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001336:	2302      	movs	r3, #2
 8001338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133a:	2302      	movs	r3, #2
 800133c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800133e:	2301      	movs	r3, #1
 8001340:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001342:	230a      	movs	r3, #10
 8001344:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001346:	2307      	movs	r3, #7
 8001348:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800134a:	2302      	movs	r3, #2
 800134c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800134e:	2302      	movs	r3, #2
 8001350:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4618      	mov	r0, r3
 8001358:	f002 f8a2 	bl	80034a0 <HAL_RCC_OscConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001362:	f000 f961 	bl	8001628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001366:	230f      	movs	r3, #15
 8001368:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136a:	2303      	movs	r3, #3
 800136c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	2104      	movs	r1, #4
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fc6a 	bl	8003c58 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800138a:	f000 f94d 	bl	8001628 <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3758      	adds	r7, #88	@ 0x58
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ba:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <MX_ADC1_Init+0xf8>)
 80013bc:	4a35      	ldr	r2, [pc, #212]	@ (8001494 <MX_ADC1_Init+0xfc>)
 80013be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013c0:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <MX_ADC1_Init+0xf8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c6:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <MX_ADC1_Init+0xf8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <MX_ADC1_Init+0xf8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <MX_ADC1_Init+0xf8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <MX_ADC1_Init+0xf8>)
 80013da:	2204      	movs	r2, #4
 80013dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013de:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <MX_ADC1_Init+0xf8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <MX_ADC1_Init+0xf8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80013ea:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <MX_ADC1_Init+0xf8>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f0:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <MX_ADC1_Init+0xf8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f8:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <MX_ADC1_Init+0xf8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fe:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <MX_ADC1_Init+0xf8>)
 8001400:	2200      	movs	r2, #0
 8001402:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <MX_ADC1_Init+0xf8>)
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <MX_ADC1_Init+0xf8>)
 800140e:	2200      	movs	r2, #0
 8001410:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <MX_ADC1_Init+0xf8>)
 8001414:	2201      	movs	r2, #1
 8001416:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <MX_ADC1_Init+0xf8>)
 800141c:	2204      	movs	r2, #4
 800141e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <MX_ADC1_Init+0xf8>)
 8001422:	2240      	movs	r2, #64	@ 0x40
 8001424:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <MX_ADC1_Init+0xf8>)
 8001428:	2200      	movs	r2, #0
 800142a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_ADC1_Init+0xf8>)
 800142e:	2201      	movs	r2, #1
 8001430:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001432:	4817      	ldr	r0, [pc, #92]	@ (8001490 <MX_ADC1_Init+0xf8>)
 8001434:	f000 fdc2 	bl	8001fbc <HAL_ADC_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800143e:	f000 f8f3 	bl	8001628 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4810      	ldr	r0, [pc, #64]	@ (8001490 <MX_ADC1_Init+0xf8>)
 800144e:	f001 fc6b 	bl	8002d28 <HAL_ADCEx_MultiModeConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001458:	f000 f8e6 	bl	8001628 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_ADC1_Init+0x100>)
 800145e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001460:	2306      	movs	r3, #6
 8001462:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001468:	237f      	movs	r3, #127	@ 0x7f
 800146a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800146c:	2304      	movs	r3, #4
 800146e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_ADC1_Init+0xf8>)
 800147a:	f000 ffb7 	bl	80023ec <HAL_ADC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001484:	f000 f8d0 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	@ 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000208 	.word	0x20000208
 8001494:	50040000 	.word	0x50040000
 8001498:	04300002 	.word	0x04300002

0800149c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <MX_USART1_UART_Init+0x58>)
 80014a2:	4a15      	ldr	r2, [pc, #84]	@ (80014f8 <MX_USART1_UART_Init+0x5c>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <MX_USART1_UART_Init+0x58>)
 80014a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_USART1_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <MX_USART1_UART_Init+0x58>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_USART1_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <MX_USART1_UART_Init+0x58>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <MX_USART1_UART_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_USART1_UART_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <MX_USART1_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_USART1_UART_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_USART1_UART_Init+0x58>)
 80014e0:	f003 fa9a 	bl	8004a18 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014ea:	f000 f89d 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000026c 	.word	0x2000026c
 80014f8:	40013800 	.word	0x40013800

080014fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001500:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <MX_USART2_UART_Init+0x58>)
 8001502:	4a15      	ldr	r2, [pc, #84]	@ (8001558 <MX_USART2_UART_Init+0x5c>)
 8001504:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001506:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <MX_USART2_UART_Init+0x58>)
 8001508:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800150c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_USART2_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_USART2_UART_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <MX_USART2_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <MX_USART2_UART_Init+0x58>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <MX_USART2_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <MX_USART2_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <MX_USART2_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <MX_USART2_UART_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_USART2_UART_Init+0x58>)
 8001540:	f003 fa6a 	bl	8004a18 <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800154a:	f000 f86d 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002f4 	.word	0x200002f4
 8001558:	40004400 	.word	0x40004400

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	4b2b      	ldr	r3, [pc, #172]	@ (8001620 <MX_GPIO_Init+0xc4>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a2a      	ldr	r2, [pc, #168]	@ (8001620 <MX_GPIO_Init+0xc4>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <MX_GPIO_Init+0xc4>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800158a:	4b25      	ldr	r3, [pc, #148]	@ (8001620 <MX_GPIO_Init+0xc4>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a24      	ldr	r2, [pc, #144]	@ (8001620 <MX_GPIO_Init+0xc4>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b22      	ldr	r3, [pc, #136]	@ (8001620 <MX_GPIO_Init+0xc4>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <MX_GPIO_Init+0xc4>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <MX_GPIO_Init+0xc4>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <MX_GPIO_Init+0xc4>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <MX_GPIO_Init+0xc4>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	4a18      	ldr	r2, [pc, #96]	@ (8001620 <MX_GPIO_Init+0xc4>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c6:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <MX_GPIO_Init+0xc4>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2120      	movs	r1, #32
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015da:	f001 fee5 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	480b      	ldr	r0, [pc, #44]	@ (8001624 <MX_GPIO_Init+0xc8>)
 80015f6:	f001 fd2d 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015fa:	2320      	movs	r3, #32
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001614:	f001 fd1e 	bl	8003054 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	@ 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	48000800 	.word	0x48000800

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <Error_Handler+0x8>

08001634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <HAL_MspInit+0x44>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163e:	4a0e      	ldr	r2, [pc, #56]	@ (8001678 <HAL_MspInit+0x44>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6613      	str	r3, [r2, #96]	@ 0x60
 8001646:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <HAL_MspInit+0x44>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_MspInit+0x44>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	4a08      	ldr	r2, [pc, #32]	@ (8001678 <HAL_MspInit+0x44>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165c:	6593      	str	r3, [r2, #88]	@ 0x58
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_MspInit+0x44>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0ac      	sub	sp, #176	@ 0xb0
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2288      	movs	r2, #136	@ 0x88
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f004 ffb8 	bl	8006612 <memset>
  if(hadc->Instance==ADC1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a27      	ldr	r2, [pc, #156]	@ (8001744 <HAL_ADC_MspInit+0xc8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d146      	bne.n	800173a <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80016b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016be:	2301      	movs	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80016c2:	2308      	movs	r3, #8
 80016c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016c6:	2307      	movs	r3, #7
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80016d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 fcdf 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80016e8:	f7ff ff9e 	bl	8001628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <HAL_ADC_MspInit+0xcc>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	4a15      	ldr	r2, [pc, #84]	@ (8001748 <HAL_ADC_MspInit+0xcc>)
 80016f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <HAL_ADC_MspInit+0xcc>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001704:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <HAL_ADC_MspInit+0xcc>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001708:	4a0f      	ldr	r2, [pc, #60]	@ (8001748 <HAL_ADC_MspInit+0xcc>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001710:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <HAL_ADC_MspInit+0xcc>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800171c:	2301      	movs	r3, #1
 800171e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001722:	230b      	movs	r3, #11
 8001724:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	@ (800174c <HAL_ADC_MspInit+0xd0>)
 8001736:	f001 fc8d 	bl	8003054 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800173a:	bf00      	nop
 800173c:	37b0      	adds	r7, #176	@ 0xb0
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	50040000 	.word	0x50040000
 8001748:	40021000 	.word	0x40021000
 800174c:	48000800 	.word	0x48000800

08001750 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0ae      	sub	sp, #184	@ 0xb8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2288      	movs	r2, #136	@ 0x88
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f004 ff4e 	bl	8006612 <memset>
  if(huart->Instance==USART1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a43      	ldr	r2, [pc, #268]	@ (8001888 <HAL_UART_MspInit+0x138>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d13d      	bne.n	80017fc <HAL_UART_MspInit+0xac>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001780:	2301      	movs	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001784:	2300      	movs	r3, #0
 8001786:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4618      	mov	r0, r3
 800178e:	f002 fc87 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001798:	f7ff ff46 	bl	8001628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800179c:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <HAL_UART_MspInit+0x13c>)
 800179e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a0:	4a3a      	ldr	r2, [pc, #232]	@ (800188c <HAL_UART_MspInit+0x13c>)
 80017a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80017a8:	4b38      	ldr	r3, [pc, #224]	@ (800188c <HAL_UART_MspInit+0x13c>)
 80017aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b35      	ldr	r3, [pc, #212]	@ (800188c <HAL_UART_MspInit+0x13c>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b8:	4a34      	ldr	r2, [pc, #208]	@ (800188c <HAL_UART_MspInit+0x13c>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c0:	4b32      	ldr	r3, [pc, #200]	@ (800188c <HAL_UART_MspInit+0x13c>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017e6:	2307      	movs	r3, #7
 80017e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017f0:	4619      	mov	r1, r3
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f6:	f001 fc2d 	bl	8003054 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80017fa:	e040      	b.n	800187e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a23      	ldr	r2, [pc, #140]	@ (8001890 <HAL_UART_MspInit+0x140>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d13b      	bne.n	800187e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800180a:	2300      	movs	r3, #0
 800180c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fc44 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800181e:	f7ff ff03 	bl	8001628 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001822:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <HAL_UART_MspInit+0x13c>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001826:	4a19      	ldr	r2, [pc, #100]	@ (800188c <HAL_UART_MspInit+0x13c>)
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	6593      	str	r3, [r2, #88]	@ 0x58
 800182e:	4b17      	ldr	r3, [pc, #92]	@ (800188c <HAL_UART_MspInit+0x13c>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <HAL_UART_MspInit+0x13c>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	4a13      	ldr	r2, [pc, #76]	@ (800188c <HAL_UART_MspInit+0x13c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <HAL_UART_MspInit+0x13c>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001852:	230c      	movs	r3, #12
 8001854:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800186a:	2307      	movs	r3, #7
 800186c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001874:	4619      	mov	r1, r3
 8001876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187a:	f001 fbeb 	bl	8003054 <HAL_GPIO_Init>
}
 800187e:	bf00      	nop
 8001880:	37b8      	adds	r7, #184	@ 0xb8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40013800 	.word	0x40013800
 800188c:	40021000 	.word	0x40021000
 8001890:	40004400 	.word	0x40004400

08001894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <NMI_Handler+0x4>

0800189c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <MemManage_Handler+0x4>

080018ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <UsageFault_Handler+0x4>

080018bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 f961 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  return 1;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_kill>:

int _kill(int pid, int sig)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190c:	f004 fed4 	bl	80066b8 <__errno>
 8001910:	4603      	mov	r3, r0
 8001912:	2216      	movs	r2, #22
 8001914:	601a      	str	r2, [r3, #0]
  return -1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_exit>:

void _exit (int status)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800192a:	f04f 31ff 	mov.w	r1, #4294967295
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffe7 	bl	8001902 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <_exit+0x12>

08001938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e00a      	b.n	8001960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800194a:	f3af 8000 	nop.w
 800194e:	4601      	mov	r1, r0
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60ba      	str	r2, [r7, #8]
 8001956:	b2ca      	uxtb	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf0      	blt.n	800194a <_read+0x12>
  }

  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e009      	b.n	8001998 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60ba      	str	r2, [r7, #8]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbf1      	blt.n	8001984 <_write+0x12>
  }
  return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_close>:

int _close(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d2:	605a      	str	r2, [r3, #4]
  return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_isatty>:

int _isatty(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f004 fe38 	bl	80066b8 <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20018000 	.word	0x20018000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	200003b0 	.word	0x200003b0
 8001a7c:	20000508 	.word	0x20000508

08001a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001adc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa8:	f7ff ffea 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	@ (8001ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <LoopForever+0xe>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8001af0 <LoopForever+0x16>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f004 fdf7 	bl	80066c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ad6:	f7ff fb8d 	bl	80011f4 <main>

08001ada <LoopForever>:

LoopForever:
    b LoopForever
 8001ada:	e7fe      	b.n	8001ada <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001adc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ae8:	0800a67c 	.word	0x0800a67c
  ldr r2, =_sbss
 8001aec:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001af0:	20000504 	.word	0x20000504

08001af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC1_2_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_Init+0x3c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <HAL_Init+0x3c>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0e:	2003      	movs	r0, #3
 8001b10:	f001 fa6c 	bl	8002fec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b14:	2000      	movs	r0, #0
 8001b16:	f000 f80f 	bl	8001b38 <HAL_InitTick>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	e001      	b.n	8001b2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b26:	f7ff fd85 	bl	8001634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40022000 	.word	0x40022000

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b44:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <HAL_InitTick+0x6c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d023      	beq.n	8001b94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <HAL_InitTick+0x70>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_InitTick+0x6c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 fa69 	bl	800303a <HAL_SYSTICK_Config>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d809      	bhi.n	8001b88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f001 fa41 	bl	8003002 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b80:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <HAL_InitTick+0x74>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e007      	b.n	8001b98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e004      	b.n	8001b98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
 8001b92:	e001      	b.n	8001b98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000020 	.word	0x20000020
 8001ba8:	20000018 	.word	0x20000018
 8001bac:	2000001c 	.word	0x2000001c

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000020 	.word	0x20000020
 8001bd4:	200003b4 	.word	0x200003b4

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	@ (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200003b4 	.word	0x200003b4

08001bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff ffee 	bl	8001bd8 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d005      	beq.n	8001c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_Delay+0x44>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c16:	bf00      	nop
 8001c18:	f7ff ffde 	bl	8001bd8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d8f7      	bhi.n	8001c18 <HAL_Delay+0x28>
  {
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000020 	.word	0x20000020

08001c38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	609a      	str	r2, [r3, #8]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3360      	adds	r3, #96	@ 0x60
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <LL_ADC_SetOffset+0x44>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	03fff000 	.word	0x03fff000

08001ce8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3360      	adds	r3, #96	@ 0x60
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3360      	adds	r3, #96	@ 0x60
 8001d24:	461a      	mov	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b087      	sub	sp, #28
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3330      	adds	r3, #48	@ 0x30
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	211f      	movs	r1, #31
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	0e9b      	lsrs	r3, r3, #26
 8001d82:	f003 011f 	and.w	r1, r3, #31
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	431a      	orrs	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b087      	sub	sp, #28
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3314      	adds	r3, #20
 8001db2:	461a      	mov	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	0e5b      	lsrs	r3, r3, #25
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	0d1b      	lsrs	r3, r3, #20
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	2107      	movs	r1, #7
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	0d1b      	lsrs	r3, r3, #20
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	431a      	orrs	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dec:	bf00      	nop
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0318 	and.w	r3, r3, #24
 8001e1a:	4908      	ldr	r1, [pc, #32]	@ (8001e3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e1c:	40d9      	lsrs	r1, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	400b      	ands	r3, r1
 8001e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e26:	431a      	orrs	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	0007ffff 	.word	0x0007ffff

08001e40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6093      	str	r3, [r2, #8]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e94:	d101      	bne.n	8001e9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001eb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ebc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ee4:	d101      	bne.n	8001eea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f0c:	f043 0201 	orr.w	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <LL_ADC_IsEnabled+0x18>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <LL_ADC_IsEnabled+0x1a>
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f5a:	f043 0204 	orr.w	r2, r3, #4
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d101      	bne.n	8001f86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d101      	bne.n	8001fac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e130      	b.n	8002238 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fb49 	bl	800167c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff3f 	bl	8001e80 <LL_ADC_IsDeepPowerDownEnabled>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff25 	bl	8001e5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff5a 	bl	8001ed0 <LL_ADC_IsInternalRegulatorEnabled>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff3e 	bl	8001ea8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800202c:	4b84      	ldr	r3, [pc, #528]	@ (8002240 <HAL_ADC_Init+0x284>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	4a84      	ldr	r2, [pc, #528]	@ (8002244 <HAL_ADC_Init+0x288>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	3301      	adds	r3, #1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002040:	e002      	b.n	8002048 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3b01      	subs	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f9      	bne.n	8002042 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff3c 	bl	8001ed0 <LL_ADC_IsInternalRegulatorEnabled>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	f043 0210 	orr.w	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff75 	bl	8001f6e <LL_ADC_REG_IsConversionOngoing>
 8002084:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 80c9 	bne.w	8002226 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 80c5 	bne.w	8002226 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020a4:	f043 0202 	orr.w	r2, r3, #2
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff35 	bl	8001f20 <LL_ADC_IsEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d115      	bne.n	80020e8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020bc:	4862      	ldr	r0, [pc, #392]	@ (8002248 <HAL_ADC_Init+0x28c>)
 80020be:	f7ff ff2f 	bl	8001f20 <LL_ADC_IsEnabled>
 80020c2:	4604      	mov	r4, r0
 80020c4:	4861      	ldr	r0, [pc, #388]	@ (800224c <HAL_ADC_Init+0x290>)
 80020c6:	f7ff ff2b 	bl	8001f20 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	431c      	orrs	r4, r3
 80020ce:	4860      	ldr	r0, [pc, #384]	@ (8002250 <HAL_ADC_Init+0x294>)
 80020d0:	f7ff ff26 	bl	8001f20 <LL_ADC_IsEnabled>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4323      	orrs	r3, r4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4619      	mov	r1, r3
 80020e2:	485c      	ldr	r0, [pc, #368]	@ (8002254 <HAL_ADC_Init+0x298>)
 80020e4:	f7ff fda8 	bl	8001c38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7e5b      	ldrb	r3, [r3, #25]
 80020ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002106:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d106      	bne.n	8002124 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211a:	3b01      	subs	r3, #1
 800211c:	045b      	lsls	r3, r3, #17
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d009      	beq.n	8002140 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	4b44      	ldr	r3, [pc, #272]	@ (8002258 <HAL_ADC_Init+0x29c>)
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	69b9      	ldr	r1, [r7, #24]
 8002150:	430b      	orrs	r3, r1
 8002152:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff1b 	bl	8001f94 <LL_ADC_INJ_IsConversionOngoing>
 800215e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d13d      	bne.n	80021e2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d13a      	bne.n	80021e2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002170:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002178:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002188:	f023 0302 	bic.w	r3, r3, #2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	69b9      	ldr	r1, [r7, #24]
 8002192:	430b      	orrs	r3, r1
 8002194:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800219c:	2b01      	cmp	r3, #1
 800219e:	d118      	bne.n	80021d2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021aa:	f023 0304 	bic.w	r3, r3, #4
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021b6:	4311      	orrs	r1, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021bc:	4311      	orrs	r1, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021c2:	430a      	orrs	r2, r1
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	e007      	b.n	80021e2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d10c      	bne.n	8002204 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	f023 010f 	bic.w	r1, r3, #15
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	1e5a      	subs	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	631a      	str	r2, [r3, #48]	@ 0x30
 8002202:	e007      	b.n	8002214 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 020f 	bic.w	r2, r2, #15
 8002212:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	f023 0303 	bic.w	r3, r3, #3
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	655a      	str	r2, [r3, #84]	@ 0x54
 8002224:	e007      	b.n	8002236 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222a:	f043 0210 	orr.w	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002236:	7ffb      	ldrb	r3, [r7, #31]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3724      	adds	r7, #36	@ 0x24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	20000018 	.word	0x20000018
 8002244:	053e2d63 	.word	0x053e2d63
 8002248:	50040000 	.word	0x50040000
 800224c:	50040100 	.word	0x50040100
 8002250:	50040200 	.word	0x50040200
 8002254:	50040300 	.word	0x50040300
 8002258:	fff0c007 	.word	0xfff0c007

0800225c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002264:	4857      	ldr	r0, [pc, #348]	@ (80023c4 <HAL_ADC_Start+0x168>)
 8002266:	f7ff fdeb 	bl	8001e40 <LL_ADC_GetMultimode>
 800226a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fe7c 	bl	8001f6e <LL_ADC_REG_IsConversionOngoing>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 809c 	bne.w	80023b6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_ADC_Start+0x30>
 8002288:	2302      	movs	r3, #2
 800228a:	e097      	b.n	80023bc <HAL_ADC_Start+0x160>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fc9b 	bl	8002bd0 <ADC_Enable>
 800229a:	4603      	mov	r3, r0
 800229c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800229e:	7dfb      	ldrb	r3, [r7, #23]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 8083 	bne.w	80023ac <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022ae:	f023 0301 	bic.w	r3, r3, #1
 80022b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a42      	ldr	r2, [pc, #264]	@ (80023c8 <HAL_ADC_Start+0x16c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d002      	beq.n	80022ca <HAL_ADC_Start+0x6e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	e000      	b.n	80022cc <HAL_ADC_Start+0x70>
 80022ca:	4b40      	ldr	r3, [pc, #256]	@ (80023cc <HAL_ADC_Start+0x170>)
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d002      	beq.n	80022da <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022f2:	d106      	bne.n	8002302 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f8:	f023 0206 	bic.w	r2, r3, #6
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002300:	e002      	b.n	8002308 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	221c      	movs	r2, #28
 800230e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2a      	ldr	r2, [pc, #168]	@ (80023c8 <HAL_ADC_Start+0x16c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d002      	beq.n	8002328 <HAL_ADC_Start+0xcc>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	e000      	b.n	800232a <HAL_ADC_Start+0xce>
 8002328:	4b28      	ldr	r3, [pc, #160]	@ (80023cc <HAL_ADC_Start+0x170>)
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	4293      	cmp	r3, r2
 8002330:	d008      	beq.n	8002344 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b05      	cmp	r3, #5
 800233c:	d002      	beq.n	8002344 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b09      	cmp	r3, #9
 8002342:	d114      	bne.n	800236e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002356:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800235a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fded 	bl	8001f46 <LL_ADC_REG_StartConversion>
 800236c:	e025      	b.n	80023ba <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002372:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a12      	ldr	r2, [pc, #72]	@ (80023c8 <HAL_ADC_Start+0x16c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d002      	beq.n	800238a <HAL_ADC_Start+0x12e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	e000      	b.n	800238c <HAL_ADC_Start+0x130>
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <HAL_ADC_Start+0x170>)
 800238c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00f      	beq.n	80023ba <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54
 80023aa:	e006      	b.n	80023ba <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80023b4:	e001      	b.n	80023ba <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023b6:	2302      	movs	r3, #2
 80023b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	50040300 	.word	0x50040300
 80023c8:	50040100 	.word	0x50040100
 80023cc:	50040000 	.word	0x50040000

080023d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0b6      	sub	sp, #216	@ 0xd8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_ADC_ConfigChannel+0x22>
 800240a:	2302      	movs	r3, #2
 800240c:	e3c9      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x7b6>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fda7 	bl	8001f6e <LL_ADC_REG_IsConversionOngoing>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 83aa 	bne.w	8002b7c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d824      	bhi.n	8002482 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	3b02      	subs	r3, #2
 800243e:	2b03      	cmp	r3, #3
 8002440:	d81b      	bhi.n	800247a <HAL_ADC_ConfigChannel+0x8e>
 8002442:	a201      	add	r2, pc, #4	@ (adr r2, 8002448 <HAL_ADC_ConfigChannel+0x5c>)
 8002444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002448:	08002459 	.word	0x08002459
 800244c:	08002461 	.word	0x08002461
 8002450:	08002469 	.word	0x08002469
 8002454:	08002471 	.word	0x08002471
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002458:	230c      	movs	r3, #12
 800245a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800245e:	e010      	b.n	8002482 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002460:	2312      	movs	r3, #18
 8002462:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002466:	e00c      	b.n	8002482 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002468:	2318      	movs	r3, #24
 800246a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800246e:	e008      	b.n	8002482 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002470:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002478:	e003      	b.n	8002482 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800247a:	2306      	movs	r3, #6
 800247c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002480:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002490:	f7ff fc5b 	bl	8001d4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fd68 	bl	8001f6e <LL_ADC_REG_IsConversionOngoing>
 800249e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fd74 	bl	8001f94 <LL_ADC_INJ_IsConversionOngoing>
 80024ac:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 81a4 	bne.w	8002802 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 819f 	bne.w	8002802 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	461a      	mov	r2, r3
 80024d2:	f7ff fc66 	bl	8001da2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d00a      	beq.n	800250e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6919      	ldr	r1, [r3, #16]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002508:	f7ff fbca 	bl	8001ca0 <LL_ADC_SetOffset>
 800250c:	e179      	b.n	8002802 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fbe7 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <HAL_ADC_ConfigChannel+0x14e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fbdc 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	0e9b      	lsrs	r3, r3, #26
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	e01e      	b.n	8002578 <HAL_ADC_ConfigChannel+0x18c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fbd1 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002558:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800255c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002568:	2320      	movs	r3, #32
 800256a:	e004      	b.n	8002576 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800256c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1a4>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	e018      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x1d6>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80025a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80025ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	e004      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80025b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d106      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fba0 	bl	8001d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2101      	movs	r1, #1
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fb84 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10a      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x214>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fb79 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	f003 021f 	and.w	r2, r3, #31
 80025fe:	e01e      	b.n	800263e <HAL_ADC_ConfigChannel+0x252>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fb6e 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800261e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002622:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800262e:	2320      	movs	r3, #32
 8002630:	e004      	b.n	800263c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002646:	2b00      	cmp	r3, #0
 8002648:	d105      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x26a>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	0e9b      	lsrs	r3, r3, #26
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	e018      	b.n	8002688 <HAL_ADC_ConfigChannel+0x29c>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800266a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800266e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002672:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800267a:	2320      	movs	r3, #32
 800267c:	e004      	b.n	8002688 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800267e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002688:	429a      	cmp	r2, r3
 800268a:	d106      	bne.n	800269a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	2101      	movs	r1, #1
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fb3d 	bl	8001d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2102      	movs	r1, #2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fb21 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x2da>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2102      	movs	r1, #2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fb16 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	e01e      	b.n	8002704 <HAL_ADC_ConfigChannel+0x318>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2102      	movs	r1, #2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fb0b 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80026e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80026ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e004      	b.n	8002702 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80026f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270c:	2b00      	cmp	r3, #0
 800270e:	d105      	bne.n	800271c <HAL_ADC_ConfigChannel+0x330>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0e9b      	lsrs	r3, r3, #26
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	e014      	b.n	8002746 <HAL_ADC_ConfigChannel+0x35a>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800272a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800272c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002730:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e004      	b.n	8002746 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800273c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002746:	429a      	cmp	r2, r3
 8002748:	d106      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2200      	movs	r2, #0
 8002750:	2102      	movs	r1, #2
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fade 	bl	8001d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2103      	movs	r1, #3
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fac2 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x398>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2103      	movs	r1, #3
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fab7 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	f003 021f 	and.w	r2, r3, #31
 8002782:	e017      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x3c8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2103      	movs	r1, #3
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff faac 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800279c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800279e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80027a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80027a6:	2320      	movs	r3, #32
 80027a8:	e003      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80027aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x3e0>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	e011      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x404>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80027da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80027de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	e003      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80027e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d106      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2200      	movs	r2, #0
 80027fa:	2103      	movs	r1, #3
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fa89 	bl	8001d14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fb8a 	bl	8001f20 <LL_ADC_IsEnabled>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 8140 	bne.w	8002a94 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6819      	ldr	r1, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	461a      	mov	r2, r3
 8002822:	f7ff fae9 	bl	8001df8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	4a8f      	ldr	r2, [pc, #572]	@ (8002a68 <HAL_ADC_ConfigChannel+0x67c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	f040 8131 	bne.w	8002a94 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10b      	bne.n	800285a <HAL_ADC_ConfigChannel+0x46e>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	3301      	adds	r3, #1
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2b09      	cmp	r3, #9
 8002850:	bf94      	ite	ls
 8002852:	2301      	movls	r3, #1
 8002854:	2300      	movhi	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	e019      	b.n	800288e <HAL_ADC_ConfigChannel+0x4a2>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800286a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800286c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002872:	2320      	movs	r3, #32
 8002874:	e003      	b.n	800287e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	3301      	adds	r3, #1
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	2b09      	cmp	r3, #9
 8002886:	bf94      	ite	ls
 8002888:	2301      	movls	r3, #1
 800288a:	2300      	movhi	r3, #0
 800288c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800288e:	2b00      	cmp	r3, #0
 8002890:	d079      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289a:	2b00      	cmp	r3, #0
 800289c:	d107      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x4c2>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	0e9b      	lsrs	r3, r3, #26
 80028a4:	3301      	adds	r3, #1
 80028a6:	069b      	lsls	r3, r3, #26
 80028a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ac:	e015      	b.n	80028da <HAL_ADC_ConfigChannel+0x4ee>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80028bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80028c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80028c6:	2320      	movs	r3, #32
 80028c8:	e003      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80028ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	3301      	adds	r3, #1
 80028d4:	069b      	lsls	r3, r3, #26
 80028d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x50e>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	0e9b      	lsrs	r3, r3, #26
 80028ec:	3301      	adds	r3, #1
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	e017      	b.n	800292a <HAL_ADC_ConfigChannel+0x53e>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800290a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800290c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002912:	2320      	movs	r3, #32
 8002914:	e003      	b.n	800291e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	2101      	movs	r1, #1
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	ea42 0103 	orr.w	r1, r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x564>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	3301      	adds	r3, #1
 8002942:	f003 021f 	and.w	r2, r3, #31
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	051b      	lsls	r3, r3, #20
 800294e:	e018      	b.n	8002982 <HAL_ADC_ConfigChannel+0x596>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800295e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002960:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e003      	b.n	8002974 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800296c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f003 021f 	and.w	r2, r3, #31
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002982:	430b      	orrs	r3, r1
 8002984:	e081      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	2b00      	cmp	r3, #0
 8002990:	d107      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x5b6>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0e9b      	lsrs	r3, r3, #26
 8002998:	3301      	adds	r3, #1
 800299a:	069b      	lsls	r3, r3, #26
 800299c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029a0:	e015      	b.n	80029ce <HAL_ADC_ConfigChannel+0x5e2>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80029b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80029ba:	2320      	movs	r3, #32
 80029bc:	e003      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80029be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	069b      	lsls	r3, r3, #26
 80029ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x602>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	3301      	adds	r3, #1
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	e017      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x632>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	61bb      	str	r3, [r7, #24]
  return result;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002a06:	2320      	movs	r3, #32
 8002a08:	e003      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	ea42 0103 	orr.w	r1, r2, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x65e>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0e9b      	lsrs	r3, r3, #26
 8002a34:	3301      	adds	r3, #1
 8002a36:	f003 021f 	and.w	r2, r3, #31
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b1e      	subs	r3, #30
 8002a42:	051b      	lsls	r3, r3, #20
 8002a44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	e01e      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x69c>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	60fb      	str	r3, [r7, #12]
  return result;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d104      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002a62:	2320      	movs	r3, #32
 8002a64:	e006      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x688>
 8002a66:	bf00      	nop
 8002a68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	3301      	adds	r3, #1
 8002a76:	f003 021f 	and.w	r2, r3, #31
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	3b1e      	subs	r3, #30
 8002a82:	051b      	lsls	r3, r3, #20
 8002a84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a88:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7ff f987 	bl	8001da2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b44      	ldr	r3, [pc, #272]	@ (8002bac <HAL_ADC_ConfigChannel+0x7c0>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d07a      	beq.n	8002b96 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa0:	4843      	ldr	r0, [pc, #268]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002aa2:	f7ff f8ef 	bl	8001c84 <LL_ADC_GetCommonPathInternalCh>
 8002aa6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a41      	ldr	r2, [pc, #260]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d12c      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ab4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d126      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a3c      	ldr	r2, [pc, #240]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0x6e8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a3b      	ldr	r2, [pc, #236]	@ (8002bbc <HAL_ADC_ConfigChannel+0x7d0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d15d      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ad8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002adc:	4619      	mov	r1, r3
 8002ade:	4834      	ldr	r0, [pc, #208]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ae0:	f7ff f8bd 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ae4:	4b36      	ldr	r3, [pc, #216]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	4a36      	ldr	r2, [pc, #216]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002afe:	e002      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f9      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b0c:	e040      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2d      	ldr	r2, [pc, #180]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d118      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d112      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a23      	ldr	r2, [pc, #140]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_ADC_ConfigChannel+0x74c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a22      	ldr	r2, [pc, #136]	@ (8002bbc <HAL_ADC_ConfigChannel+0x7d0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d12d      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b40:	4619      	mov	r1, r3
 8002b42:	481b      	ldr	r0, [pc, #108]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b44:	f7ff f88b 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b48:	e024      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bcc <HAL_ADC_ConfigChannel+0x7e0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d120      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d11a      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a14      	ldr	r2, [pc, #80]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d115      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b72:	4619      	mov	r1, r3
 8002b74:	480e      	ldr	r0, [pc, #56]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b76:	f7ff f872 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
 8002b7a:	e00c      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b8e:	e002      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b90:	bf00      	nop
 8002b92:	e000      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	37d8      	adds	r7, #216	@ 0xd8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	80080000 	.word	0x80080000
 8002bb0:	50040300 	.word	0x50040300
 8002bb4:	c7520000 	.word	0xc7520000
 8002bb8:	50040000 	.word	0x50040000
 8002bbc:	50040200 	.word	0x50040200
 8002bc0:	20000018 	.word	0x20000018
 8002bc4:	053e2d63 	.word	0x053e2d63
 8002bc8:	cb840000 	.word	0xcb840000
 8002bcc:	80000001 	.word	0x80000001

08002bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f99d 	bl	8001f20 <LL_ADC_IsEnabled>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d169      	bne.n	8002cc0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	4b36      	ldr	r3, [pc, #216]	@ (8002ccc <ADC_Enable+0xfc>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	f043 0210 	orr.w	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	f043 0201 	orr.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e055      	b.n	8002cc2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff f96c 	bl	8001ef8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c20:	482b      	ldr	r0, [pc, #172]	@ (8002cd0 <ADC_Enable+0x100>)
 8002c22:	f7ff f82f 	bl	8001c84 <LL_ADC_GetCommonPathInternalCh>
 8002c26:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c30:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <ADC_Enable+0x104>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	099b      	lsrs	r3, r3, #6
 8002c36:	4a28      	ldr	r2, [pc, #160]	@ (8002cd8 <ADC_Enable+0x108>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c4a:	e002      	b.n	8002c52 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f9      	bne.n	8002c4c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c58:	f7fe ffbe 	bl	8001bd8 <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c5e:	e028      	b.n	8002cb2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f95b 	bl	8001f20 <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d104      	bne.n	8002c7a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff f93f 	bl	8001ef8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c7a:	f7fe ffad 	bl	8001bd8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d914      	bls.n	8002cb2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d00d      	beq.n	8002cb2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9a:	f043 0210 	orr.w	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e007      	b.n	8002cc2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d1cf      	bne.n	8002c60 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	8000003f 	.word	0x8000003f
 8002cd0:	50040300 	.word	0x50040300
 8002cd4:	20000018 	.word	0x20000018
 8002cd8:	053e2d63 	.word	0x053e2d63

08002cdc <LL_ADC_IsEnabled>:
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <LL_ADC_IsEnabled+0x18>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_ADC_IsEnabled+0x1a>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d101      	bne.n	8002d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b09f      	sub	sp, #124	@ 0x7c
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e093      	b.n	8002e6e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d52:	2300      	movs	r3, #0
 8002d54:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a47      	ldr	r2, [pc, #284]	@ (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d102      	bne.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d60:	4b46      	ldr	r3, [pc, #280]	@ (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	e001      	b.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e072      	b.n	8002e6e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ffb9 	bl	8002d02 <LL_ADC_REG_IsConversionOngoing>
 8002d90:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ffb3 	bl	8002d02 <LL_ADC_REG_IsConversionOngoing>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d154      	bne.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002da2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d151      	bne.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002da8:	4b35      	ldr	r3, [pc, #212]	@ (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002daa:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d02c      	beq.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002db4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dc6:	035b      	lsls	r3, r3, #13
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dd0:	4829      	ldr	r0, [pc, #164]	@ (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dd2:	f7ff ff83 	bl	8002cdc <LL_ADC_IsEnabled>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	4828      	ldr	r0, [pc, #160]	@ (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dda:	f7ff ff7f 	bl	8002cdc <LL_ADC_IsEnabled>
 8002dde:	4603      	mov	r3, r0
 8002de0:	431c      	orrs	r4, r3
 8002de2:	4828      	ldr	r0, [pc, #160]	@ (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002de4:	f7ff ff7a 	bl	8002cdc <LL_ADC_IsEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4323      	orrs	r3, r4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d137      	bne.n	8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002df0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002df8:	f023 030f 	bic.w	r3, r3, #15
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	6811      	ldr	r1, [r2, #0]
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	6892      	ldr	r2, [r2, #8]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	431a      	orrs	r2, r3
 8002e08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e0a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e0c:	e028      	b.n	8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e18:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e1a:	4817      	ldr	r0, [pc, #92]	@ (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e1c:	f7ff ff5e 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e20:	4604      	mov	r4, r0
 8002e22:	4816      	ldr	r0, [pc, #88]	@ (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e24:	f7ff ff5a 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	431c      	orrs	r4, r3
 8002e2c:	4815      	ldr	r0, [pc, #84]	@ (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e2e:	f7ff ff55 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4323      	orrs	r3, r4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d112      	bne.n	8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e42:	f023 030f 	bic.w	r3, r3, #15
 8002e46:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e48:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e4a:	e009      	b.n	8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e5e:	e000      	b.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e6a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	377c      	adds	r7, #124	@ 0x7c
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	50040000 	.word	0x50040000
 8002e7c:	50040100 	.word	0x50040100
 8002e80:	50040300 	.word	0x50040300
 8002e84:	50040200 	.word	0x50040200

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eba:	4a04      	ldr	r2, [pc, #16]	@ (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60d3      	str	r3, [r2, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	db0a      	blt.n	8002f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	490c      	ldr	r1, [pc, #48]	@ (8002f38 <__NVIC_SetPriority+0x4c>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	0112      	lsls	r2, r2, #4
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f14:	e00a      	b.n	8002f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4908      	ldr	r1, [pc, #32]	@ (8002f3c <__NVIC_SetPriority+0x50>)
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	3b04      	subs	r3, #4
 8002f24:	0112      	lsls	r2, r2, #4
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	440b      	add	r3, r1
 8002f2a:	761a      	strb	r2, [r3, #24]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000e100 	.word	0xe000e100
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f1c3 0307 	rsb	r3, r3, #7
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	bf28      	it	cs
 8002f5e:	2304      	movcs	r3, #4
 8002f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d902      	bls.n	8002f70 <NVIC_EncodePriority+0x30>
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3b03      	subs	r3, #3
 8002f6e:	e000      	b.n	8002f72 <NVIC_EncodePriority+0x32>
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	401a      	ands	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f88:	f04f 31ff 	mov.w	r1, #4294967295
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43d9      	mvns	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	4313      	orrs	r3, r2
         );
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3724      	adds	r7, #36	@ 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fb8:	d301      	bcc.n	8002fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00f      	b.n	8002fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <SysTick_Config+0x40>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc6:	210f      	movs	r1, #15
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f7ff ff8e 	bl	8002eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd0:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <SysTick_Config+0x40>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd6:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <SysTick_Config+0x40>)
 8002fd8:	2207      	movs	r2, #7
 8002fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	e000e010 	.word	0xe000e010

08002fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff47 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003014:	f7ff ff5c 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 8003018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff ff8e 	bl	8002f40 <NVIC_EncodePriority>
 8003024:	4602      	mov	r2, r0
 8003026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff5d 	bl	8002eec <__NVIC_SetPriority>
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ffb0 	bl	8002fa8 <SysTick_Config>
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003062:	e17f      	b.n	8003364 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2101      	movs	r1, #1
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	4013      	ands	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8171 	beq.w	800335e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d005      	beq.n	8003094 <HAL_GPIO_Init+0x40>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d130      	bne.n	80030f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ca:	2201      	movs	r2, #1
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	f003 0201 	and.w	r2, r3, #1
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d118      	bne.n	8003134 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003108:	2201      	movs	r2, #1
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	08db      	lsrs	r3, r3, #3
 800311e:	f003 0201 	and.w	r2, r3, #1
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b03      	cmp	r3, #3
 800313e:	d017      	beq.n	8003170 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2203      	movs	r2, #3
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d123      	bne.n	80031c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	08da      	lsrs	r2, r3, #3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3208      	adds	r2, #8
 8003184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	220f      	movs	r2, #15
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	08da      	lsrs	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3208      	adds	r2, #8
 80031be:	6939      	ldr	r1, [r7, #16]
 80031c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0203 	and.w	r2, r3, #3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80ac 	beq.w	800335e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003206:	4b5f      	ldr	r3, [pc, #380]	@ (8003384 <HAL_GPIO_Init+0x330>)
 8003208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320a:	4a5e      	ldr	r2, [pc, #376]	@ (8003384 <HAL_GPIO_Init+0x330>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6613      	str	r3, [r2, #96]	@ 0x60
 8003212:	4b5c      	ldr	r3, [pc, #368]	@ (8003384 <HAL_GPIO_Init+0x330>)
 8003214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800321e:	4a5a      	ldr	r2, [pc, #360]	@ (8003388 <HAL_GPIO_Init+0x334>)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	3302      	adds	r3, #2
 8003226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	220f      	movs	r2, #15
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003248:	d025      	beq.n	8003296 <HAL_GPIO_Init+0x242>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a4f      	ldr	r2, [pc, #316]	@ (800338c <HAL_GPIO_Init+0x338>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01f      	beq.n	8003292 <HAL_GPIO_Init+0x23e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4e      	ldr	r2, [pc, #312]	@ (8003390 <HAL_GPIO_Init+0x33c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d019      	beq.n	800328e <HAL_GPIO_Init+0x23a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4d      	ldr	r2, [pc, #308]	@ (8003394 <HAL_GPIO_Init+0x340>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0x236>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4c      	ldr	r2, [pc, #304]	@ (8003398 <HAL_GPIO_Init+0x344>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00d      	beq.n	8003286 <HAL_GPIO_Init+0x232>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4b      	ldr	r2, [pc, #300]	@ (800339c <HAL_GPIO_Init+0x348>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x22e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4a      	ldr	r2, [pc, #296]	@ (80033a0 <HAL_GPIO_Init+0x34c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_GPIO_Init+0x22a>
 800327a:	2306      	movs	r3, #6
 800327c:	e00c      	b.n	8003298 <HAL_GPIO_Init+0x244>
 800327e:	2307      	movs	r3, #7
 8003280:	e00a      	b.n	8003298 <HAL_GPIO_Init+0x244>
 8003282:	2305      	movs	r3, #5
 8003284:	e008      	b.n	8003298 <HAL_GPIO_Init+0x244>
 8003286:	2304      	movs	r3, #4
 8003288:	e006      	b.n	8003298 <HAL_GPIO_Init+0x244>
 800328a:	2303      	movs	r3, #3
 800328c:	e004      	b.n	8003298 <HAL_GPIO_Init+0x244>
 800328e:	2302      	movs	r3, #2
 8003290:	e002      	b.n	8003298 <HAL_GPIO_Init+0x244>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_GPIO_Init+0x244>
 8003296:	2300      	movs	r3, #0
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	f002 0203 	and.w	r2, r2, #3
 800329e:	0092      	lsls	r2, r2, #2
 80032a0:	4093      	lsls	r3, r2
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032a8:	4937      	ldr	r1, [pc, #220]	@ (8003388 <HAL_GPIO_Init+0x334>)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	3302      	adds	r3, #2
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032b6:	4b3b      	ldr	r3, [pc, #236]	@ (80033a4 <HAL_GPIO_Init+0x350>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032da:	4a32      	ldr	r2, [pc, #200]	@ (80033a4 <HAL_GPIO_Init+0x350>)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032e0:	4b30      	ldr	r3, [pc, #192]	@ (80033a4 <HAL_GPIO_Init+0x350>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003304:	4a27      	ldr	r2, [pc, #156]	@ (80033a4 <HAL_GPIO_Init+0x350>)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800330a:	4b26      	ldr	r3, [pc, #152]	@ (80033a4 <HAL_GPIO_Init+0x350>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	43db      	mvns	r3, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800332e:	4a1d      	ldr	r2, [pc, #116]	@ (80033a4 <HAL_GPIO_Init+0x350>)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003334:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <HAL_GPIO_Init+0x350>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	43db      	mvns	r3, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003358:	4a12      	ldr	r2, [pc, #72]	@ (80033a4 <HAL_GPIO_Init+0x350>)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3301      	adds	r3, #1
 8003362:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	f47f ae78 	bne.w	8003064 <HAL_GPIO_Init+0x10>
  }
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	40010000 	.word	0x40010000
 800338c:	48000400 	.word	0x48000400
 8003390:	48000800 	.word	0x48000800
 8003394:	48000c00 	.word	0x48000c00
 8003398:	48001000 	.word	0x48001000
 800339c:	48001400 	.word	0x48001400
 80033a0:	48001800 	.word	0x48001800
 80033a4:	40010400 	.word	0x40010400

080033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033c4:	e002      	b.n	80033cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033dc:	4b04      	ldr	r3, [pc, #16]	@ (80033f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40007000 	.word	0x40007000

080033f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003402:	d130      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003404:	4b23      	ldr	r3, [pc, #140]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800340c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003410:	d038      	beq.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003412:	4b20      	ldr	r3, [pc, #128]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800341a:	4a1e      	ldr	r2, [pc, #120]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003422:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2232      	movs	r2, #50	@ 0x32
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	4a1b      	ldr	r2, [pc, #108]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	0c9b      	lsrs	r3, r3, #18
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003438:	e002      	b.n	8003440 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3b01      	subs	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003440:	4b14      	ldr	r3, [pc, #80]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800344c:	d102      	bne.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x60>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f2      	bne.n	800343a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003454:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003460:	d110      	bne.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e00f      	b.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003466:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003472:	d007      	beq.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003474:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800347c:	4a05      	ldr	r2, [pc, #20]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003482:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40007000 	.word	0x40007000
 8003498:	20000018 	.word	0x20000018
 800349c:	431bde83 	.word	0x431bde83

080034a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e3ca      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b2:	4b97      	ldr	r3, [pc, #604]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034bc:	4b94      	ldr	r3, [pc, #592]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80e4 	beq.w	800369c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_RCC_OscConfig+0x4a>
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	f040 808b 	bne.w	80035f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	f040 8087 	bne.w	80035f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ea:	4b89      	ldr	r3, [pc, #548]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e3a2      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1a      	ldr	r2, [r3, #32]
 8003506:	4b82      	ldr	r3, [pc, #520]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d004      	beq.n	800351c <HAL_RCC_OscConfig+0x7c>
 8003512:	4b7f      	ldr	r3, [pc, #508]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800351a:	e005      	b.n	8003528 <HAL_RCC_OscConfig+0x88>
 800351c:	4b7c      	ldr	r3, [pc, #496]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800351e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003528:	4293      	cmp	r3, r2
 800352a:	d223      	bcs.n	8003574 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fd55 	bl	8003fe0 <RCC_SetFlashLatencyFromMSIRange>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e383      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003540:	4b73      	ldr	r3, [pc, #460]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a72      	ldr	r2, [pc, #456]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003546:	f043 0308 	orr.w	r3, r3, #8
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b70      	ldr	r3, [pc, #448]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	496d      	ldr	r1, [pc, #436]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800355e:	4b6c      	ldr	r3, [pc, #432]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	4968      	ldr	r1, [pc, #416]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
 8003572:	e025      	b.n	80035c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003574:	4b66      	ldr	r3, [pc, #408]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a65      	ldr	r2, [pc, #404]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800357a:	f043 0308 	orr.w	r3, r3, #8
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b63      	ldr	r3, [pc, #396]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4960      	ldr	r1, [pc, #384]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003592:	4b5f      	ldr	r3, [pc, #380]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	495b      	ldr	r1, [pc, #364]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fd15 	bl	8003fe0 <RCC_SetFlashLatencyFromMSIRange>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e343      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c0:	f000 fc4a 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b52      	ldr	r3, [pc, #328]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	4950      	ldr	r1, [pc, #320]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
 80035dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003718 <HAL_RCC_OscConfig+0x278>)
 80035de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035e0:	4b4e      	ldr	r3, [pc, #312]	@ (800371c <HAL_RCC_OscConfig+0x27c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe faa7 	bl	8001b38 <HAL_InitTick>
 80035ea:	4603      	mov	r3, r0
 80035ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d052      	beq.n	800369a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	e327      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d032      	beq.n	8003666 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003600:	4b43      	ldr	r3, [pc, #268]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a42      	ldr	r2, [pc, #264]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800360c:	f7fe fae4 	bl	8001bd8 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003614:	f7fe fae0 	bl	8001bd8 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e310      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003626:	4b3a      	ldr	r3, [pc, #232]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003632:	4b37      	ldr	r3, [pc, #220]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a36      	ldr	r2, [pc, #216]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003638:	f043 0308 	orr.w	r3, r3, #8
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b34      	ldr	r3, [pc, #208]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4931      	ldr	r1, [pc, #196]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003650:	4b2f      	ldr	r3, [pc, #188]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	492c      	ldr	r1, [pc, #176]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
 8003664:	e01a      	b.n	800369c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003666:	4b2a      	ldr	r3, [pc, #168]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a29      	ldr	r2, [pc, #164]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003672:	f7fe fab1 	bl	8001bd8 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800367a:	f7fe faad 	bl	8001bd8 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e2dd      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800368c:	4b20      	ldr	r3, [pc, #128]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0x1da>
 8003698:	e000      	b.n	800369c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800369a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d074      	beq.n	8003792 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d005      	beq.n	80036ba <HAL_RCC_OscConfig+0x21a>
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d10e      	bne.n	80036d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d10b      	bne.n	80036d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ba:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d064      	beq.n	8003790 <HAL_RCC_OscConfig+0x2f0>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d160      	bne.n	8003790 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e2ba      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x24a>
 80036dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80036e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	e026      	b.n	8003738 <HAL_RCC_OscConfig+0x298>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f2:	d115      	bne.n	8003720 <HAL_RCC_OscConfig+0x280>
 80036f4:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a05      	ldr	r2, [pc, #20]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80036fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a02      	ldr	r2, [pc, #8]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	e014      	b.n	8003738 <HAL_RCC_OscConfig+0x298>
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	0800a1fc 	.word	0x0800a1fc
 8003718:	20000018 	.word	0x20000018
 800371c:	2000001c 	.word	0x2000001c
 8003720:	4ba0      	ldr	r3, [pc, #640]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a9f      	ldr	r2, [pc, #636]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b9d      	ldr	r3, [pc, #628]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a9c      	ldr	r2, [pc, #624]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d013      	beq.n	8003768 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe fa4a 	bl	8001bd8 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003748:	f7fe fa46 	bl	8001bd8 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	@ 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e276      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375a:	4b92      	ldr	r3, [pc, #584]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x2a8>
 8003766:	e014      	b.n	8003792 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fe fa36 	bl	8001bd8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003770:	f7fe fa32 	bl	8001bd8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	@ 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e262      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003782:	4b88      	ldr	r3, [pc, #544]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x2d0>
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d060      	beq.n	8003860 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_OscConfig+0x310>
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d119      	bne.n	80037de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d116      	bne.n	80037de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b0:	4b7c      	ldr	r3, [pc, #496]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_OscConfig+0x328>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e23f      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	061b      	lsls	r3, r3, #24
 80037d6:	4973      	ldr	r1, [pc, #460]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037dc:	e040      	b.n	8003860 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d023      	beq.n	800382e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e6:	4b6f      	ldr	r3, [pc, #444]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a6e      	ldr	r2, [pc, #440]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fe f9f1 	bl	8001bd8 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fe f9ed 	bl	8001bd8 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e21d      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800380c:	4b65      	ldr	r3, [pc, #404]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b62      	ldr	r3, [pc, #392]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	495f      	ldr	r1, [pc, #380]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
 800382c:	e018      	b.n	8003860 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382e:	4b5d      	ldr	r3, [pc, #372]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5c      	ldr	r2, [pc, #368]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fe f9cd 	bl	8001bd8 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003842:	f7fe f9c9 	bl	8001bd8 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1f9      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003854:	4b53      	ldr	r3, [pc, #332]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d03c      	beq.n	80038e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01c      	beq.n	80038ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003874:	4b4b      	ldr	r3, [pc, #300]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800387a:	4a4a      	ldr	r2, [pc, #296]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe f9a8 	bl	8001bd8 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388c:	f7fe f9a4 	bl	8001bd8 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e1d4      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800389e:	4b41      	ldr	r3, [pc, #260]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80038a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0ef      	beq.n	800388c <HAL_RCC_OscConfig+0x3ec>
 80038ac:	e01b      	b.n	80038e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ae:	4b3d      	ldr	r3, [pc, #244]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80038b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038b4:	4a3b      	ldr	r2, [pc, #236]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fe f98b 	bl	8001bd8 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c6:	f7fe f987 	bl	8001bd8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e1b7      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038d8:	4b32      	ldr	r3, [pc, #200]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80038da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1ef      	bne.n	80038c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80a6 	beq.w	8003a40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f4:	2300      	movs	r3, #0
 80038f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038f8:	4b2a      	ldr	r3, [pc, #168]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10d      	bne.n	8003920 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003904:	4b27      	ldr	r3, [pc, #156]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003908:	4a26      	ldr	r2, [pc, #152]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800390a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800390e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003910:	4b24      	ldr	r3, [pc, #144]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391c:	2301      	movs	r3, #1
 800391e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003920:	4b21      	ldr	r3, [pc, #132]	@ (80039a8 <HAL_RCC_OscConfig+0x508>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d118      	bne.n	800395e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800392c:	4b1e      	ldr	r3, [pc, #120]	@ (80039a8 <HAL_RCC_OscConfig+0x508>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <HAL_RCC_OscConfig+0x508>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003936:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003938:	f7fe f94e 	bl	8001bd8 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003940:	f7fe f94a 	bl	8001bd8 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e17a      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003952:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <HAL_RCC_OscConfig+0x508>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d108      	bne.n	8003978 <HAL_RCC_OscConfig+0x4d8>
 8003966:	4b0f      	ldr	r3, [pc, #60]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396c:	4a0d      	ldr	r2, [pc, #52]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003976:	e029      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d115      	bne.n	80039ac <HAL_RCC_OscConfig+0x50c>
 8003980:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003986:	4a07      	ldr	r2, [pc, #28]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003988:	f043 0304 	orr.w	r3, r3, #4
 800398c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003990:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003996:	4a03      	ldr	r2, [pc, #12]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039a0:	e014      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40007000 	.word	0x40007000
 80039ac:	4b9c      	ldr	r3, [pc, #624]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b2:	4a9b      	ldr	r2, [pc, #620]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039bc:	4b98      	ldr	r3, [pc, #608]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	4a97      	ldr	r2, [pc, #604]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 80039c4:	f023 0304 	bic.w	r3, r3, #4
 80039c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d016      	beq.n	8003a02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fe f900 	bl	8001bd8 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fe f8fc 	bl	8001bd8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e12a      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ed      	beq.n	80039dc <HAL_RCC_OscConfig+0x53c>
 8003a00:	e015      	b.n	8003a2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a02:	f7fe f8e9 	bl	8001bd8 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a08:	e00a      	b.n	8003a20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0a:	f7fe f8e5 	bl	8001bd8 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e113      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a20:	4b7f      	ldr	r3, [pc, #508]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ed      	bne.n	8003a0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a2e:	7ffb      	ldrb	r3, [r7, #31]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a34:	4b7a      	ldr	r3, [pc, #488]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a38:	4a79      	ldr	r2, [pc, #484]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a3e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80fe 	beq.w	8003c46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	f040 80d0 	bne.w	8003bf4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a54:	4b72      	ldr	r3, [pc, #456]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f003 0203 	and.w	r2, r3, #3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d130      	bne.n	8003aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	3b01      	subs	r3, #1
 8003a74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d127      	bne.n	8003aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d11f      	bne.n	8003aca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a94:	2a07      	cmp	r2, #7
 8003a96:	bf14      	ite	ne
 8003a98:	2201      	movne	r2, #1
 8003a9a:	2200      	moveq	r2, #0
 8003a9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d113      	bne.n	8003aca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d109      	bne.n	8003aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d06e      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b0c      	cmp	r3, #12
 8003ace:	d069      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ad0:	4b53      	ldr	r3, [pc, #332]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d105      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003adc:	4b50      	ldr	r3, [pc, #320]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0ad      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003aec:	4b4c      	ldr	r3, [pc, #304]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a4b      	ldr	r2, [pc, #300]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003af2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003af6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003af8:	f7fe f86e 	bl	8001bd8 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fe f86a 	bl	8001bd8 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e09a      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b12:	4b43      	ldr	r3, [pc, #268]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b1e:	4b40      	ldr	r3, [pc, #256]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	4b40      	ldr	r3, [pc, #256]	@ (8003c24 <HAL_RCC_OscConfig+0x784>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b2e:	3a01      	subs	r2, #1
 8003b30:	0112      	lsls	r2, r2, #4
 8003b32:	4311      	orrs	r1, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b38:	0212      	lsls	r2, r2, #8
 8003b3a:	4311      	orrs	r1, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b40:	0852      	lsrs	r2, r2, #1
 8003b42:	3a01      	subs	r2, #1
 8003b44:	0552      	lsls	r2, r2, #21
 8003b46:	4311      	orrs	r1, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b4c:	0852      	lsrs	r2, r2, #1
 8003b4e:	3a01      	subs	r2, #1
 8003b50:	0652      	lsls	r2, r2, #25
 8003b52:	4311      	orrs	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b58:	0912      	lsrs	r2, r2, #4
 8003b5a:	0452      	lsls	r2, r2, #17
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	4930      	ldr	r1, [pc, #192]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b64:	4b2e      	ldr	r3, [pc, #184]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2d      	ldr	r2, [pc, #180]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b70:	4b2b      	ldr	r3, [pc, #172]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a2a      	ldr	r2, [pc, #168]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003b76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b7c:	f7fe f82c 	bl	8001bd8 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fe f828 	bl	8001bd8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e058      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b96:	4b22      	ldr	r3, [pc, #136]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ba2:	e050      	b.n	8003c46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e04f      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d148      	bne.n	8003c46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a19      	ldr	r2, [pc, #100]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bc0:	4b17      	ldr	r3, [pc, #92]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a16      	ldr	r2, [pc, #88]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bcc:	f7fe f804 	bl	8001bd8 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fe f800 	bl	8001bd8 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e030      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x734>
 8003bf2:	e028      	b.n	8003c46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d023      	beq.n	8003c42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a08      	ldr	r2, [pc, #32]	@ (8003c20 <HAL_RCC_OscConfig+0x780>)
 8003c00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fd ffe7 	bl	8001bd8 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c0c:	e00c      	b.n	8003c28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fd ffe3 	bl	8001bd8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d905      	bls.n	8003c28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e013      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
 8003c20:	40021000 	.word	0x40021000
 8003c24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c28:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <HAL_RCC_OscConfig+0x7b0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ec      	bne.n	8003c0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c34:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <HAL_RCC_OscConfig+0x7b0>)
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	4905      	ldr	r1, [pc, #20]	@ (8003c50 <HAL_RCC_OscConfig+0x7b0>)
 8003c3a:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <HAL_RCC_OscConfig+0x7b4>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60cb      	str	r3, [r1, #12]
 8003c40:	e001      	b.n	8003c46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000
 8003c54:	feeefffc 	.word	0xfeeefffc

08003c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0e7      	b.n	8003e3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b75      	ldr	r3, [pc, #468]	@ (8003e44 <HAL_RCC_ClockConfig+0x1ec>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d910      	bls.n	8003c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b72      	ldr	r3, [pc, #456]	@ (8003e44 <HAL_RCC_ClockConfig+0x1ec>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 0207 	bic.w	r2, r3, #7
 8003c82:	4970      	ldr	r1, [pc, #448]	@ (8003e44 <HAL_RCC_ClockConfig+0x1ec>)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8003e44 <HAL_RCC_ClockConfig+0x1ec>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0cf      	b.n	8003e3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	4b66      	ldr	r3, [pc, #408]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d908      	bls.n	8003cca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb8:	4b63      	ldr	r3, [pc, #396]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4960      	ldr	r1, [pc, #384]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d04c      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cde:	4b5a      	ldr	r3, [pc, #360]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d121      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0a6      	b.n	8003e3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf6:	4b54      	ldr	r3, [pc, #336]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d115      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e09a      	b.n	8003e3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e08e      	b.n	8003e3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e086      	b.n	8003e3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d2e:	4b46      	ldr	r3, [pc, #280]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4943      	ldr	r1, [pc, #268]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d40:	f7fd ff4a 	bl	8001bd8 <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d48:	f7fd ff46 	bl	8001bd8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e06e      	b.n	8003e3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 020c 	and.w	r2, r3, #12
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d1eb      	bne.n	8003d48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d010      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	4b31      	ldr	r3, [pc, #196]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d208      	bcs.n	8003d9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	492b      	ldr	r1, [pc, #172]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d9e:	4b29      	ldr	r3, [pc, #164]	@ (8003e44 <HAL_RCC_ClockConfig+0x1ec>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d210      	bcs.n	8003dce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dac:	4b25      	ldr	r3, [pc, #148]	@ (8003e44 <HAL_RCC_ClockConfig+0x1ec>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f023 0207 	bic.w	r2, r3, #7
 8003db4:	4923      	ldr	r1, [pc, #140]	@ (8003e44 <HAL_RCC_ClockConfig+0x1ec>)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbc:	4b21      	ldr	r3, [pc, #132]	@ (8003e44 <HAL_RCC_ClockConfig+0x1ec>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e036      	b.n	8003e3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dda:	4b1b      	ldr	r3, [pc, #108]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	4918      	ldr	r1, [pc, #96]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d009      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df8:	4b13      	ldr	r3, [pc, #76]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4910      	ldr	r1, [pc, #64]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e0c:	f000 f824 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f0>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	490b      	ldr	r1, [pc, #44]	@ (8003e4c <HAL_RCC_ClockConfig+0x1f4>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
 8003e28:	4a09      	ldr	r2, [pc, #36]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f8>)
 8003e2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e2c:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <HAL_RCC_ClockConfig+0x1fc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fd fe81 	bl	8001b38 <HAL_InitTick>
 8003e36:	4603      	mov	r3, r0
 8003e38:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e3a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40022000 	.word	0x40022000
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	0800a1fc 	.word	0x0800a1fc
 8003e50:	20000018 	.word	0x20000018
 8003e54:	2000001c 	.word	0x2000001c

08003e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	@ 0x24
 8003e5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e66:	4b3e      	ldr	r3, [pc, #248]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e70:	4b3b      	ldr	r3, [pc, #236]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x34>
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2b0c      	cmp	r3, #12
 8003e84:	d121      	bne.n	8003eca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d11e      	bne.n	8003eca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e8c:	4b34      	ldr	r3, [pc, #208]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e98:	4b31      	ldr	r3, [pc, #196]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	e005      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10d      	bne.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d102      	bne.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ed0:	4b25      	ldr	r3, [pc, #148]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	e004      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003edc:	4b23      	ldr	r3, [pc, #140]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ede:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d134      	bne.n	8003f50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d003      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0xa6>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d003      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0xac>
 8003efc:	e005      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003efe:	4b1a      	ldr	r3, [pc, #104]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f00:	617b      	str	r3, [r7, #20]
      break;
 8003f02:	e005      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f04:	4b19      	ldr	r3, [pc, #100]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003f06:	617b      	str	r3, [r7, #20]
      break;
 8003f08:	e002      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	617b      	str	r3, [r7, #20]
      break;
 8003f0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f10:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f1e:	4b10      	ldr	r3, [pc, #64]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	fb03 f202 	mul.w	r2, r3, r2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f36:	4b0a      	ldr	r3, [pc, #40]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	0e5b      	lsrs	r3, r3, #25
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	3301      	adds	r3, #1
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f50:	69bb      	ldr	r3, [r7, #24]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3724      	adds	r7, #36	@ 0x24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000
 8003f64:	0800a214 	.word	0x0800a214
 8003f68:	00f42400 	.word	0x00f42400
 8003f6c:	007a1200 	.word	0x007a1200

08003f70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f74:	4b03      	ldr	r3, [pc, #12]	@ (8003f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f76:	681b      	ldr	r3, [r3, #0]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000018 	.word	0x20000018

08003f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f8c:	f7ff fff0 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	4904      	ldr	r1, [pc, #16]	@ (8003fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f9e:	5ccb      	ldrb	r3, [r1, r3]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	0800a20c 	.word	0x0800a20c

08003fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fb8:	f7ff ffda 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	0adb      	lsrs	r3, r3, #11
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4904      	ldr	r1, [pc, #16]	@ (8003fdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	0800a20c 	.word	0x0800a20c

08003fe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fec:	4b2a      	ldr	r3, [pc, #168]	@ (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ff8:	f7ff f9ee 	bl	80033d8 <HAL_PWREx_GetVoltageRange>
 8003ffc:	6178      	str	r0, [r7, #20]
 8003ffe:	e014      	b.n	800402a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004000:	4b25      	ldr	r3, [pc, #148]	@ (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	4a24      	ldr	r2, [pc, #144]	@ (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800400a:	6593      	str	r3, [r2, #88]	@ 0x58
 800400c:	4b22      	ldr	r3, [pc, #136]	@ (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004018:	f7ff f9de 	bl	80033d8 <HAL_PWREx_GetVoltageRange>
 800401c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800401e:	4b1e      	ldr	r3, [pc, #120]	@ (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004022:	4a1d      	ldr	r2, [pc, #116]	@ (8004098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004028:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004030:	d10b      	bne.n	800404a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b80      	cmp	r3, #128	@ 0x80
 8004036:	d919      	bls.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2ba0      	cmp	r3, #160	@ 0xa0
 800403c:	d902      	bls.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800403e:	2302      	movs	r3, #2
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	e013      	b.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004044:	2301      	movs	r3, #1
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	e010      	b.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b80      	cmp	r3, #128	@ 0x80
 800404e:	d902      	bls.n	8004056 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004050:	2303      	movs	r3, #3
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	e00a      	b.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b80      	cmp	r3, #128	@ 0x80
 800405a:	d102      	bne.n	8004062 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800405c:	2302      	movs	r3, #2
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	e004      	b.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b70      	cmp	r3, #112	@ 0x70
 8004066:	d101      	bne.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004068:	2301      	movs	r3, #1
 800406a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800406c:	4b0b      	ldr	r3, [pc, #44]	@ (800409c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 0207 	bic.w	r2, r3, #7
 8004074:	4909      	ldr	r1, [pc, #36]	@ (800409c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d001      	beq.n	800408e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40021000 	.word	0x40021000
 800409c:	40022000 	.word	0x40022000

080040a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040a8:	2300      	movs	r3, #0
 80040aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040ac:	2300      	movs	r3, #0
 80040ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d041      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040c4:	d02a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040ca:	d824      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040d0:	d008      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040d6:	d81e      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040e0:	d010      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040e2:	e018      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040e4:	4b86      	ldr	r3, [pc, #536]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a85      	ldr	r2, [pc, #532]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040f0:	e015      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3304      	adds	r3, #4
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fabb 	bl	8004674 <RCCEx_PLLSAI1_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004102:	e00c      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3320      	adds	r3, #32
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fba6 	bl	800485c <RCCEx_PLLSAI2_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004114:	e003      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	74fb      	strb	r3, [r7, #19]
      break;
 800411a:	e000      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800411c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004124:	4b76      	ldr	r3, [pc, #472]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004132:	4973      	ldr	r1, [pc, #460]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800413a:	e001      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d041      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004150:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004154:	d02a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004156:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800415a:	d824      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800415c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004160:	d008      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004162:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004166:	d81e      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800416c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004170:	d010      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004172:	e018      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004174:	4b62      	ldr	r3, [pc, #392]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a61      	ldr	r2, [pc, #388]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004180:	e015      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fa73 	bl	8004674 <RCCEx_PLLSAI1_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004192:	e00c      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3320      	adds	r3, #32
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fb5e 	bl	800485c <RCCEx_PLLSAI2_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041a4:	e003      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	74fb      	strb	r3, [r7, #19]
      break;
 80041aa:	e000      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041b4:	4b52      	ldr	r3, [pc, #328]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041c2:	494f      	ldr	r1, [pc, #316]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041ca:	e001      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80a0 	beq.w	800431e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041e2:	4b47      	ldr	r3, [pc, #284]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f8:	4b41      	ldr	r3, [pc, #260]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	4a40      	ldr	r2, [pc, #256]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004202:	6593      	str	r3, [r2, #88]	@ 0x58
 8004204:	4b3e      	ldr	r3, [pc, #248]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004210:	2301      	movs	r3, #1
 8004212:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004214:	4b3b      	ldr	r3, [pc, #236]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3a      	ldr	r2, [pc, #232]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800421a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004220:	f7fd fcda 	bl	8001bd8 <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004226:	e009      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004228:	f7fd fcd6 	bl	8001bd8 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d902      	bls.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	74fb      	strb	r3, [r7, #19]
        break;
 800423a:	e005      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800423c:	4b31      	ldr	r3, [pc, #196]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ef      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d15c      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800424e:	4b2c      	ldr	r3, [pc, #176]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004258:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01f      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	429a      	cmp	r2, r3
 800426a:	d019      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800426c:	4b24      	ldr	r3, [pc, #144]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004276:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004278:	4b21      	ldr	r3, [pc, #132]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427e:	4a20      	ldr	r2, [pc, #128]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004288:	4b1d      	ldr	r3, [pc, #116]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428e:	4a1c      	ldr	r2, [pc, #112]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004298:	4a19      	ldr	r2, [pc, #100]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd fc95 	bl	8001bd8 <HAL_GetTick>
 80042ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b0:	e00b      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fd fc91 	bl	8001bd8 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d902      	bls.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	74fb      	strb	r3, [r7, #19]
            break;
 80042c8:	e006      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0ec      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042de:	4b08      	ldr	r3, [pc, #32]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ee:	4904      	ldr	r1, [pc, #16]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042f6:	e009      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
 80042fc:	e006      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000
 8004304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800430c:	7c7b      	ldrb	r3, [r7, #17]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004312:	4b9e      	ldr	r3, [pc, #632]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004316:	4a9d      	ldr	r2, [pc, #628]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004318:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800431c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800432a:	4b98      	ldr	r3, [pc, #608]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	f023 0203 	bic.w	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004338:	4994      	ldr	r1, [pc, #592]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800434c:	4b8f      	ldr	r3, [pc, #572]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004352:	f023 020c 	bic.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435a:	498c      	ldr	r1, [pc, #560]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800436e:	4b87      	ldr	r3, [pc, #540]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004374:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437c:	4983      	ldr	r1, [pc, #524]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004390:	4b7e      	ldr	r3, [pc, #504]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	497b      	ldr	r1, [pc, #492]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043b2:	4b76      	ldr	r3, [pc, #472]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c0:	4972      	ldr	r1, [pc, #456]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043d4:	4b6d      	ldr	r3, [pc, #436]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e2:	496a      	ldr	r1, [pc, #424]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043f6:	4b65      	ldr	r3, [pc, #404]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004404:	4961      	ldr	r1, [pc, #388]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004418:	4b5c      	ldr	r3, [pc, #368]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004426:	4959      	ldr	r1, [pc, #356]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800443a:	4b54      	ldr	r3, [pc, #336]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004440:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004448:	4950      	ldr	r1, [pc, #320]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800445c:	4b4b      	ldr	r3, [pc, #300]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446a:	4948      	ldr	r1, [pc, #288]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800447e:	4b43      	ldr	r3, [pc, #268]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004484:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448c:	493f      	ldr	r1, [pc, #252]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d028      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a0:	4b3a      	ldr	r3, [pc, #232]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ae:	4937      	ldr	r1, [pc, #220]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044be:	d106      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c0:	4b32      	ldr	r3, [pc, #200]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4a31      	ldr	r2, [pc, #196]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044ca:	60d3      	str	r3, [r2, #12]
 80044cc:	e011      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044d6:	d10c      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f8c8 	bl	8004674 <RCCEx_PLLSAI1_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044ee:	7cfb      	ldrb	r3, [r7, #19]
 80044f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d028      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044fe:	4b23      	ldr	r3, [pc, #140]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450c:	491f      	ldr	r1, [pc, #124]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004518:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800451c:	d106      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800451e:	4b1b      	ldr	r3, [pc, #108]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	4a1a      	ldr	r2, [pc, #104]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004528:	60d3      	str	r3, [r2, #12]
 800452a:	e011      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004530:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004534:	d10c      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3304      	adds	r3, #4
 800453a:	2101      	movs	r1, #1
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f899 	bl	8004674 <RCCEx_PLLSAI1_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004546:	7cfb      	ldrb	r3, [r7, #19]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d02b      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800455c:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456a:	4908      	ldr	r1, [pc, #32]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004576:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800457a:	d109      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457c:	4b03      	ldr	r3, [pc, #12]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a02      	ldr	r2, [pc, #8]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004586:	60d3      	str	r3, [r2, #12]
 8004588:	e014      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004598:	d10c      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3304      	adds	r3, #4
 800459e:	2101      	movs	r1, #1
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 f867 	bl	8004674 <RCCEx_PLLSAI1_Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
 80045b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02f      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045ce:	4928      	ldr	r1, [pc, #160]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045de:	d10d      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3304      	adds	r3, #4
 80045e4:	2102      	movs	r1, #2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f844 	bl	8004674 <RCCEx_PLLSAI1_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d014      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045f6:	7cfb      	ldrb	r3, [r7, #19]
 80045f8:	74bb      	strb	r3, [r7, #18]
 80045fa:	e011      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004604:	d10c      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3320      	adds	r3, #32
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f925 	bl	800485c <RCCEx_PLLSAI2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800461c:	7cfb      	ldrb	r3, [r7, #19]
 800461e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800462c:	4b10      	ldr	r3, [pc, #64]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004632:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800463a:	490d      	ldr	r1, [pc, #52]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800464e:	4b08      	ldr	r3, [pc, #32]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004654:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800465e:	4904      	ldr	r1, [pc, #16]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004666:	7cbb      	ldrb	r3, [r7, #18]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000

08004674 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004682:	4b75      	ldr	r3, [pc, #468]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d018      	beq.n	80046c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800468e:	4b72      	ldr	r3, [pc, #456]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0203 	and.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d10d      	bne.n	80046ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
       ||
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
       ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d047      	beq.n	800474a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
 80046be:	e044      	b.n	800474a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d018      	beq.n	80046fa <RCCEx_PLLSAI1_Config+0x86>
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d825      	bhi.n	8004718 <RCCEx_PLLSAI1_Config+0xa4>
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d002      	beq.n	80046d6 <RCCEx_PLLSAI1_Config+0x62>
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d009      	beq.n	80046e8 <RCCEx_PLLSAI1_Config+0x74>
 80046d4:	e020      	b.n	8004718 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046d6:	4b60      	ldr	r3, [pc, #384]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d11d      	bne.n	800471e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e6:	e01a      	b.n	800471e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d116      	bne.n	8004722 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f8:	e013      	b.n	8004722 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046fa:	4b57      	ldr	r3, [pc, #348]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004706:	4b54      	ldr	r3, [pc, #336]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004716:	e006      	b.n	8004726 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
      break;
 800471c:	e004      	b.n	8004728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800471e:	bf00      	nop
 8004720:	e002      	b.n	8004728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004722:	bf00      	nop
 8004724:	e000      	b.n	8004728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004726:	bf00      	nop
    }

    if(status == HAL_OK)
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800472e:	4b4a      	ldr	r3, [pc, #296]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	3b01      	subs	r3, #1
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	430b      	orrs	r3, r1
 8004744:	4944      	ldr	r1, [pc, #272]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004746:	4313      	orrs	r3, r2
 8004748:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d17d      	bne.n	800484c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004750:	4b41      	ldr	r3, [pc, #260]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a40      	ldr	r2, [pc, #256]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004756:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800475a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800475c:	f7fd fa3c 	bl	8001bd8 <HAL_GetTick>
 8004760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004762:	e009      	b.n	8004778 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004764:	f7fd fa38 	bl	8001bd8 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d902      	bls.n	8004778 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	73fb      	strb	r3, [r7, #15]
        break;
 8004776:	e005      	b.n	8004784 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004778:	4b37      	ldr	r3, [pc, #220]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1ef      	bne.n	8004764 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d160      	bne.n	800484c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d111      	bne.n	80047b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004790:	4b31      	ldr	r3, [pc, #196]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6892      	ldr	r2, [r2, #8]
 80047a0:	0211      	lsls	r1, r2, #8
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68d2      	ldr	r2, [r2, #12]
 80047a6:	0912      	lsrs	r2, r2, #4
 80047a8:	0452      	lsls	r2, r2, #17
 80047aa:	430a      	orrs	r2, r1
 80047ac:	492a      	ldr	r1, [pc, #168]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	610b      	str	r3, [r1, #16]
 80047b2:	e027      	b.n	8004804 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d112      	bne.n	80047e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ba:	4b27      	ldr	r3, [pc, #156]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80047c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6892      	ldr	r2, [r2, #8]
 80047ca:	0211      	lsls	r1, r2, #8
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6912      	ldr	r2, [r2, #16]
 80047d0:	0852      	lsrs	r2, r2, #1
 80047d2:	3a01      	subs	r2, #1
 80047d4:	0552      	lsls	r2, r2, #21
 80047d6:	430a      	orrs	r2, r1
 80047d8:	491f      	ldr	r1, [pc, #124]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	610b      	str	r3, [r1, #16]
 80047de:	e011      	b.n	8004804 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80047e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6892      	ldr	r2, [r2, #8]
 80047f0:	0211      	lsls	r1, r2, #8
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6952      	ldr	r2, [r2, #20]
 80047f6:	0852      	lsrs	r2, r2, #1
 80047f8:	3a01      	subs	r2, #1
 80047fa:	0652      	lsls	r2, r2, #25
 80047fc:	430a      	orrs	r2, r1
 80047fe:	4916      	ldr	r1, [pc, #88]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004800:	4313      	orrs	r3, r2
 8004802:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004804:	4b14      	ldr	r3, [pc, #80]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a13      	ldr	r2, [pc, #76]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800480e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004810:	f7fd f9e2 	bl	8001bd8 <HAL_GetTick>
 8004814:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004816:	e009      	b.n	800482c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004818:	f7fd f9de 	bl	8001bd8 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d902      	bls.n	800482c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	73fb      	strb	r3, [r7, #15]
          break;
 800482a:	e005      	b.n	8004838 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800482c:	4b0a      	ldr	r3, [pc, #40]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0ef      	beq.n	8004818 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800483e:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	4904      	ldr	r1, [pc, #16]	@ (8004858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000

0800485c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800486a:	4b6a      	ldr	r3, [pc, #424]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d018      	beq.n	80048a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004876:	4b67      	ldr	r3, [pc, #412]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0203 	and.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d10d      	bne.n	80048a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
       ||
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800488e:	4b61      	ldr	r3, [pc, #388]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
       ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d047      	beq.n	8004932 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
 80048a6:	e044      	b.n	8004932 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d018      	beq.n	80048e2 <RCCEx_PLLSAI2_Config+0x86>
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d825      	bhi.n	8004900 <RCCEx_PLLSAI2_Config+0xa4>
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d002      	beq.n	80048be <RCCEx_PLLSAI2_Config+0x62>
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d009      	beq.n	80048d0 <RCCEx_PLLSAI2_Config+0x74>
 80048bc:	e020      	b.n	8004900 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048be:	4b55      	ldr	r3, [pc, #340]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d11d      	bne.n	8004906 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ce:	e01a      	b.n	8004906 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048d0:	4b50      	ldr	r3, [pc, #320]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d116      	bne.n	800490a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e0:	e013      	b.n	800490a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10f      	bne.n	800490e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048ee:	4b49      	ldr	r3, [pc, #292]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048fe:	e006      	b.n	800490e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
      break;
 8004904:	e004      	b.n	8004910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004906:	bf00      	nop
 8004908:	e002      	b.n	8004910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800490a:	bf00      	nop
 800490c:	e000      	b.n	8004910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800490e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004916:	4b3f      	ldr	r3, [pc, #252]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6819      	ldr	r1, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	3b01      	subs	r3, #1
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	430b      	orrs	r3, r1
 800492c:	4939      	ldr	r1, [pc, #228]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800492e:	4313      	orrs	r3, r2
 8004930:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d167      	bne.n	8004a08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004938:	4b36      	ldr	r3, [pc, #216]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a35      	ldr	r2, [pc, #212]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004944:	f7fd f948 	bl	8001bd8 <HAL_GetTick>
 8004948:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800494a:	e009      	b.n	8004960 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800494c:	f7fd f944 	bl	8001bd8 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d902      	bls.n	8004960 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	73fb      	strb	r3, [r7, #15]
        break;
 800495e:	e005      	b.n	800496c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004960:	4b2c      	ldr	r3, [pc, #176]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1ef      	bne.n	800494c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d14a      	bne.n	8004a08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d111      	bne.n	800499c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004978:	4b26      	ldr	r3, [pc, #152]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6892      	ldr	r2, [r2, #8]
 8004988:	0211      	lsls	r1, r2, #8
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68d2      	ldr	r2, [r2, #12]
 800498e:	0912      	lsrs	r2, r2, #4
 8004990:	0452      	lsls	r2, r2, #17
 8004992:	430a      	orrs	r2, r1
 8004994:	491f      	ldr	r1, [pc, #124]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	614b      	str	r3, [r1, #20]
 800499a:	e011      	b.n	80049c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800499c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6892      	ldr	r2, [r2, #8]
 80049ac:	0211      	lsls	r1, r2, #8
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6912      	ldr	r2, [r2, #16]
 80049b2:	0852      	lsrs	r2, r2, #1
 80049b4:	3a01      	subs	r2, #1
 80049b6:	0652      	lsls	r2, r2, #25
 80049b8:	430a      	orrs	r2, r1
 80049ba:	4916      	ldr	r1, [pc, #88]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049c0:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a13      	ldr	r2, [pc, #76]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fd f904 	bl	8001bd8 <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049d2:	e009      	b.n	80049e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049d4:	f7fd f900 	bl	8001bd8 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d902      	bls.n	80049e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	73fb      	strb	r3, [r7, #15]
          break;
 80049e6:	e005      	b.n	80049f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ef      	beq.n	80049d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	4904      	ldr	r1, [pc, #16]	@ (8004a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000

08004a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e040      	b.n	8004aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fc fe88 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2224      	movs	r2, #36	@ 0x24
 8004a44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fc32 	bl	80052c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f977 	bl	8004d58 <UART_SetConfig>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e01b      	b.n	8004aac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fcb1 	bl	800540c <UART_CheckIdleState>
 8004aaa:	4603      	mov	r3, r0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	@ 0x28
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d177      	bne.n	8004bbc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_UART_Transmit+0x24>
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e070      	b.n	8004bbe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2221      	movs	r2, #33	@ 0x21
 8004ae8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aea:	f7fd f875 	bl	8001bd8 <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b08:	d108      	bne.n	8004b1c <HAL_UART_Transmit+0x68>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e003      	b.n	8004b24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b24:	e02f      	b.n	8004b86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2180      	movs	r1, #128	@ 0x80
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fd13 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e03b      	b.n	8004bbe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	881a      	ldrh	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b58:	b292      	uxth	r2, r2
 8004b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	3302      	adds	r3, #2
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	e007      	b.n	8004b74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3301      	adds	r3, #1
 8004b72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1c9      	bne.n	8004b26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2140      	movs	r1, #64	@ 0x40
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fcdd 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d004      	beq.n	8004bb2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e005      	b.n	8004bbe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b08a      	sub	sp, #40	@ 0x28
 8004bca:	af02      	add	r7, sp, #8
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	f040 80b6 	bne.w	8004d4e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_UART_Receive+0x28>
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0ae      	b.n	8004d50 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2222      	movs	r2, #34	@ 0x22
 8004bfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c08:	f7fc ffe6 	bl	8001bd8 <HAL_GetTick>
 8004c0c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	88fa      	ldrh	r2, [r7, #6]
 8004c12:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	88fa      	ldrh	r2, [r7, #6]
 8004c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c26:	d10e      	bne.n	8004c46 <HAL_UART_Receive+0x80>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <HAL_UART_Receive+0x76>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004c36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c3a:	e02d      	b.n	8004c98 <HAL_UART_Receive+0xd2>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	22ff      	movs	r2, #255	@ 0xff
 8004c40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c44:	e028      	b.n	8004c98 <HAL_UART_Receive+0xd2>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10d      	bne.n	8004c6a <HAL_UART_Receive+0xa4>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d104      	bne.n	8004c60 <HAL_UART_Receive+0x9a>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	22ff      	movs	r2, #255	@ 0xff
 8004c5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c5e:	e01b      	b.n	8004c98 <HAL_UART_Receive+0xd2>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	227f      	movs	r2, #127	@ 0x7f
 8004c64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c68:	e016      	b.n	8004c98 <HAL_UART_Receive+0xd2>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c72:	d10d      	bne.n	8004c90 <HAL_UART_Receive+0xca>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d104      	bne.n	8004c86 <HAL_UART_Receive+0xc0>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	227f      	movs	r2, #127	@ 0x7f
 8004c80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c84:	e008      	b.n	8004c98 <HAL_UART_Receive+0xd2>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	223f      	movs	r2, #63	@ 0x3f
 8004c8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c8e:	e003      	b.n	8004c98 <HAL_UART_Receive+0xd2>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c9e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca8:	d108      	bne.n	8004cbc <HAL_UART_Receive+0xf6>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	e003      	b.n	8004cc4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004cc4:	e037      	b.n	8004d36 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2120      	movs	r1, #32
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fc43 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e033      	b.n	8004d50 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10c      	bne.n	8004d08 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	8a7b      	ldrh	r3, [r7, #18]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	3302      	adds	r3, #2
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	e00d      	b.n	8004d24 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	8a7b      	ldrh	r3, [r7, #18]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	4013      	ands	r3, r2
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	3301      	adds	r3, #1
 8004d22:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1c1      	bne.n	8004cc6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e000      	b.n	8004d50 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
  }
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3720      	adds	r7, #32
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d5c:	b08a      	sub	sp, #40	@ 0x28
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4ba4      	ldr	r3, [pc, #656]	@ (8005018 <UART_SetConfig+0x2c0>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a99      	ldr	r2, [pc, #612]	@ (800501c <UART_SetConfig+0x2c4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a90      	ldr	r2, [pc, #576]	@ (8005020 <UART_SetConfig+0x2c8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d126      	bne.n	8004e30 <UART_SetConfig+0xd8>
 8004de2:	4b90      	ldr	r3, [pc, #576]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d81b      	bhi.n	8004e28 <UART_SetConfig+0xd0>
 8004df0:	a201      	add	r2, pc, #4	@ (adr r2, 8004df8 <UART_SetConfig+0xa0>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e19 	.word	0x08004e19
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e21 	.word	0x08004e21
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0e:	e116      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e10:	2302      	movs	r3, #2
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e16:	e112      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1e:	e10e      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e20:	2308      	movs	r3, #8
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e26:	e10a      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2e:	e106      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a7c      	ldr	r2, [pc, #496]	@ (8005028 <UART_SetConfig+0x2d0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d138      	bne.n	8004eac <UART_SetConfig+0x154>
 8004e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b0c      	cmp	r3, #12
 8004e46:	d82d      	bhi.n	8004ea4 <UART_SetConfig+0x14c>
 8004e48:	a201      	add	r2, pc, #4	@ (adr r2, 8004e50 <UART_SetConfig+0xf8>)
 8004e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4e:	bf00      	nop
 8004e50:	08004e85 	.word	0x08004e85
 8004e54:	08004ea5 	.word	0x08004ea5
 8004e58:	08004ea5 	.word	0x08004ea5
 8004e5c:	08004ea5 	.word	0x08004ea5
 8004e60:	08004e95 	.word	0x08004e95
 8004e64:	08004ea5 	.word	0x08004ea5
 8004e68:	08004ea5 	.word	0x08004ea5
 8004e6c:	08004ea5 	.word	0x08004ea5
 8004e70:	08004e8d 	.word	0x08004e8d
 8004e74:	08004ea5 	.word	0x08004ea5
 8004e78:	08004ea5 	.word	0x08004ea5
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004e9d 	.word	0x08004e9d
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8a:	e0d8      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e92:	e0d4      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e94:	2304      	movs	r3, #4
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e0d0      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e0cc      	b.n	800503e <UART_SetConfig+0x2e6>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eaa:	e0c8      	b.n	800503e <UART_SetConfig+0x2e6>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a5e      	ldr	r2, [pc, #376]	@ (800502c <UART_SetConfig+0x2d4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d125      	bne.n	8004f02 <UART_SetConfig+0x1aa>
 8004eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ec0:	2b30      	cmp	r3, #48	@ 0x30
 8004ec2:	d016      	beq.n	8004ef2 <UART_SetConfig+0x19a>
 8004ec4:	2b30      	cmp	r3, #48	@ 0x30
 8004ec6:	d818      	bhi.n	8004efa <UART_SetConfig+0x1a2>
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d00a      	beq.n	8004ee2 <UART_SetConfig+0x18a>
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d814      	bhi.n	8004efa <UART_SetConfig+0x1a2>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <UART_SetConfig+0x182>
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d008      	beq.n	8004eea <UART_SetConfig+0x192>
 8004ed8:	e00f      	b.n	8004efa <UART_SetConfig+0x1a2>
 8004eda:	2300      	movs	r3, #0
 8004edc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee0:	e0ad      	b.n	800503e <UART_SetConfig+0x2e6>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee8:	e0a9      	b.n	800503e <UART_SetConfig+0x2e6>
 8004eea:	2304      	movs	r3, #4
 8004eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef0:	e0a5      	b.n	800503e <UART_SetConfig+0x2e6>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef8:	e0a1      	b.n	800503e <UART_SetConfig+0x2e6>
 8004efa:	2310      	movs	r3, #16
 8004efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f00:	e09d      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a4a      	ldr	r2, [pc, #296]	@ (8005030 <UART_SetConfig+0x2d8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d125      	bne.n	8004f58 <UART_SetConfig+0x200>
 8004f0c:	4b45      	ldr	r3, [pc, #276]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f16:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f18:	d016      	beq.n	8004f48 <UART_SetConfig+0x1f0>
 8004f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f1c:	d818      	bhi.n	8004f50 <UART_SetConfig+0x1f8>
 8004f1e:	2b80      	cmp	r3, #128	@ 0x80
 8004f20:	d00a      	beq.n	8004f38 <UART_SetConfig+0x1e0>
 8004f22:	2b80      	cmp	r3, #128	@ 0x80
 8004f24:	d814      	bhi.n	8004f50 <UART_SetConfig+0x1f8>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <UART_SetConfig+0x1d8>
 8004f2a:	2b40      	cmp	r3, #64	@ 0x40
 8004f2c:	d008      	beq.n	8004f40 <UART_SetConfig+0x1e8>
 8004f2e:	e00f      	b.n	8004f50 <UART_SetConfig+0x1f8>
 8004f30:	2300      	movs	r3, #0
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f36:	e082      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3e:	e07e      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f40:	2304      	movs	r3, #4
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f46:	e07a      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4e:	e076      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f50:	2310      	movs	r3, #16
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f56:	e072      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a35      	ldr	r2, [pc, #212]	@ (8005034 <UART_SetConfig+0x2dc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d12a      	bne.n	8004fb8 <UART_SetConfig+0x260>
 8004f62:	4b30      	ldr	r3, [pc, #192]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f70:	d01a      	beq.n	8004fa8 <UART_SetConfig+0x250>
 8004f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f76:	d81b      	bhi.n	8004fb0 <UART_SetConfig+0x258>
 8004f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f7c:	d00c      	beq.n	8004f98 <UART_SetConfig+0x240>
 8004f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f82:	d815      	bhi.n	8004fb0 <UART_SetConfig+0x258>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <UART_SetConfig+0x238>
 8004f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f8c:	d008      	beq.n	8004fa0 <UART_SetConfig+0x248>
 8004f8e:	e00f      	b.n	8004fb0 <UART_SetConfig+0x258>
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f96:	e052      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9e:	e04e      	b.n	800503e <UART_SetConfig+0x2e6>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa6:	e04a      	b.n	800503e <UART_SetConfig+0x2e6>
 8004fa8:	2308      	movs	r3, #8
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fae:	e046      	b.n	800503e <UART_SetConfig+0x2e6>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb6:	e042      	b.n	800503e <UART_SetConfig+0x2e6>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a17      	ldr	r2, [pc, #92]	@ (800501c <UART_SetConfig+0x2c4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d13a      	bne.n	8005038 <UART_SetConfig+0x2e0>
 8004fc2:	4b18      	ldr	r3, [pc, #96]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fd0:	d01a      	beq.n	8005008 <UART_SetConfig+0x2b0>
 8004fd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fd6:	d81b      	bhi.n	8005010 <UART_SetConfig+0x2b8>
 8004fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fdc:	d00c      	beq.n	8004ff8 <UART_SetConfig+0x2a0>
 8004fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe2:	d815      	bhi.n	8005010 <UART_SetConfig+0x2b8>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <UART_SetConfig+0x298>
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fec:	d008      	beq.n	8005000 <UART_SetConfig+0x2a8>
 8004fee:	e00f      	b.n	8005010 <UART_SetConfig+0x2b8>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff6:	e022      	b.n	800503e <UART_SetConfig+0x2e6>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffe:	e01e      	b.n	800503e <UART_SetConfig+0x2e6>
 8005000:	2304      	movs	r3, #4
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005006:	e01a      	b.n	800503e <UART_SetConfig+0x2e6>
 8005008:	2308      	movs	r3, #8
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800500e:	e016      	b.n	800503e <UART_SetConfig+0x2e6>
 8005010:	2310      	movs	r3, #16
 8005012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005016:	e012      	b.n	800503e <UART_SetConfig+0x2e6>
 8005018:	efff69f3 	.word	0xefff69f3
 800501c:	40008000 	.word	0x40008000
 8005020:	40013800 	.word	0x40013800
 8005024:	40021000 	.word	0x40021000
 8005028:	40004400 	.word	0x40004400
 800502c:	40004800 	.word	0x40004800
 8005030:	40004c00 	.word	0x40004c00
 8005034:	40005000 	.word	0x40005000
 8005038:	2310      	movs	r3, #16
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a9f      	ldr	r2, [pc, #636]	@ (80052c0 <UART_SetConfig+0x568>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d17a      	bne.n	800513e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005048:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800504c:	2b08      	cmp	r3, #8
 800504e:	d824      	bhi.n	800509a <UART_SetConfig+0x342>
 8005050:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <UART_SetConfig+0x300>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	0800507d 	.word	0x0800507d
 800505c:	0800509b 	.word	0x0800509b
 8005060:	08005085 	.word	0x08005085
 8005064:	0800509b 	.word	0x0800509b
 8005068:	0800508b 	.word	0x0800508b
 800506c:	0800509b 	.word	0x0800509b
 8005070:	0800509b 	.word	0x0800509b
 8005074:	0800509b 	.word	0x0800509b
 8005078:	08005093 	.word	0x08005093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507c:	f7fe ff84 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 8005080:	61f8      	str	r0, [r7, #28]
        break;
 8005082:	e010      	b.n	80050a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005084:	4b8f      	ldr	r3, [pc, #572]	@ (80052c4 <UART_SetConfig+0x56c>)
 8005086:	61fb      	str	r3, [r7, #28]
        break;
 8005088:	e00d      	b.n	80050a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508a:	f7fe fee5 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 800508e:	61f8      	str	r0, [r7, #28]
        break;
 8005090:	e009      	b.n	80050a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005096:	61fb      	str	r3, [r7, #28]
        break;
 8005098:	e005      	b.n	80050a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80fb 	beq.w	80052a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	4413      	add	r3, r2
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d305      	bcc.n	80050ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d903      	bls.n	80050d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050d0:	e0e8      	b.n	80052a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2200      	movs	r2, #0
 80050d6:	461c      	mov	r4, r3
 80050d8:	4615      	mov	r5, r2
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	022b      	lsls	r3, r5, #8
 80050e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050e8:	0222      	lsls	r2, r4, #8
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	6849      	ldr	r1, [r1, #4]
 80050ee:	0849      	lsrs	r1, r1, #1
 80050f0:	2000      	movs	r0, #0
 80050f2:	4688      	mov	r8, r1
 80050f4:	4681      	mov	r9, r0
 80050f6:	eb12 0a08 	adds.w	sl, r2, r8
 80050fa:	eb43 0b09 	adc.w	fp, r3, r9
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510c:	4650      	mov	r0, sl
 800510e:	4659      	mov	r1, fp
 8005110:	f7fb fdba 	bl	8000c88 <__aeabi_uldivmod>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4613      	mov	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005122:	d308      	bcc.n	8005136 <UART_SetConfig+0x3de>
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800512a:	d204      	bcs.n	8005136 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	60da      	str	r2, [r3, #12]
 8005134:	e0b6      	b.n	80052a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800513c:	e0b2      	b.n	80052a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005146:	d15e      	bne.n	8005206 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800514c:	2b08      	cmp	r3, #8
 800514e:	d828      	bhi.n	80051a2 <UART_SetConfig+0x44a>
 8005150:	a201      	add	r2, pc, #4	@ (adr r2, 8005158 <UART_SetConfig+0x400>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	080051a3 	.word	0x080051a3
 8005168:	08005193 	.word	0x08005193
 800516c:	080051a3 	.word	0x080051a3
 8005170:	080051a3 	.word	0x080051a3
 8005174:	080051a3 	.word	0x080051a3
 8005178:	0800519b 	.word	0x0800519b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800517c:	f7fe ff04 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 8005180:	61f8      	str	r0, [r7, #28]
        break;
 8005182:	e014      	b.n	80051ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7fe ff16 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 8005188:	61f8      	str	r0, [r7, #28]
        break;
 800518a:	e010      	b.n	80051ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b4d      	ldr	r3, [pc, #308]	@ (80052c4 <UART_SetConfig+0x56c>)
 800518e:	61fb      	str	r3, [r7, #28]
        break;
 8005190:	e00d      	b.n	80051ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fe fe61 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8005196:	61f8      	str	r0, [r7, #28]
        break;
 8005198:	e009      	b.n	80051ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519e:	61fb      	str	r3, [r7, #28]
        break;
 80051a0:	e005      	b.n	80051ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d077      	beq.n	80052a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	005a      	lsls	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	085b      	lsrs	r3, r3, #1
 80051be:	441a      	add	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b0f      	cmp	r3, #15
 80051ce:	d916      	bls.n	80051fe <UART_SetConfig+0x4a6>
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d6:	d212      	bcs.n	80051fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f023 030f 	bic.w	r3, r3, #15
 80051e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	085b      	lsrs	r3, r3, #1
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	8afb      	ldrh	r3, [r7, #22]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	8afa      	ldrh	r2, [r7, #22]
 80051fa:	60da      	str	r2, [r3, #12]
 80051fc:	e052      	b.n	80052a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005204:	e04e      	b.n	80052a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005206:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800520a:	2b08      	cmp	r3, #8
 800520c:	d827      	bhi.n	800525e <UART_SetConfig+0x506>
 800520e:	a201      	add	r2, pc, #4	@ (adr r2, 8005214 <UART_SetConfig+0x4bc>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005239 	.word	0x08005239
 8005218:	08005241 	.word	0x08005241
 800521c:	08005249 	.word	0x08005249
 8005220:	0800525f 	.word	0x0800525f
 8005224:	0800524f 	.word	0x0800524f
 8005228:	0800525f 	.word	0x0800525f
 800522c:	0800525f 	.word	0x0800525f
 8005230:	0800525f 	.word	0x0800525f
 8005234:	08005257 	.word	0x08005257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005238:	f7fe fea6 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 800523c:	61f8      	str	r0, [r7, #28]
        break;
 800523e:	e014      	b.n	800526a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005240:	f7fe feb8 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 8005244:	61f8      	str	r0, [r7, #28]
        break;
 8005246:	e010      	b.n	800526a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005248:	4b1e      	ldr	r3, [pc, #120]	@ (80052c4 <UART_SetConfig+0x56c>)
 800524a:	61fb      	str	r3, [r7, #28]
        break;
 800524c:	e00d      	b.n	800526a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524e:	f7fe fe03 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8005252:	61f8      	str	r0, [r7, #28]
        break;
 8005254:	e009      	b.n	800526a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800525a:	61fb      	str	r3, [r7, #28]
        break;
 800525c:	e005      	b.n	800526a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005268:	bf00      	nop
    }

    if (pclk != 0U)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d019      	beq.n	80052a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	085a      	lsrs	r2, r3, #1
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	441a      	add	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005282:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	d909      	bls.n	800529e <UART_SetConfig+0x546>
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005290:	d205      	bcs.n	800529e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60da      	str	r2, [r3, #12]
 800529c:	e002      	b.n	80052a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80052b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3728      	adds	r7, #40	@ 0x28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052be:	bf00      	nop
 80052c0:	40008000 	.word	0x40008000
 80052c4:	00f42400 	.word	0x00f42400

080052c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01a      	beq.n	80053de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053c6:	d10a      	bne.n	80053de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	605a      	str	r2, [r3, #4]
  }
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b098      	sub	sp, #96	@ 0x60
 8005410:	af02      	add	r7, sp, #8
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800541c:	f7fc fbdc 	bl	8001bd8 <HAL_GetTick>
 8005420:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b08      	cmp	r3, #8
 800542e:	d12e      	bne.n	800548e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005430:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005438:	2200      	movs	r2, #0
 800543a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f88c 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d021      	beq.n	800548e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800545e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005468:	647b      	str	r3, [r7, #68]	@ 0x44
 800546a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800546e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e6      	bne.n	800544a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e062      	b.n	8005554 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d149      	bne.n	8005530 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f856 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d03c      	beq.n	8005530 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	623b      	str	r3, [r7, #32]
   return(result);
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e6      	bne.n	80054b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3308      	adds	r3, #8
 80054ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3308      	adds	r3, #8
 8005506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005508:	61fa      	str	r2, [r7, #28]
 800550a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	69b9      	ldr	r1, [r7, #24]
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	617b      	str	r3, [r7, #20]
   return(result);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e5      	bne.n	80054e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e011      	b.n	8005554 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3758      	adds	r7, #88	@ 0x58
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556c:	e04f      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d04b      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fc fb2f 	bl	8001bd8 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <UART_WaitOnFlagUntilTimeout+0x30>
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e04e      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d037      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b80      	cmp	r3, #128	@ 0x80
 80055a2:	d034      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b40      	cmp	r3, #64	@ 0x40
 80055a8:	d031      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d110      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2208      	movs	r2, #8
 80055be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f838 	bl	8005636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2208      	movs	r2, #8
 80055ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e029      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055e8:	d111      	bne.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f81e 	bl	8005636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e00f      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4013      	ands	r3, r2
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	429a      	cmp	r2, r3
 800561c:	bf0c      	ite	eq
 800561e:	2301      	moveq	r3, #1
 8005620:	2300      	movne	r3, #0
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	429a      	cmp	r2, r3
 800562a:	d0a0      	beq.n	800556e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005636:	b480      	push	{r7}
 8005638:	b095      	sub	sp, #84	@ 0x54
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800565c:	643b      	str	r3, [r7, #64]	@ 0x40
 800565e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005662:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e6      	bne.n	800563e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3308      	adds	r3, #8
 8005676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	e853 3f00 	ldrex	r3, [r3]
 800567e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3308      	adds	r3, #8
 800568e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005690:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005692:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005698:	e841 2300 	strex	r3, r2, [r1]
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e5      	bne.n	8005670 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d118      	bne.n	80056de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f023 0310 	bic.w	r3, r3, #16
 80056c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6979      	ldr	r1, [r7, #20]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	613b      	str	r3, [r7, #16]
   return(result);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e6      	bne.n	80056ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056f2:	bf00      	nop
 80056f4:	3754      	adds	r7, #84	@ 0x54
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <__cvt>:
 80056fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005702:	ec57 6b10 	vmov	r6, r7, d0
 8005706:	2f00      	cmp	r7, #0
 8005708:	460c      	mov	r4, r1
 800570a:	4619      	mov	r1, r3
 800570c:	463b      	mov	r3, r7
 800570e:	bfbb      	ittet	lt
 8005710:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005714:	461f      	movlt	r7, r3
 8005716:	2300      	movge	r3, #0
 8005718:	232d      	movlt	r3, #45	@ 0x2d
 800571a:	700b      	strb	r3, [r1, #0]
 800571c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800571e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005722:	4691      	mov	r9, r2
 8005724:	f023 0820 	bic.w	r8, r3, #32
 8005728:	bfbc      	itt	lt
 800572a:	4632      	movlt	r2, r6
 800572c:	4616      	movlt	r6, r2
 800572e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005732:	d005      	beq.n	8005740 <__cvt+0x42>
 8005734:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005738:	d100      	bne.n	800573c <__cvt+0x3e>
 800573a:	3401      	adds	r4, #1
 800573c:	2102      	movs	r1, #2
 800573e:	e000      	b.n	8005742 <__cvt+0x44>
 8005740:	2103      	movs	r1, #3
 8005742:	ab03      	add	r3, sp, #12
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	ab02      	add	r3, sp, #8
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	ec47 6b10 	vmov	d0, r6, r7
 800574e:	4653      	mov	r3, sl
 8005750:	4622      	mov	r2, r4
 8005752:	f001 f86d 	bl	8006830 <_dtoa_r>
 8005756:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800575a:	4605      	mov	r5, r0
 800575c:	d119      	bne.n	8005792 <__cvt+0x94>
 800575e:	f019 0f01 	tst.w	r9, #1
 8005762:	d00e      	beq.n	8005782 <__cvt+0x84>
 8005764:	eb00 0904 	add.w	r9, r0, r4
 8005768:	2200      	movs	r2, #0
 800576a:	2300      	movs	r3, #0
 800576c:	4630      	mov	r0, r6
 800576e:	4639      	mov	r1, r7
 8005770:	f7fb f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005774:	b108      	cbz	r0, 800577a <__cvt+0x7c>
 8005776:	f8cd 900c 	str.w	r9, [sp, #12]
 800577a:	2230      	movs	r2, #48	@ 0x30
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	454b      	cmp	r3, r9
 8005780:	d31e      	bcc.n	80057c0 <__cvt+0xc2>
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005786:	1b5b      	subs	r3, r3, r5
 8005788:	4628      	mov	r0, r5
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	b004      	add	sp, #16
 800578e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005792:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005796:	eb00 0904 	add.w	r9, r0, r4
 800579a:	d1e5      	bne.n	8005768 <__cvt+0x6a>
 800579c:	7803      	ldrb	r3, [r0, #0]
 800579e:	2b30      	cmp	r3, #48	@ 0x30
 80057a0:	d10a      	bne.n	80057b8 <__cvt+0xba>
 80057a2:	2200      	movs	r2, #0
 80057a4:	2300      	movs	r3, #0
 80057a6:	4630      	mov	r0, r6
 80057a8:	4639      	mov	r1, r7
 80057aa:	f7fb f98d 	bl	8000ac8 <__aeabi_dcmpeq>
 80057ae:	b918      	cbnz	r0, 80057b8 <__cvt+0xba>
 80057b0:	f1c4 0401 	rsb	r4, r4, #1
 80057b4:	f8ca 4000 	str.w	r4, [sl]
 80057b8:	f8da 3000 	ldr.w	r3, [sl]
 80057bc:	4499      	add	r9, r3
 80057be:	e7d3      	b.n	8005768 <__cvt+0x6a>
 80057c0:	1c59      	adds	r1, r3, #1
 80057c2:	9103      	str	r1, [sp, #12]
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	e7d9      	b.n	800577c <__cvt+0x7e>

080057c8 <__exponent>:
 80057c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ca:	2900      	cmp	r1, #0
 80057cc:	bfba      	itte	lt
 80057ce:	4249      	neglt	r1, r1
 80057d0:	232d      	movlt	r3, #45	@ 0x2d
 80057d2:	232b      	movge	r3, #43	@ 0x2b
 80057d4:	2909      	cmp	r1, #9
 80057d6:	7002      	strb	r2, [r0, #0]
 80057d8:	7043      	strb	r3, [r0, #1]
 80057da:	dd29      	ble.n	8005830 <__exponent+0x68>
 80057dc:	f10d 0307 	add.w	r3, sp, #7
 80057e0:	461d      	mov	r5, r3
 80057e2:	270a      	movs	r7, #10
 80057e4:	461a      	mov	r2, r3
 80057e6:	fbb1 f6f7 	udiv	r6, r1, r7
 80057ea:	fb07 1416 	mls	r4, r7, r6, r1
 80057ee:	3430      	adds	r4, #48	@ 0x30
 80057f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057f4:	460c      	mov	r4, r1
 80057f6:	2c63      	cmp	r4, #99	@ 0x63
 80057f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80057fc:	4631      	mov	r1, r6
 80057fe:	dcf1      	bgt.n	80057e4 <__exponent+0x1c>
 8005800:	3130      	adds	r1, #48	@ 0x30
 8005802:	1e94      	subs	r4, r2, #2
 8005804:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005808:	1c41      	adds	r1, r0, #1
 800580a:	4623      	mov	r3, r4
 800580c:	42ab      	cmp	r3, r5
 800580e:	d30a      	bcc.n	8005826 <__exponent+0x5e>
 8005810:	f10d 0309 	add.w	r3, sp, #9
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	42ac      	cmp	r4, r5
 8005818:	bf88      	it	hi
 800581a:	2300      	movhi	r3, #0
 800581c:	3302      	adds	r3, #2
 800581e:	4403      	add	r3, r0
 8005820:	1a18      	subs	r0, r3, r0
 8005822:	b003      	add	sp, #12
 8005824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005826:	f813 6b01 	ldrb.w	r6, [r3], #1
 800582a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800582e:	e7ed      	b.n	800580c <__exponent+0x44>
 8005830:	2330      	movs	r3, #48	@ 0x30
 8005832:	3130      	adds	r1, #48	@ 0x30
 8005834:	7083      	strb	r3, [r0, #2]
 8005836:	70c1      	strb	r1, [r0, #3]
 8005838:	1d03      	adds	r3, r0, #4
 800583a:	e7f1      	b.n	8005820 <__exponent+0x58>

0800583c <_printf_float>:
 800583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	b08d      	sub	sp, #52	@ 0x34
 8005842:	460c      	mov	r4, r1
 8005844:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005848:	4616      	mov	r6, r2
 800584a:	461f      	mov	r7, r3
 800584c:	4605      	mov	r5, r0
 800584e:	f000 fee9 	bl	8006624 <_localeconv_r>
 8005852:	6803      	ldr	r3, [r0, #0]
 8005854:	9304      	str	r3, [sp, #16]
 8005856:	4618      	mov	r0, r3
 8005858:	f7fa fd0a 	bl	8000270 <strlen>
 800585c:	2300      	movs	r3, #0
 800585e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005860:	f8d8 3000 	ldr.w	r3, [r8]
 8005864:	9005      	str	r0, [sp, #20]
 8005866:	3307      	adds	r3, #7
 8005868:	f023 0307 	bic.w	r3, r3, #7
 800586c:	f103 0208 	add.w	r2, r3, #8
 8005870:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005874:	f8d4 b000 	ldr.w	fp, [r4]
 8005878:	f8c8 2000 	str.w	r2, [r8]
 800587c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005880:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005884:	9307      	str	r3, [sp, #28]
 8005886:	f8cd 8018 	str.w	r8, [sp, #24]
 800588a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800588e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005892:	4b9c      	ldr	r3, [pc, #624]	@ (8005b04 <_printf_float+0x2c8>)
 8005894:	f04f 32ff 	mov.w	r2, #4294967295
 8005898:	f7fb f948 	bl	8000b2c <__aeabi_dcmpun>
 800589c:	bb70      	cbnz	r0, 80058fc <_printf_float+0xc0>
 800589e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058a2:	4b98      	ldr	r3, [pc, #608]	@ (8005b04 <_printf_float+0x2c8>)
 80058a4:	f04f 32ff 	mov.w	r2, #4294967295
 80058a8:	f7fb f922 	bl	8000af0 <__aeabi_dcmple>
 80058ac:	bb30      	cbnz	r0, 80058fc <_printf_float+0xc0>
 80058ae:	2200      	movs	r2, #0
 80058b0:	2300      	movs	r3, #0
 80058b2:	4640      	mov	r0, r8
 80058b4:	4649      	mov	r1, r9
 80058b6:	f7fb f911 	bl	8000adc <__aeabi_dcmplt>
 80058ba:	b110      	cbz	r0, 80058c2 <_printf_float+0x86>
 80058bc:	232d      	movs	r3, #45	@ 0x2d
 80058be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058c2:	4a91      	ldr	r2, [pc, #580]	@ (8005b08 <_printf_float+0x2cc>)
 80058c4:	4b91      	ldr	r3, [pc, #580]	@ (8005b0c <_printf_float+0x2d0>)
 80058c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80058ca:	bf8c      	ite	hi
 80058cc:	4690      	movhi	r8, r2
 80058ce:	4698      	movls	r8, r3
 80058d0:	2303      	movs	r3, #3
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	f02b 0304 	bic.w	r3, fp, #4
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	f04f 0900 	mov.w	r9, #0
 80058de:	9700      	str	r7, [sp, #0]
 80058e0:	4633      	mov	r3, r6
 80058e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80058e4:	4621      	mov	r1, r4
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 f9d2 	bl	8005c90 <_printf_common>
 80058ec:	3001      	adds	r0, #1
 80058ee:	f040 808d 	bne.w	8005a0c <_printf_float+0x1d0>
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295
 80058f6:	b00d      	add	sp, #52	@ 0x34
 80058f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058fc:	4642      	mov	r2, r8
 80058fe:	464b      	mov	r3, r9
 8005900:	4640      	mov	r0, r8
 8005902:	4649      	mov	r1, r9
 8005904:	f7fb f912 	bl	8000b2c <__aeabi_dcmpun>
 8005908:	b140      	cbz	r0, 800591c <_printf_float+0xe0>
 800590a:	464b      	mov	r3, r9
 800590c:	2b00      	cmp	r3, #0
 800590e:	bfbc      	itt	lt
 8005910:	232d      	movlt	r3, #45	@ 0x2d
 8005912:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005916:	4a7e      	ldr	r2, [pc, #504]	@ (8005b10 <_printf_float+0x2d4>)
 8005918:	4b7e      	ldr	r3, [pc, #504]	@ (8005b14 <_printf_float+0x2d8>)
 800591a:	e7d4      	b.n	80058c6 <_printf_float+0x8a>
 800591c:	6863      	ldr	r3, [r4, #4]
 800591e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005922:	9206      	str	r2, [sp, #24]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	d13b      	bne.n	80059a0 <_printf_float+0x164>
 8005928:	2306      	movs	r3, #6
 800592a:	6063      	str	r3, [r4, #4]
 800592c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005930:	2300      	movs	r3, #0
 8005932:	6022      	str	r2, [r4, #0]
 8005934:	9303      	str	r3, [sp, #12]
 8005936:	ab0a      	add	r3, sp, #40	@ 0x28
 8005938:	e9cd a301 	strd	sl, r3, [sp, #4]
 800593c:	ab09      	add	r3, sp, #36	@ 0x24
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	6861      	ldr	r1, [r4, #4]
 8005942:	ec49 8b10 	vmov	d0, r8, r9
 8005946:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800594a:	4628      	mov	r0, r5
 800594c:	f7ff fed7 	bl	80056fe <__cvt>
 8005950:	9b06      	ldr	r3, [sp, #24]
 8005952:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005954:	2b47      	cmp	r3, #71	@ 0x47
 8005956:	4680      	mov	r8, r0
 8005958:	d129      	bne.n	80059ae <_printf_float+0x172>
 800595a:	1cc8      	adds	r0, r1, #3
 800595c:	db02      	blt.n	8005964 <_printf_float+0x128>
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	4299      	cmp	r1, r3
 8005962:	dd41      	ble.n	80059e8 <_printf_float+0x1ac>
 8005964:	f1aa 0a02 	sub.w	sl, sl, #2
 8005968:	fa5f fa8a 	uxtb.w	sl, sl
 800596c:	3901      	subs	r1, #1
 800596e:	4652      	mov	r2, sl
 8005970:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005974:	9109      	str	r1, [sp, #36]	@ 0x24
 8005976:	f7ff ff27 	bl	80057c8 <__exponent>
 800597a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800597c:	1813      	adds	r3, r2, r0
 800597e:	2a01      	cmp	r2, #1
 8005980:	4681      	mov	r9, r0
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	dc02      	bgt.n	800598c <_printf_float+0x150>
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	07d2      	lsls	r2, r2, #31
 800598a:	d501      	bpl.n	8005990 <_printf_float+0x154>
 800598c:	3301      	adds	r3, #1
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0a2      	beq.n	80058de <_printf_float+0xa2>
 8005998:	232d      	movs	r3, #45	@ 0x2d
 800599a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800599e:	e79e      	b.n	80058de <_printf_float+0xa2>
 80059a0:	9a06      	ldr	r2, [sp, #24]
 80059a2:	2a47      	cmp	r2, #71	@ 0x47
 80059a4:	d1c2      	bne.n	800592c <_printf_float+0xf0>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1c0      	bne.n	800592c <_printf_float+0xf0>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e7bd      	b.n	800592a <_printf_float+0xee>
 80059ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059b2:	d9db      	bls.n	800596c <_printf_float+0x130>
 80059b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059b8:	d118      	bne.n	80059ec <_printf_float+0x1b0>
 80059ba:	2900      	cmp	r1, #0
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	dd0b      	ble.n	80059d8 <_printf_float+0x19c>
 80059c0:	6121      	str	r1, [r4, #16]
 80059c2:	b913      	cbnz	r3, 80059ca <_printf_float+0x18e>
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	07d0      	lsls	r0, r2, #31
 80059c8:	d502      	bpl.n	80059d0 <_printf_float+0x194>
 80059ca:	3301      	adds	r3, #1
 80059cc:	440b      	add	r3, r1
 80059ce:	6123      	str	r3, [r4, #16]
 80059d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	e7db      	b.n	8005990 <_printf_float+0x154>
 80059d8:	b913      	cbnz	r3, 80059e0 <_printf_float+0x1a4>
 80059da:	6822      	ldr	r2, [r4, #0]
 80059dc:	07d2      	lsls	r2, r2, #31
 80059de:	d501      	bpl.n	80059e4 <_printf_float+0x1a8>
 80059e0:	3302      	adds	r3, #2
 80059e2:	e7f4      	b.n	80059ce <_printf_float+0x192>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e7f2      	b.n	80059ce <_printf_float+0x192>
 80059e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059ee:	4299      	cmp	r1, r3
 80059f0:	db05      	blt.n	80059fe <_printf_float+0x1c2>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	6121      	str	r1, [r4, #16]
 80059f6:	07d8      	lsls	r0, r3, #31
 80059f8:	d5ea      	bpl.n	80059d0 <_printf_float+0x194>
 80059fa:	1c4b      	adds	r3, r1, #1
 80059fc:	e7e7      	b.n	80059ce <_printf_float+0x192>
 80059fe:	2900      	cmp	r1, #0
 8005a00:	bfd4      	ite	le
 8005a02:	f1c1 0202 	rsble	r2, r1, #2
 8005a06:	2201      	movgt	r2, #1
 8005a08:	4413      	add	r3, r2
 8005a0a:	e7e0      	b.n	80059ce <_printf_float+0x192>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	055a      	lsls	r2, r3, #21
 8005a10:	d407      	bmi.n	8005a22 <_printf_float+0x1e6>
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	4642      	mov	r2, r8
 8005a16:	4631      	mov	r1, r6
 8005a18:	4628      	mov	r0, r5
 8005a1a:	47b8      	blx	r7
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d12b      	bne.n	8005a78 <_printf_float+0x23c>
 8005a20:	e767      	b.n	80058f2 <_printf_float+0xb6>
 8005a22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a26:	f240 80dd 	bls.w	8005be4 <_printf_float+0x3a8>
 8005a2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2300      	movs	r3, #0
 8005a32:	f7fb f849 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d033      	beq.n	8005aa2 <_printf_float+0x266>
 8005a3a:	4a37      	ldr	r2, [pc, #220]	@ (8005b18 <_printf_float+0x2dc>)
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b8      	blx	r7
 8005a44:	3001      	adds	r0, #1
 8005a46:	f43f af54 	beq.w	80058f2 <_printf_float+0xb6>
 8005a4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a4e:	4543      	cmp	r3, r8
 8005a50:	db02      	blt.n	8005a58 <_printf_float+0x21c>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	07d8      	lsls	r0, r3, #31
 8005a56:	d50f      	bpl.n	8005a78 <_printf_float+0x23c>
 8005a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a5c:	4631      	mov	r1, r6
 8005a5e:	4628      	mov	r0, r5
 8005a60:	47b8      	blx	r7
 8005a62:	3001      	adds	r0, #1
 8005a64:	f43f af45 	beq.w	80058f2 <_printf_float+0xb6>
 8005a68:	f04f 0900 	mov.w	r9, #0
 8005a6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a70:	f104 0a1a 	add.w	sl, r4, #26
 8005a74:	45c8      	cmp	r8, r9
 8005a76:	dc09      	bgt.n	8005a8c <_printf_float+0x250>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	079b      	lsls	r3, r3, #30
 8005a7c:	f100 8103 	bmi.w	8005c86 <_printf_float+0x44a>
 8005a80:	68e0      	ldr	r0, [r4, #12]
 8005a82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a84:	4298      	cmp	r0, r3
 8005a86:	bfb8      	it	lt
 8005a88:	4618      	movlt	r0, r3
 8005a8a:	e734      	b.n	80058f6 <_printf_float+0xba>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4652      	mov	r2, sl
 8005a90:	4631      	mov	r1, r6
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	f43f af2b 	beq.w	80058f2 <_printf_float+0xb6>
 8005a9c:	f109 0901 	add.w	r9, r9, #1
 8005aa0:	e7e8      	b.n	8005a74 <_printf_float+0x238>
 8005aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dc39      	bgt.n	8005b1c <_printf_float+0x2e0>
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b18 <_printf_float+0x2dc>)
 8005aaa:	2301      	movs	r3, #1
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b8      	blx	r7
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	f43f af1d 	beq.w	80058f2 <_printf_float+0xb6>
 8005ab8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005abc:	ea59 0303 	orrs.w	r3, r9, r3
 8005ac0:	d102      	bne.n	8005ac8 <_printf_float+0x28c>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	07d9      	lsls	r1, r3, #31
 8005ac6:	d5d7      	bpl.n	8005a78 <_printf_float+0x23c>
 8005ac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005acc:	4631      	mov	r1, r6
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	f43f af0d 	beq.w	80058f2 <_printf_float+0xb6>
 8005ad8:	f04f 0a00 	mov.w	sl, #0
 8005adc:	f104 0b1a 	add.w	fp, r4, #26
 8005ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ae2:	425b      	negs	r3, r3
 8005ae4:	4553      	cmp	r3, sl
 8005ae6:	dc01      	bgt.n	8005aec <_printf_float+0x2b0>
 8005ae8:	464b      	mov	r3, r9
 8005aea:	e793      	b.n	8005a14 <_printf_float+0x1d8>
 8005aec:	2301      	movs	r3, #1
 8005aee:	465a      	mov	r2, fp
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	f43f aefb 	beq.w	80058f2 <_printf_float+0xb6>
 8005afc:	f10a 0a01 	add.w	sl, sl, #1
 8005b00:	e7ee      	b.n	8005ae0 <_printf_float+0x2a4>
 8005b02:	bf00      	nop
 8005b04:	7fefffff 	.word	0x7fefffff
 8005b08:	0800a248 	.word	0x0800a248
 8005b0c:	0800a244 	.word	0x0800a244
 8005b10:	0800a250 	.word	0x0800a250
 8005b14:	0800a24c 	.word	0x0800a24c
 8005b18:	0800a254 	.word	0x0800a254
 8005b1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b22:	4553      	cmp	r3, sl
 8005b24:	bfa8      	it	ge
 8005b26:	4653      	movge	r3, sl
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	4699      	mov	r9, r3
 8005b2c:	dc36      	bgt.n	8005b9c <_printf_float+0x360>
 8005b2e:	f04f 0b00 	mov.w	fp, #0
 8005b32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b36:	f104 021a 	add.w	r2, r4, #26
 8005b3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b3c:	9306      	str	r3, [sp, #24]
 8005b3e:	eba3 0309 	sub.w	r3, r3, r9
 8005b42:	455b      	cmp	r3, fp
 8005b44:	dc31      	bgt.n	8005baa <_printf_float+0x36e>
 8005b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b48:	459a      	cmp	sl, r3
 8005b4a:	dc3a      	bgt.n	8005bc2 <_printf_float+0x386>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	07da      	lsls	r2, r3, #31
 8005b50:	d437      	bmi.n	8005bc2 <_printf_float+0x386>
 8005b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b54:	ebaa 0903 	sub.w	r9, sl, r3
 8005b58:	9b06      	ldr	r3, [sp, #24]
 8005b5a:	ebaa 0303 	sub.w	r3, sl, r3
 8005b5e:	4599      	cmp	r9, r3
 8005b60:	bfa8      	it	ge
 8005b62:	4699      	movge	r9, r3
 8005b64:	f1b9 0f00 	cmp.w	r9, #0
 8005b68:	dc33      	bgt.n	8005bd2 <_printf_float+0x396>
 8005b6a:	f04f 0800 	mov.w	r8, #0
 8005b6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b72:	f104 0b1a 	add.w	fp, r4, #26
 8005b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b78:	ebaa 0303 	sub.w	r3, sl, r3
 8005b7c:	eba3 0309 	sub.w	r3, r3, r9
 8005b80:	4543      	cmp	r3, r8
 8005b82:	f77f af79 	ble.w	8005a78 <_printf_float+0x23c>
 8005b86:	2301      	movs	r3, #1
 8005b88:	465a      	mov	r2, fp
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	f43f aeae 	beq.w	80058f2 <_printf_float+0xb6>
 8005b96:	f108 0801 	add.w	r8, r8, #1
 8005b9a:	e7ec      	b.n	8005b76 <_printf_float+0x33a>
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d1c2      	bne.n	8005b2e <_printf_float+0x2f2>
 8005ba8:	e6a3      	b.n	80058f2 <_printf_float+0xb6>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4631      	mov	r1, r6
 8005bae:	4628      	mov	r0, r5
 8005bb0:	9206      	str	r2, [sp, #24]
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f ae9c 	beq.w	80058f2 <_printf_float+0xb6>
 8005bba:	9a06      	ldr	r2, [sp, #24]
 8005bbc:	f10b 0b01 	add.w	fp, fp, #1
 8005bc0:	e7bb      	b.n	8005b3a <_printf_float+0x2fe>
 8005bc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d1c0      	bne.n	8005b52 <_printf_float+0x316>
 8005bd0:	e68f      	b.n	80058f2 <_printf_float+0xb6>
 8005bd2:	9a06      	ldr	r2, [sp, #24]
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	4442      	add	r2, r8
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	d1c3      	bne.n	8005b6a <_printf_float+0x32e>
 8005be2:	e686      	b.n	80058f2 <_printf_float+0xb6>
 8005be4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005be8:	f1ba 0f01 	cmp.w	sl, #1
 8005bec:	dc01      	bgt.n	8005bf2 <_printf_float+0x3b6>
 8005bee:	07db      	lsls	r3, r3, #31
 8005bf0:	d536      	bpl.n	8005c60 <_printf_float+0x424>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	f43f ae78 	beq.w	80058f2 <_printf_float+0xb6>
 8005c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c06:	4631      	mov	r1, r6
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b8      	blx	r7
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	f43f ae70 	beq.w	80058f2 <_printf_float+0xb6>
 8005c12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c16:	2200      	movs	r2, #0
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c1e:	f7fa ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c22:	b9c0      	cbnz	r0, 8005c56 <_printf_float+0x41a>
 8005c24:	4653      	mov	r3, sl
 8005c26:	f108 0201 	add.w	r2, r8, #1
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	47b8      	blx	r7
 8005c30:	3001      	adds	r0, #1
 8005c32:	d10c      	bne.n	8005c4e <_printf_float+0x412>
 8005c34:	e65d      	b.n	80058f2 <_printf_float+0xb6>
 8005c36:	2301      	movs	r3, #1
 8005c38:	465a      	mov	r2, fp
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	47b8      	blx	r7
 8005c40:	3001      	adds	r0, #1
 8005c42:	f43f ae56 	beq.w	80058f2 <_printf_float+0xb6>
 8005c46:	f108 0801 	add.w	r8, r8, #1
 8005c4a:	45d0      	cmp	r8, sl
 8005c4c:	dbf3      	blt.n	8005c36 <_printf_float+0x3fa>
 8005c4e:	464b      	mov	r3, r9
 8005c50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c54:	e6df      	b.n	8005a16 <_printf_float+0x1da>
 8005c56:	f04f 0800 	mov.w	r8, #0
 8005c5a:	f104 0b1a 	add.w	fp, r4, #26
 8005c5e:	e7f4      	b.n	8005c4a <_printf_float+0x40e>
 8005c60:	2301      	movs	r3, #1
 8005c62:	4642      	mov	r2, r8
 8005c64:	e7e1      	b.n	8005c2a <_printf_float+0x3ee>
 8005c66:	2301      	movs	r3, #1
 8005c68:	464a      	mov	r2, r9
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b8      	blx	r7
 8005c70:	3001      	adds	r0, #1
 8005c72:	f43f ae3e 	beq.w	80058f2 <_printf_float+0xb6>
 8005c76:	f108 0801 	add.w	r8, r8, #1
 8005c7a:	68e3      	ldr	r3, [r4, #12]
 8005c7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c7e:	1a5b      	subs	r3, r3, r1
 8005c80:	4543      	cmp	r3, r8
 8005c82:	dcf0      	bgt.n	8005c66 <_printf_float+0x42a>
 8005c84:	e6fc      	b.n	8005a80 <_printf_float+0x244>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	f104 0919 	add.w	r9, r4, #25
 8005c8e:	e7f4      	b.n	8005c7a <_printf_float+0x43e>

08005c90 <_printf_common>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	4616      	mov	r6, r2
 8005c96:	4698      	mov	r8, r3
 8005c98:	688a      	ldr	r2, [r1, #8]
 8005c9a:	690b      	ldr	r3, [r1, #16]
 8005c9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	bfb8      	it	lt
 8005ca4:	4613      	movlt	r3, r2
 8005ca6:	6033      	str	r3, [r6, #0]
 8005ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cac:	4607      	mov	r7, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	b10a      	cbz	r2, 8005cb6 <_printf_common+0x26>
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	6033      	str	r3, [r6, #0]
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	0699      	lsls	r1, r3, #26
 8005cba:	bf42      	ittt	mi
 8005cbc:	6833      	ldrmi	r3, [r6, #0]
 8005cbe:	3302      	addmi	r3, #2
 8005cc0:	6033      	strmi	r3, [r6, #0]
 8005cc2:	6825      	ldr	r5, [r4, #0]
 8005cc4:	f015 0506 	ands.w	r5, r5, #6
 8005cc8:	d106      	bne.n	8005cd8 <_printf_common+0x48>
 8005cca:	f104 0a19 	add.w	sl, r4, #25
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	6832      	ldr	r2, [r6, #0]
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dc26      	bgt.n	8005d26 <_printf_common+0x96>
 8005cd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	3b00      	subs	r3, #0
 8005ce0:	bf18      	it	ne
 8005ce2:	2301      	movne	r3, #1
 8005ce4:	0692      	lsls	r2, r2, #26
 8005ce6:	d42b      	bmi.n	8005d40 <_printf_common+0xb0>
 8005ce8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cec:	4641      	mov	r1, r8
 8005cee:	4638      	mov	r0, r7
 8005cf0:	47c8      	blx	r9
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d01e      	beq.n	8005d34 <_printf_common+0xa4>
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	6922      	ldr	r2, [r4, #16]
 8005cfa:	f003 0306 	and.w	r3, r3, #6
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	bf02      	ittt	eq
 8005d02:	68e5      	ldreq	r5, [r4, #12]
 8005d04:	6833      	ldreq	r3, [r6, #0]
 8005d06:	1aed      	subeq	r5, r5, r3
 8005d08:	68a3      	ldr	r3, [r4, #8]
 8005d0a:	bf0c      	ite	eq
 8005d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d10:	2500      	movne	r5, #0
 8005d12:	4293      	cmp	r3, r2
 8005d14:	bfc4      	itt	gt
 8005d16:	1a9b      	subgt	r3, r3, r2
 8005d18:	18ed      	addgt	r5, r5, r3
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	341a      	adds	r4, #26
 8005d1e:	42b5      	cmp	r5, r6
 8005d20:	d11a      	bne.n	8005d58 <_printf_common+0xc8>
 8005d22:	2000      	movs	r0, #0
 8005d24:	e008      	b.n	8005d38 <_printf_common+0xa8>
 8005d26:	2301      	movs	r3, #1
 8005d28:	4652      	mov	r2, sl
 8005d2a:	4641      	mov	r1, r8
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	47c8      	blx	r9
 8005d30:	3001      	adds	r0, #1
 8005d32:	d103      	bne.n	8005d3c <_printf_common+0xac>
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	e7c6      	b.n	8005cce <_printf_common+0x3e>
 8005d40:	18e1      	adds	r1, r4, r3
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	2030      	movs	r0, #48	@ 0x30
 8005d46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d4a:	4422      	add	r2, r4
 8005d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d54:	3302      	adds	r3, #2
 8005d56:	e7c7      	b.n	8005ce8 <_printf_common+0x58>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	4638      	mov	r0, r7
 8005d60:	47c8      	blx	r9
 8005d62:	3001      	adds	r0, #1
 8005d64:	d0e6      	beq.n	8005d34 <_printf_common+0xa4>
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7d9      	b.n	8005d1e <_printf_common+0x8e>
	...

08005d6c <_printf_i>:
 8005d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	7e0f      	ldrb	r7, [r1, #24]
 8005d72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d74:	2f78      	cmp	r7, #120	@ 0x78
 8005d76:	4691      	mov	r9, r2
 8005d78:	4680      	mov	r8, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	469a      	mov	sl, r3
 8005d7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d82:	d807      	bhi.n	8005d94 <_printf_i+0x28>
 8005d84:	2f62      	cmp	r7, #98	@ 0x62
 8005d86:	d80a      	bhi.n	8005d9e <_printf_i+0x32>
 8005d88:	2f00      	cmp	r7, #0
 8005d8a:	f000 80d1 	beq.w	8005f30 <_printf_i+0x1c4>
 8005d8e:	2f58      	cmp	r7, #88	@ 0x58
 8005d90:	f000 80b8 	beq.w	8005f04 <_printf_i+0x198>
 8005d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d9c:	e03a      	b.n	8005e14 <_printf_i+0xa8>
 8005d9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005da2:	2b15      	cmp	r3, #21
 8005da4:	d8f6      	bhi.n	8005d94 <_printf_i+0x28>
 8005da6:	a101      	add	r1, pc, #4	@ (adr r1, 8005dac <_printf_i+0x40>)
 8005da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dac:	08005e05 	.word	0x08005e05
 8005db0:	08005e19 	.word	0x08005e19
 8005db4:	08005d95 	.word	0x08005d95
 8005db8:	08005d95 	.word	0x08005d95
 8005dbc:	08005d95 	.word	0x08005d95
 8005dc0:	08005d95 	.word	0x08005d95
 8005dc4:	08005e19 	.word	0x08005e19
 8005dc8:	08005d95 	.word	0x08005d95
 8005dcc:	08005d95 	.word	0x08005d95
 8005dd0:	08005d95 	.word	0x08005d95
 8005dd4:	08005d95 	.word	0x08005d95
 8005dd8:	08005f17 	.word	0x08005f17
 8005ddc:	08005e43 	.word	0x08005e43
 8005de0:	08005ed1 	.word	0x08005ed1
 8005de4:	08005d95 	.word	0x08005d95
 8005de8:	08005d95 	.word	0x08005d95
 8005dec:	08005f39 	.word	0x08005f39
 8005df0:	08005d95 	.word	0x08005d95
 8005df4:	08005e43 	.word	0x08005e43
 8005df8:	08005d95 	.word	0x08005d95
 8005dfc:	08005d95 	.word	0x08005d95
 8005e00:	08005ed9 	.word	0x08005ed9
 8005e04:	6833      	ldr	r3, [r6, #0]
 8005e06:	1d1a      	adds	r2, r3, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6032      	str	r2, [r6, #0]
 8005e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e14:	2301      	movs	r3, #1
 8005e16:	e09c      	b.n	8005f52 <_printf_i+0x1e6>
 8005e18:	6833      	ldr	r3, [r6, #0]
 8005e1a:	6820      	ldr	r0, [r4, #0]
 8005e1c:	1d19      	adds	r1, r3, #4
 8005e1e:	6031      	str	r1, [r6, #0]
 8005e20:	0606      	lsls	r6, r0, #24
 8005e22:	d501      	bpl.n	8005e28 <_printf_i+0xbc>
 8005e24:	681d      	ldr	r5, [r3, #0]
 8005e26:	e003      	b.n	8005e30 <_printf_i+0xc4>
 8005e28:	0645      	lsls	r5, r0, #25
 8005e2a:	d5fb      	bpl.n	8005e24 <_printf_i+0xb8>
 8005e2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	da03      	bge.n	8005e3c <_printf_i+0xd0>
 8005e34:	232d      	movs	r3, #45	@ 0x2d
 8005e36:	426d      	negs	r5, r5
 8005e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e3c:	4858      	ldr	r0, [pc, #352]	@ (8005fa0 <_printf_i+0x234>)
 8005e3e:	230a      	movs	r3, #10
 8005e40:	e011      	b.n	8005e66 <_printf_i+0xfa>
 8005e42:	6821      	ldr	r1, [r4, #0]
 8005e44:	6833      	ldr	r3, [r6, #0]
 8005e46:	0608      	lsls	r0, r1, #24
 8005e48:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e4c:	d402      	bmi.n	8005e54 <_printf_i+0xe8>
 8005e4e:	0649      	lsls	r1, r1, #25
 8005e50:	bf48      	it	mi
 8005e52:	b2ad      	uxthmi	r5, r5
 8005e54:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e56:	4852      	ldr	r0, [pc, #328]	@ (8005fa0 <_printf_i+0x234>)
 8005e58:	6033      	str	r3, [r6, #0]
 8005e5a:	bf14      	ite	ne
 8005e5c:	230a      	movne	r3, #10
 8005e5e:	2308      	moveq	r3, #8
 8005e60:	2100      	movs	r1, #0
 8005e62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e66:	6866      	ldr	r6, [r4, #4]
 8005e68:	60a6      	str	r6, [r4, #8]
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	db05      	blt.n	8005e7a <_printf_i+0x10e>
 8005e6e:	6821      	ldr	r1, [r4, #0]
 8005e70:	432e      	orrs	r6, r5
 8005e72:	f021 0104 	bic.w	r1, r1, #4
 8005e76:	6021      	str	r1, [r4, #0]
 8005e78:	d04b      	beq.n	8005f12 <_printf_i+0x1a6>
 8005e7a:	4616      	mov	r6, r2
 8005e7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e80:	fb03 5711 	mls	r7, r3, r1, r5
 8005e84:	5dc7      	ldrb	r7, [r0, r7]
 8005e86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e8a:	462f      	mov	r7, r5
 8005e8c:	42bb      	cmp	r3, r7
 8005e8e:	460d      	mov	r5, r1
 8005e90:	d9f4      	bls.n	8005e7c <_printf_i+0x110>
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d10b      	bne.n	8005eae <_printf_i+0x142>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	07df      	lsls	r7, r3, #31
 8005e9a:	d508      	bpl.n	8005eae <_printf_i+0x142>
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	6861      	ldr	r1, [r4, #4]
 8005ea0:	4299      	cmp	r1, r3
 8005ea2:	bfde      	ittt	le
 8005ea4:	2330      	movle	r3, #48	@ 0x30
 8005ea6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eae:	1b92      	subs	r2, r2, r6
 8005eb0:	6122      	str	r2, [r4, #16]
 8005eb2:	f8cd a000 	str.w	sl, [sp]
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	aa03      	add	r2, sp, #12
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	f7ff fee7 	bl	8005c90 <_printf_common>
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d14a      	bne.n	8005f5c <_printf_i+0x1f0>
 8005ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eca:	b004      	add	sp, #16
 8005ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	f043 0320 	orr.w	r3, r3, #32
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	4832      	ldr	r0, [pc, #200]	@ (8005fa4 <_printf_i+0x238>)
 8005eda:	2778      	movs	r7, #120	@ 0x78
 8005edc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	6831      	ldr	r1, [r6, #0]
 8005ee4:	061f      	lsls	r7, r3, #24
 8005ee6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005eea:	d402      	bmi.n	8005ef2 <_printf_i+0x186>
 8005eec:	065f      	lsls	r7, r3, #25
 8005eee:	bf48      	it	mi
 8005ef0:	b2ad      	uxthmi	r5, r5
 8005ef2:	6031      	str	r1, [r6, #0]
 8005ef4:	07d9      	lsls	r1, r3, #31
 8005ef6:	bf44      	itt	mi
 8005ef8:	f043 0320 	orrmi.w	r3, r3, #32
 8005efc:	6023      	strmi	r3, [r4, #0]
 8005efe:	b11d      	cbz	r5, 8005f08 <_printf_i+0x19c>
 8005f00:	2310      	movs	r3, #16
 8005f02:	e7ad      	b.n	8005e60 <_printf_i+0xf4>
 8005f04:	4826      	ldr	r0, [pc, #152]	@ (8005fa0 <_printf_i+0x234>)
 8005f06:	e7e9      	b.n	8005edc <_printf_i+0x170>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	f023 0320 	bic.w	r3, r3, #32
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	e7f6      	b.n	8005f00 <_printf_i+0x194>
 8005f12:	4616      	mov	r6, r2
 8005f14:	e7bd      	b.n	8005e92 <_printf_i+0x126>
 8005f16:	6833      	ldr	r3, [r6, #0]
 8005f18:	6825      	ldr	r5, [r4, #0]
 8005f1a:	6961      	ldr	r1, [r4, #20]
 8005f1c:	1d18      	adds	r0, r3, #4
 8005f1e:	6030      	str	r0, [r6, #0]
 8005f20:	062e      	lsls	r6, r5, #24
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	d501      	bpl.n	8005f2a <_printf_i+0x1be>
 8005f26:	6019      	str	r1, [r3, #0]
 8005f28:	e002      	b.n	8005f30 <_printf_i+0x1c4>
 8005f2a:	0668      	lsls	r0, r5, #25
 8005f2c:	d5fb      	bpl.n	8005f26 <_printf_i+0x1ba>
 8005f2e:	8019      	strh	r1, [r3, #0]
 8005f30:	2300      	movs	r3, #0
 8005f32:	6123      	str	r3, [r4, #16]
 8005f34:	4616      	mov	r6, r2
 8005f36:	e7bc      	b.n	8005eb2 <_printf_i+0x146>
 8005f38:	6833      	ldr	r3, [r6, #0]
 8005f3a:	1d1a      	adds	r2, r3, #4
 8005f3c:	6032      	str	r2, [r6, #0]
 8005f3e:	681e      	ldr	r6, [r3, #0]
 8005f40:	6862      	ldr	r2, [r4, #4]
 8005f42:	2100      	movs	r1, #0
 8005f44:	4630      	mov	r0, r6
 8005f46:	f7fa f943 	bl	80001d0 <memchr>
 8005f4a:	b108      	cbz	r0, 8005f50 <_printf_i+0x1e4>
 8005f4c:	1b80      	subs	r0, r0, r6
 8005f4e:	6060      	str	r0, [r4, #4]
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	2300      	movs	r3, #0
 8005f56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f5a:	e7aa      	b.n	8005eb2 <_printf_i+0x146>
 8005f5c:	6923      	ldr	r3, [r4, #16]
 8005f5e:	4632      	mov	r2, r6
 8005f60:	4649      	mov	r1, r9
 8005f62:	4640      	mov	r0, r8
 8005f64:	47d0      	blx	sl
 8005f66:	3001      	adds	r0, #1
 8005f68:	d0ad      	beq.n	8005ec6 <_printf_i+0x15a>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	079b      	lsls	r3, r3, #30
 8005f6e:	d413      	bmi.n	8005f98 <_printf_i+0x22c>
 8005f70:	68e0      	ldr	r0, [r4, #12]
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	4298      	cmp	r0, r3
 8005f76:	bfb8      	it	lt
 8005f78:	4618      	movlt	r0, r3
 8005f7a:	e7a6      	b.n	8005eca <_printf_i+0x15e>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4632      	mov	r2, r6
 8005f80:	4649      	mov	r1, r9
 8005f82:	4640      	mov	r0, r8
 8005f84:	47d0      	blx	sl
 8005f86:	3001      	adds	r0, #1
 8005f88:	d09d      	beq.n	8005ec6 <_printf_i+0x15a>
 8005f8a:	3501      	adds	r5, #1
 8005f8c:	68e3      	ldr	r3, [r4, #12]
 8005f8e:	9903      	ldr	r1, [sp, #12]
 8005f90:	1a5b      	subs	r3, r3, r1
 8005f92:	42ab      	cmp	r3, r5
 8005f94:	dcf2      	bgt.n	8005f7c <_printf_i+0x210>
 8005f96:	e7eb      	b.n	8005f70 <_printf_i+0x204>
 8005f98:	2500      	movs	r5, #0
 8005f9a:	f104 0619 	add.w	r6, r4, #25
 8005f9e:	e7f5      	b.n	8005f8c <_printf_i+0x220>
 8005fa0:	0800a256 	.word	0x0800a256
 8005fa4:	0800a267 	.word	0x0800a267

08005fa8 <_scanf_float>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	b087      	sub	sp, #28
 8005fae:	4691      	mov	r9, r2
 8005fb0:	9303      	str	r3, [sp, #12]
 8005fb2:	688b      	ldr	r3, [r1, #8]
 8005fb4:	1e5a      	subs	r2, r3, #1
 8005fb6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005fba:	bf81      	itttt	hi
 8005fbc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005fc0:	eb03 0b05 	addhi.w	fp, r3, r5
 8005fc4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005fc8:	608b      	strhi	r3, [r1, #8]
 8005fca:	680b      	ldr	r3, [r1, #0]
 8005fcc:	460a      	mov	r2, r1
 8005fce:	f04f 0500 	mov.w	r5, #0
 8005fd2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005fd6:	f842 3b1c 	str.w	r3, [r2], #28
 8005fda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005fde:	4680      	mov	r8, r0
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	bf98      	it	ls
 8005fe4:	f04f 0b00 	movls.w	fp, #0
 8005fe8:	9201      	str	r2, [sp, #4]
 8005fea:	4616      	mov	r6, r2
 8005fec:	46aa      	mov	sl, r5
 8005fee:	462f      	mov	r7, r5
 8005ff0:	9502      	str	r5, [sp, #8]
 8005ff2:	68a2      	ldr	r2, [r4, #8]
 8005ff4:	b15a      	cbz	r2, 800600e <_scanf_float+0x66>
 8005ff6:	f8d9 3000 	ldr.w	r3, [r9]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b4e      	cmp	r3, #78	@ 0x4e
 8005ffe:	d863      	bhi.n	80060c8 <_scanf_float+0x120>
 8006000:	2b40      	cmp	r3, #64	@ 0x40
 8006002:	d83b      	bhi.n	800607c <_scanf_float+0xd4>
 8006004:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006008:	b2c8      	uxtb	r0, r1
 800600a:	280e      	cmp	r0, #14
 800600c:	d939      	bls.n	8006082 <_scanf_float+0xda>
 800600e:	b11f      	cbz	r7, 8006018 <_scanf_float+0x70>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	f10a 3aff 	add.w	sl, sl, #4294967295
 800601c:	f1ba 0f01 	cmp.w	sl, #1
 8006020:	f200 8114 	bhi.w	800624c <_scanf_float+0x2a4>
 8006024:	9b01      	ldr	r3, [sp, #4]
 8006026:	429e      	cmp	r6, r3
 8006028:	f200 8105 	bhi.w	8006236 <_scanf_float+0x28e>
 800602c:	2001      	movs	r0, #1
 800602e:	b007      	add	sp, #28
 8006030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006034:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006038:	2a0d      	cmp	r2, #13
 800603a:	d8e8      	bhi.n	800600e <_scanf_float+0x66>
 800603c:	a101      	add	r1, pc, #4	@ (adr r1, 8006044 <_scanf_float+0x9c>)
 800603e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006042:	bf00      	nop
 8006044:	0800618d 	.word	0x0800618d
 8006048:	0800600f 	.word	0x0800600f
 800604c:	0800600f 	.word	0x0800600f
 8006050:	0800600f 	.word	0x0800600f
 8006054:	080061e9 	.word	0x080061e9
 8006058:	080061c3 	.word	0x080061c3
 800605c:	0800600f 	.word	0x0800600f
 8006060:	0800600f 	.word	0x0800600f
 8006064:	0800619b 	.word	0x0800619b
 8006068:	0800600f 	.word	0x0800600f
 800606c:	0800600f 	.word	0x0800600f
 8006070:	0800600f 	.word	0x0800600f
 8006074:	0800600f 	.word	0x0800600f
 8006078:	08006157 	.word	0x08006157
 800607c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006080:	e7da      	b.n	8006038 <_scanf_float+0x90>
 8006082:	290e      	cmp	r1, #14
 8006084:	d8c3      	bhi.n	800600e <_scanf_float+0x66>
 8006086:	a001      	add	r0, pc, #4	@ (adr r0, 800608c <_scanf_float+0xe4>)
 8006088:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800608c:	08006147 	.word	0x08006147
 8006090:	0800600f 	.word	0x0800600f
 8006094:	08006147 	.word	0x08006147
 8006098:	080061d7 	.word	0x080061d7
 800609c:	0800600f 	.word	0x0800600f
 80060a0:	080060e9 	.word	0x080060e9
 80060a4:	0800612d 	.word	0x0800612d
 80060a8:	0800612d 	.word	0x0800612d
 80060ac:	0800612d 	.word	0x0800612d
 80060b0:	0800612d 	.word	0x0800612d
 80060b4:	0800612d 	.word	0x0800612d
 80060b8:	0800612d 	.word	0x0800612d
 80060bc:	0800612d 	.word	0x0800612d
 80060c0:	0800612d 	.word	0x0800612d
 80060c4:	0800612d 	.word	0x0800612d
 80060c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80060ca:	d809      	bhi.n	80060e0 <_scanf_float+0x138>
 80060cc:	2b60      	cmp	r3, #96	@ 0x60
 80060ce:	d8b1      	bhi.n	8006034 <_scanf_float+0x8c>
 80060d0:	2b54      	cmp	r3, #84	@ 0x54
 80060d2:	d07b      	beq.n	80061cc <_scanf_float+0x224>
 80060d4:	2b59      	cmp	r3, #89	@ 0x59
 80060d6:	d19a      	bne.n	800600e <_scanf_float+0x66>
 80060d8:	2d07      	cmp	r5, #7
 80060da:	d198      	bne.n	800600e <_scanf_float+0x66>
 80060dc:	2508      	movs	r5, #8
 80060de:	e02f      	b.n	8006140 <_scanf_float+0x198>
 80060e0:	2b74      	cmp	r3, #116	@ 0x74
 80060e2:	d073      	beq.n	80061cc <_scanf_float+0x224>
 80060e4:	2b79      	cmp	r3, #121	@ 0x79
 80060e6:	e7f6      	b.n	80060d6 <_scanf_float+0x12e>
 80060e8:	6821      	ldr	r1, [r4, #0]
 80060ea:	05c8      	lsls	r0, r1, #23
 80060ec:	d51e      	bpl.n	800612c <_scanf_float+0x184>
 80060ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80060f2:	6021      	str	r1, [r4, #0]
 80060f4:	3701      	adds	r7, #1
 80060f6:	f1bb 0f00 	cmp.w	fp, #0
 80060fa:	d003      	beq.n	8006104 <_scanf_float+0x15c>
 80060fc:	3201      	adds	r2, #1
 80060fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006102:	60a2      	str	r2, [r4, #8]
 8006104:	68a3      	ldr	r3, [r4, #8]
 8006106:	3b01      	subs	r3, #1
 8006108:	60a3      	str	r3, [r4, #8]
 800610a:	6923      	ldr	r3, [r4, #16]
 800610c:	3301      	adds	r3, #1
 800610e:	6123      	str	r3, [r4, #16]
 8006110:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006114:	3b01      	subs	r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	f8c9 3004 	str.w	r3, [r9, #4]
 800611c:	f340 8082 	ble.w	8006224 <_scanf_float+0x27c>
 8006120:	f8d9 3000 	ldr.w	r3, [r9]
 8006124:	3301      	adds	r3, #1
 8006126:	f8c9 3000 	str.w	r3, [r9]
 800612a:	e762      	b.n	8005ff2 <_scanf_float+0x4a>
 800612c:	eb1a 0105 	adds.w	r1, sl, r5
 8006130:	f47f af6d 	bne.w	800600e <_scanf_float+0x66>
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800613a:	6022      	str	r2, [r4, #0]
 800613c:	460d      	mov	r5, r1
 800613e:	468a      	mov	sl, r1
 8006140:	f806 3b01 	strb.w	r3, [r6], #1
 8006144:	e7de      	b.n	8006104 <_scanf_float+0x15c>
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	0610      	lsls	r0, r2, #24
 800614a:	f57f af60 	bpl.w	800600e <_scanf_float+0x66>
 800614e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006152:	6022      	str	r2, [r4, #0]
 8006154:	e7f4      	b.n	8006140 <_scanf_float+0x198>
 8006156:	f1ba 0f00 	cmp.w	sl, #0
 800615a:	d10c      	bne.n	8006176 <_scanf_float+0x1ce>
 800615c:	b977      	cbnz	r7, 800617c <_scanf_float+0x1d4>
 800615e:	6822      	ldr	r2, [r4, #0]
 8006160:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006164:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006168:	d108      	bne.n	800617c <_scanf_float+0x1d4>
 800616a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800616e:	6022      	str	r2, [r4, #0]
 8006170:	f04f 0a01 	mov.w	sl, #1
 8006174:	e7e4      	b.n	8006140 <_scanf_float+0x198>
 8006176:	f1ba 0f02 	cmp.w	sl, #2
 800617a:	d050      	beq.n	800621e <_scanf_float+0x276>
 800617c:	2d01      	cmp	r5, #1
 800617e:	d002      	beq.n	8006186 <_scanf_float+0x1de>
 8006180:	2d04      	cmp	r5, #4
 8006182:	f47f af44 	bne.w	800600e <_scanf_float+0x66>
 8006186:	3501      	adds	r5, #1
 8006188:	b2ed      	uxtb	r5, r5
 800618a:	e7d9      	b.n	8006140 <_scanf_float+0x198>
 800618c:	f1ba 0f01 	cmp.w	sl, #1
 8006190:	f47f af3d 	bne.w	800600e <_scanf_float+0x66>
 8006194:	f04f 0a02 	mov.w	sl, #2
 8006198:	e7d2      	b.n	8006140 <_scanf_float+0x198>
 800619a:	b975      	cbnz	r5, 80061ba <_scanf_float+0x212>
 800619c:	2f00      	cmp	r7, #0
 800619e:	f47f af37 	bne.w	8006010 <_scanf_float+0x68>
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80061a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80061ac:	f040 8103 	bne.w	80063b6 <_scanf_float+0x40e>
 80061b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061b4:	6022      	str	r2, [r4, #0]
 80061b6:	2501      	movs	r5, #1
 80061b8:	e7c2      	b.n	8006140 <_scanf_float+0x198>
 80061ba:	2d03      	cmp	r5, #3
 80061bc:	d0e3      	beq.n	8006186 <_scanf_float+0x1de>
 80061be:	2d05      	cmp	r5, #5
 80061c0:	e7df      	b.n	8006182 <_scanf_float+0x1da>
 80061c2:	2d02      	cmp	r5, #2
 80061c4:	f47f af23 	bne.w	800600e <_scanf_float+0x66>
 80061c8:	2503      	movs	r5, #3
 80061ca:	e7b9      	b.n	8006140 <_scanf_float+0x198>
 80061cc:	2d06      	cmp	r5, #6
 80061ce:	f47f af1e 	bne.w	800600e <_scanf_float+0x66>
 80061d2:	2507      	movs	r5, #7
 80061d4:	e7b4      	b.n	8006140 <_scanf_float+0x198>
 80061d6:	6822      	ldr	r2, [r4, #0]
 80061d8:	0591      	lsls	r1, r2, #22
 80061da:	f57f af18 	bpl.w	800600e <_scanf_float+0x66>
 80061de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80061e2:	6022      	str	r2, [r4, #0]
 80061e4:	9702      	str	r7, [sp, #8]
 80061e6:	e7ab      	b.n	8006140 <_scanf_float+0x198>
 80061e8:	6822      	ldr	r2, [r4, #0]
 80061ea:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80061ee:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80061f2:	d005      	beq.n	8006200 <_scanf_float+0x258>
 80061f4:	0550      	lsls	r0, r2, #21
 80061f6:	f57f af0a 	bpl.w	800600e <_scanf_float+0x66>
 80061fa:	2f00      	cmp	r7, #0
 80061fc:	f000 80db 	beq.w	80063b6 <_scanf_float+0x40e>
 8006200:	0591      	lsls	r1, r2, #22
 8006202:	bf58      	it	pl
 8006204:	9902      	ldrpl	r1, [sp, #8]
 8006206:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800620a:	bf58      	it	pl
 800620c:	1a79      	subpl	r1, r7, r1
 800620e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006212:	bf58      	it	pl
 8006214:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006218:	6022      	str	r2, [r4, #0]
 800621a:	2700      	movs	r7, #0
 800621c:	e790      	b.n	8006140 <_scanf_float+0x198>
 800621e:	f04f 0a03 	mov.w	sl, #3
 8006222:	e78d      	b.n	8006140 <_scanf_float+0x198>
 8006224:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006228:	4649      	mov	r1, r9
 800622a:	4640      	mov	r0, r8
 800622c:	4798      	blx	r3
 800622e:	2800      	cmp	r0, #0
 8006230:	f43f aedf 	beq.w	8005ff2 <_scanf_float+0x4a>
 8006234:	e6eb      	b.n	800600e <_scanf_float+0x66>
 8006236:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800623a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800623e:	464a      	mov	r2, r9
 8006240:	4640      	mov	r0, r8
 8006242:	4798      	blx	r3
 8006244:	6923      	ldr	r3, [r4, #16]
 8006246:	3b01      	subs	r3, #1
 8006248:	6123      	str	r3, [r4, #16]
 800624a:	e6eb      	b.n	8006024 <_scanf_float+0x7c>
 800624c:	1e6b      	subs	r3, r5, #1
 800624e:	2b06      	cmp	r3, #6
 8006250:	d824      	bhi.n	800629c <_scanf_float+0x2f4>
 8006252:	2d02      	cmp	r5, #2
 8006254:	d836      	bhi.n	80062c4 <_scanf_float+0x31c>
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	429e      	cmp	r6, r3
 800625a:	f67f aee7 	bls.w	800602c <_scanf_float+0x84>
 800625e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006262:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006266:	464a      	mov	r2, r9
 8006268:	4640      	mov	r0, r8
 800626a:	4798      	blx	r3
 800626c:	6923      	ldr	r3, [r4, #16]
 800626e:	3b01      	subs	r3, #1
 8006270:	6123      	str	r3, [r4, #16]
 8006272:	e7f0      	b.n	8006256 <_scanf_float+0x2ae>
 8006274:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006278:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800627c:	464a      	mov	r2, r9
 800627e:	4640      	mov	r0, r8
 8006280:	4798      	blx	r3
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	3b01      	subs	r3, #1
 8006286:	6123      	str	r3, [r4, #16]
 8006288:	f10a 3aff 	add.w	sl, sl, #4294967295
 800628c:	fa5f fa8a 	uxtb.w	sl, sl
 8006290:	f1ba 0f02 	cmp.w	sl, #2
 8006294:	d1ee      	bne.n	8006274 <_scanf_float+0x2cc>
 8006296:	3d03      	subs	r5, #3
 8006298:	b2ed      	uxtb	r5, r5
 800629a:	1b76      	subs	r6, r6, r5
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	05da      	lsls	r2, r3, #23
 80062a0:	d530      	bpl.n	8006304 <_scanf_float+0x35c>
 80062a2:	055b      	lsls	r3, r3, #21
 80062a4:	d511      	bpl.n	80062ca <_scanf_float+0x322>
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	429e      	cmp	r6, r3
 80062aa:	f67f aebf 	bls.w	800602c <_scanf_float+0x84>
 80062ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062b6:	464a      	mov	r2, r9
 80062b8:	4640      	mov	r0, r8
 80062ba:	4798      	blx	r3
 80062bc:	6923      	ldr	r3, [r4, #16]
 80062be:	3b01      	subs	r3, #1
 80062c0:	6123      	str	r3, [r4, #16]
 80062c2:	e7f0      	b.n	80062a6 <_scanf_float+0x2fe>
 80062c4:	46aa      	mov	sl, r5
 80062c6:	46b3      	mov	fp, r6
 80062c8:	e7de      	b.n	8006288 <_scanf_float+0x2e0>
 80062ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80062ce:	6923      	ldr	r3, [r4, #16]
 80062d0:	2965      	cmp	r1, #101	@ 0x65
 80062d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80062d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80062da:	6123      	str	r3, [r4, #16]
 80062dc:	d00c      	beq.n	80062f8 <_scanf_float+0x350>
 80062de:	2945      	cmp	r1, #69	@ 0x45
 80062e0:	d00a      	beq.n	80062f8 <_scanf_float+0x350>
 80062e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062e6:	464a      	mov	r2, r9
 80062e8:	4640      	mov	r0, r8
 80062ea:	4798      	blx	r3
 80062ec:	6923      	ldr	r3, [r4, #16]
 80062ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	1eb5      	subs	r5, r6, #2
 80062f6:	6123      	str	r3, [r4, #16]
 80062f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062fc:	464a      	mov	r2, r9
 80062fe:	4640      	mov	r0, r8
 8006300:	4798      	blx	r3
 8006302:	462e      	mov	r6, r5
 8006304:	6822      	ldr	r2, [r4, #0]
 8006306:	f012 0210 	ands.w	r2, r2, #16
 800630a:	d001      	beq.n	8006310 <_scanf_float+0x368>
 800630c:	2000      	movs	r0, #0
 800630e:	e68e      	b.n	800602e <_scanf_float+0x86>
 8006310:	7032      	strb	r2, [r6, #0]
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800631c:	d125      	bne.n	800636a <_scanf_float+0x3c2>
 800631e:	9b02      	ldr	r3, [sp, #8]
 8006320:	429f      	cmp	r7, r3
 8006322:	d00a      	beq.n	800633a <_scanf_float+0x392>
 8006324:	1bda      	subs	r2, r3, r7
 8006326:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800632a:	429e      	cmp	r6, r3
 800632c:	bf28      	it	cs
 800632e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006332:	4922      	ldr	r1, [pc, #136]	@ (80063bc <_scanf_float+0x414>)
 8006334:	4630      	mov	r0, r6
 8006336:	f000 f907 	bl	8006548 <siprintf>
 800633a:	9901      	ldr	r1, [sp, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	4640      	mov	r0, r8
 8006340:	f002 fbf2 	bl	8008b28 <_strtod_r>
 8006344:	9b03      	ldr	r3, [sp, #12]
 8006346:	6821      	ldr	r1, [r4, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f011 0f02 	tst.w	r1, #2
 800634e:	ec57 6b10 	vmov	r6, r7, d0
 8006352:	f103 0204 	add.w	r2, r3, #4
 8006356:	d015      	beq.n	8006384 <_scanf_float+0x3dc>
 8006358:	9903      	ldr	r1, [sp, #12]
 800635a:	600a      	str	r2, [r1, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	e9c3 6700 	strd	r6, r7, [r3]
 8006362:	68e3      	ldr	r3, [r4, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60e3      	str	r3, [r4, #12]
 8006368:	e7d0      	b.n	800630c <_scanf_float+0x364>
 800636a:	9b04      	ldr	r3, [sp, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0e4      	beq.n	800633a <_scanf_float+0x392>
 8006370:	9905      	ldr	r1, [sp, #20]
 8006372:	230a      	movs	r3, #10
 8006374:	3101      	adds	r1, #1
 8006376:	4640      	mov	r0, r8
 8006378:	f002 fc56 	bl	8008c28 <_strtol_r>
 800637c:	9b04      	ldr	r3, [sp, #16]
 800637e:	9e05      	ldr	r6, [sp, #20]
 8006380:	1ac2      	subs	r2, r0, r3
 8006382:	e7d0      	b.n	8006326 <_scanf_float+0x37e>
 8006384:	f011 0f04 	tst.w	r1, #4
 8006388:	9903      	ldr	r1, [sp, #12]
 800638a:	600a      	str	r2, [r1, #0]
 800638c:	d1e6      	bne.n	800635c <_scanf_float+0x3b4>
 800638e:	681d      	ldr	r5, [r3, #0]
 8006390:	4632      	mov	r2, r6
 8006392:	463b      	mov	r3, r7
 8006394:	4630      	mov	r0, r6
 8006396:	4639      	mov	r1, r7
 8006398:	f7fa fbc8 	bl	8000b2c <__aeabi_dcmpun>
 800639c:	b128      	cbz	r0, 80063aa <_scanf_float+0x402>
 800639e:	4808      	ldr	r0, [pc, #32]	@ (80063c0 <_scanf_float+0x418>)
 80063a0:	f000 f9b8 	bl	8006714 <nanf>
 80063a4:	ed85 0a00 	vstr	s0, [r5]
 80063a8:	e7db      	b.n	8006362 <_scanf_float+0x3ba>
 80063aa:	4630      	mov	r0, r6
 80063ac:	4639      	mov	r1, r7
 80063ae:	f7fa fc1b 	bl	8000be8 <__aeabi_d2f>
 80063b2:	6028      	str	r0, [r5, #0]
 80063b4:	e7d5      	b.n	8006362 <_scanf_float+0x3ba>
 80063b6:	2700      	movs	r7, #0
 80063b8:	e62e      	b.n	8006018 <_scanf_float+0x70>
 80063ba:	bf00      	nop
 80063bc:	0800a278 	.word	0x0800a278
 80063c0:	0800a3b9 	.word	0x0800a3b9

080063c4 <std>:
 80063c4:	2300      	movs	r3, #0
 80063c6:	b510      	push	{r4, lr}
 80063c8:	4604      	mov	r4, r0
 80063ca:	e9c0 3300 	strd	r3, r3, [r0]
 80063ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063d2:	6083      	str	r3, [r0, #8]
 80063d4:	8181      	strh	r1, [r0, #12]
 80063d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80063d8:	81c2      	strh	r2, [r0, #14]
 80063da:	6183      	str	r3, [r0, #24]
 80063dc:	4619      	mov	r1, r3
 80063de:	2208      	movs	r2, #8
 80063e0:	305c      	adds	r0, #92	@ 0x5c
 80063e2:	f000 f916 	bl	8006612 <memset>
 80063e6:	4b0d      	ldr	r3, [pc, #52]	@ (800641c <std+0x58>)
 80063e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80063ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <std+0x5c>)
 80063ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <std+0x60>)
 80063f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006428 <std+0x64>)
 80063f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80063f6:	4b0d      	ldr	r3, [pc, #52]	@ (800642c <std+0x68>)
 80063f8:	6224      	str	r4, [r4, #32]
 80063fa:	429c      	cmp	r4, r3
 80063fc:	d006      	beq.n	800640c <std+0x48>
 80063fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006402:	4294      	cmp	r4, r2
 8006404:	d002      	beq.n	800640c <std+0x48>
 8006406:	33d0      	adds	r3, #208	@ 0xd0
 8006408:	429c      	cmp	r4, r3
 800640a:	d105      	bne.n	8006418 <std+0x54>
 800640c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006414:	f000 b97a 	b.w	800670c <__retarget_lock_init_recursive>
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	0800658d 	.word	0x0800658d
 8006420:	080065af 	.word	0x080065af
 8006424:	080065e7 	.word	0x080065e7
 8006428:	0800660b 	.word	0x0800660b
 800642c:	200003b8 	.word	0x200003b8

08006430 <stdio_exit_handler>:
 8006430:	4a02      	ldr	r2, [pc, #8]	@ (800643c <stdio_exit_handler+0xc>)
 8006432:	4903      	ldr	r1, [pc, #12]	@ (8006440 <stdio_exit_handler+0x10>)
 8006434:	4803      	ldr	r0, [pc, #12]	@ (8006444 <stdio_exit_handler+0x14>)
 8006436:	f000 b869 	b.w	800650c <_fwalk_sglue>
 800643a:	bf00      	nop
 800643c:	20000024 	.word	0x20000024
 8006440:	08008fe5 	.word	0x08008fe5
 8006444:	20000034 	.word	0x20000034

08006448 <cleanup_stdio>:
 8006448:	6841      	ldr	r1, [r0, #4]
 800644a:	4b0c      	ldr	r3, [pc, #48]	@ (800647c <cleanup_stdio+0x34>)
 800644c:	4299      	cmp	r1, r3
 800644e:	b510      	push	{r4, lr}
 8006450:	4604      	mov	r4, r0
 8006452:	d001      	beq.n	8006458 <cleanup_stdio+0x10>
 8006454:	f002 fdc6 	bl	8008fe4 <_fflush_r>
 8006458:	68a1      	ldr	r1, [r4, #8]
 800645a:	4b09      	ldr	r3, [pc, #36]	@ (8006480 <cleanup_stdio+0x38>)
 800645c:	4299      	cmp	r1, r3
 800645e:	d002      	beq.n	8006466 <cleanup_stdio+0x1e>
 8006460:	4620      	mov	r0, r4
 8006462:	f002 fdbf 	bl	8008fe4 <_fflush_r>
 8006466:	68e1      	ldr	r1, [r4, #12]
 8006468:	4b06      	ldr	r3, [pc, #24]	@ (8006484 <cleanup_stdio+0x3c>)
 800646a:	4299      	cmp	r1, r3
 800646c:	d004      	beq.n	8006478 <cleanup_stdio+0x30>
 800646e:	4620      	mov	r0, r4
 8006470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006474:	f002 bdb6 	b.w	8008fe4 <_fflush_r>
 8006478:	bd10      	pop	{r4, pc}
 800647a:	bf00      	nop
 800647c:	200003b8 	.word	0x200003b8
 8006480:	20000420 	.word	0x20000420
 8006484:	20000488 	.word	0x20000488

08006488 <global_stdio_init.part.0>:
 8006488:	b510      	push	{r4, lr}
 800648a:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <global_stdio_init.part.0+0x30>)
 800648c:	4c0b      	ldr	r4, [pc, #44]	@ (80064bc <global_stdio_init.part.0+0x34>)
 800648e:	4a0c      	ldr	r2, [pc, #48]	@ (80064c0 <global_stdio_init.part.0+0x38>)
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	4620      	mov	r0, r4
 8006494:	2200      	movs	r2, #0
 8006496:	2104      	movs	r1, #4
 8006498:	f7ff ff94 	bl	80063c4 <std>
 800649c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064a0:	2201      	movs	r2, #1
 80064a2:	2109      	movs	r1, #9
 80064a4:	f7ff ff8e 	bl	80063c4 <std>
 80064a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064ac:	2202      	movs	r2, #2
 80064ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b2:	2112      	movs	r1, #18
 80064b4:	f7ff bf86 	b.w	80063c4 <std>
 80064b8:	200004f0 	.word	0x200004f0
 80064bc:	200003b8 	.word	0x200003b8
 80064c0:	08006431 	.word	0x08006431

080064c4 <__sfp_lock_acquire>:
 80064c4:	4801      	ldr	r0, [pc, #4]	@ (80064cc <__sfp_lock_acquire+0x8>)
 80064c6:	f000 b922 	b.w	800670e <__retarget_lock_acquire_recursive>
 80064ca:	bf00      	nop
 80064cc:	200004f9 	.word	0x200004f9

080064d0 <__sfp_lock_release>:
 80064d0:	4801      	ldr	r0, [pc, #4]	@ (80064d8 <__sfp_lock_release+0x8>)
 80064d2:	f000 b91d 	b.w	8006710 <__retarget_lock_release_recursive>
 80064d6:	bf00      	nop
 80064d8:	200004f9 	.word	0x200004f9

080064dc <__sinit>:
 80064dc:	b510      	push	{r4, lr}
 80064de:	4604      	mov	r4, r0
 80064e0:	f7ff fff0 	bl	80064c4 <__sfp_lock_acquire>
 80064e4:	6a23      	ldr	r3, [r4, #32]
 80064e6:	b11b      	cbz	r3, 80064f0 <__sinit+0x14>
 80064e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ec:	f7ff bff0 	b.w	80064d0 <__sfp_lock_release>
 80064f0:	4b04      	ldr	r3, [pc, #16]	@ (8006504 <__sinit+0x28>)
 80064f2:	6223      	str	r3, [r4, #32]
 80064f4:	4b04      	ldr	r3, [pc, #16]	@ (8006508 <__sinit+0x2c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1f5      	bne.n	80064e8 <__sinit+0xc>
 80064fc:	f7ff ffc4 	bl	8006488 <global_stdio_init.part.0>
 8006500:	e7f2      	b.n	80064e8 <__sinit+0xc>
 8006502:	bf00      	nop
 8006504:	08006449 	.word	0x08006449
 8006508:	200004f0 	.word	0x200004f0

0800650c <_fwalk_sglue>:
 800650c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006510:	4607      	mov	r7, r0
 8006512:	4688      	mov	r8, r1
 8006514:	4614      	mov	r4, r2
 8006516:	2600      	movs	r6, #0
 8006518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800651c:	f1b9 0901 	subs.w	r9, r9, #1
 8006520:	d505      	bpl.n	800652e <_fwalk_sglue+0x22>
 8006522:	6824      	ldr	r4, [r4, #0]
 8006524:	2c00      	cmp	r4, #0
 8006526:	d1f7      	bne.n	8006518 <_fwalk_sglue+0xc>
 8006528:	4630      	mov	r0, r6
 800652a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800652e:	89ab      	ldrh	r3, [r5, #12]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d907      	bls.n	8006544 <_fwalk_sglue+0x38>
 8006534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006538:	3301      	adds	r3, #1
 800653a:	d003      	beq.n	8006544 <_fwalk_sglue+0x38>
 800653c:	4629      	mov	r1, r5
 800653e:	4638      	mov	r0, r7
 8006540:	47c0      	blx	r8
 8006542:	4306      	orrs	r6, r0
 8006544:	3568      	adds	r5, #104	@ 0x68
 8006546:	e7e9      	b.n	800651c <_fwalk_sglue+0x10>

08006548 <siprintf>:
 8006548:	b40e      	push	{r1, r2, r3}
 800654a:	b510      	push	{r4, lr}
 800654c:	b09d      	sub	sp, #116	@ 0x74
 800654e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006550:	9002      	str	r0, [sp, #8]
 8006552:	9006      	str	r0, [sp, #24]
 8006554:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006558:	480a      	ldr	r0, [pc, #40]	@ (8006584 <siprintf+0x3c>)
 800655a:	9107      	str	r1, [sp, #28]
 800655c:	9104      	str	r1, [sp, #16]
 800655e:	490a      	ldr	r1, [pc, #40]	@ (8006588 <siprintf+0x40>)
 8006560:	f853 2b04 	ldr.w	r2, [r3], #4
 8006564:	9105      	str	r1, [sp, #20]
 8006566:	2400      	movs	r4, #0
 8006568:	a902      	add	r1, sp, #8
 800656a:	6800      	ldr	r0, [r0, #0]
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006570:	f002 fbb8 	bl	8008ce4 <_svfiprintf_r>
 8006574:	9b02      	ldr	r3, [sp, #8]
 8006576:	701c      	strb	r4, [r3, #0]
 8006578:	b01d      	add	sp, #116	@ 0x74
 800657a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800657e:	b003      	add	sp, #12
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000030 	.word	0x20000030
 8006588:	ffff0208 	.word	0xffff0208

0800658c <__sread>:
 800658c:	b510      	push	{r4, lr}
 800658e:	460c      	mov	r4, r1
 8006590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006594:	f000 f86c 	bl	8006670 <_read_r>
 8006598:	2800      	cmp	r0, #0
 800659a:	bfab      	itete	ge
 800659c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800659e:	89a3      	ldrhlt	r3, [r4, #12]
 80065a0:	181b      	addge	r3, r3, r0
 80065a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065a6:	bfac      	ite	ge
 80065a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065aa:	81a3      	strhlt	r3, [r4, #12]
 80065ac:	bd10      	pop	{r4, pc}

080065ae <__swrite>:
 80065ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b2:	461f      	mov	r7, r3
 80065b4:	898b      	ldrh	r3, [r1, #12]
 80065b6:	05db      	lsls	r3, r3, #23
 80065b8:	4605      	mov	r5, r0
 80065ba:	460c      	mov	r4, r1
 80065bc:	4616      	mov	r6, r2
 80065be:	d505      	bpl.n	80065cc <__swrite+0x1e>
 80065c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c4:	2302      	movs	r3, #2
 80065c6:	2200      	movs	r2, #0
 80065c8:	f000 f840 	bl	800664c <_lseek_r>
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065d6:	81a3      	strh	r3, [r4, #12]
 80065d8:	4632      	mov	r2, r6
 80065da:	463b      	mov	r3, r7
 80065dc:	4628      	mov	r0, r5
 80065de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065e2:	f000 b857 	b.w	8006694 <_write_r>

080065e6 <__sseek>:
 80065e6:	b510      	push	{r4, lr}
 80065e8:	460c      	mov	r4, r1
 80065ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ee:	f000 f82d 	bl	800664c <_lseek_r>
 80065f2:	1c43      	adds	r3, r0, #1
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	bf15      	itete	ne
 80065f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80065fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80065fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006602:	81a3      	strheq	r3, [r4, #12]
 8006604:	bf18      	it	ne
 8006606:	81a3      	strhne	r3, [r4, #12]
 8006608:	bd10      	pop	{r4, pc}

0800660a <__sclose>:
 800660a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660e:	f000 b80d 	b.w	800662c <_close_r>

08006612 <memset>:
 8006612:	4402      	add	r2, r0
 8006614:	4603      	mov	r3, r0
 8006616:	4293      	cmp	r3, r2
 8006618:	d100      	bne.n	800661c <memset+0xa>
 800661a:	4770      	bx	lr
 800661c:	f803 1b01 	strb.w	r1, [r3], #1
 8006620:	e7f9      	b.n	8006616 <memset+0x4>
	...

08006624 <_localeconv_r>:
 8006624:	4800      	ldr	r0, [pc, #0]	@ (8006628 <_localeconv_r+0x4>)
 8006626:	4770      	bx	lr
 8006628:	20000170 	.word	0x20000170

0800662c <_close_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4d06      	ldr	r5, [pc, #24]	@ (8006648 <_close_r+0x1c>)
 8006630:	2300      	movs	r3, #0
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	602b      	str	r3, [r5, #0]
 8006638:	f7fb f9b7 	bl	80019aa <_close>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_close_r+0x1a>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_close_r+0x1a>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	200004f4 	.word	0x200004f4

0800664c <_lseek_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	@ (800666c <_lseek_r+0x20>)
 8006650:	4604      	mov	r4, r0
 8006652:	4608      	mov	r0, r1
 8006654:	4611      	mov	r1, r2
 8006656:	2200      	movs	r2, #0
 8006658:	602a      	str	r2, [r5, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f7fb f9cc 	bl	80019f8 <_lseek>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_lseek_r+0x1e>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_lseek_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	200004f4 	.word	0x200004f4

08006670 <_read_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d07      	ldr	r5, [pc, #28]	@ (8006690 <_read_r+0x20>)
 8006674:	4604      	mov	r4, r0
 8006676:	4608      	mov	r0, r1
 8006678:	4611      	mov	r1, r2
 800667a:	2200      	movs	r2, #0
 800667c:	602a      	str	r2, [r5, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	f7fb f95a 	bl	8001938 <_read>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_read_r+0x1e>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_read_r+0x1e>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	200004f4 	.word	0x200004f4

08006694 <_write_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4d07      	ldr	r5, [pc, #28]	@ (80066b4 <_write_r+0x20>)
 8006698:	4604      	mov	r4, r0
 800669a:	4608      	mov	r0, r1
 800669c:	4611      	mov	r1, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	602a      	str	r2, [r5, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f7fb f965 	bl	8001972 <_write>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_write_r+0x1e>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_write_r+0x1e>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	200004f4 	.word	0x200004f4

080066b8 <__errno>:
 80066b8:	4b01      	ldr	r3, [pc, #4]	@ (80066c0 <__errno+0x8>)
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000030 	.word	0x20000030

080066c4 <__libc_init_array>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	4d0d      	ldr	r5, [pc, #52]	@ (80066fc <__libc_init_array+0x38>)
 80066c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006700 <__libc_init_array+0x3c>)
 80066ca:	1b64      	subs	r4, r4, r5
 80066cc:	10a4      	asrs	r4, r4, #2
 80066ce:	2600      	movs	r6, #0
 80066d0:	42a6      	cmp	r6, r4
 80066d2:	d109      	bne.n	80066e8 <__libc_init_array+0x24>
 80066d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006704 <__libc_init_array+0x40>)
 80066d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006708 <__libc_init_array+0x44>)
 80066d8:	f003 fd6c 	bl	800a1b4 <_init>
 80066dc:	1b64      	subs	r4, r4, r5
 80066de:	10a4      	asrs	r4, r4, #2
 80066e0:	2600      	movs	r6, #0
 80066e2:	42a6      	cmp	r6, r4
 80066e4:	d105      	bne.n	80066f2 <__libc_init_array+0x2e>
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ec:	4798      	blx	r3
 80066ee:	3601      	adds	r6, #1
 80066f0:	e7ee      	b.n	80066d0 <__libc_init_array+0xc>
 80066f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f6:	4798      	blx	r3
 80066f8:	3601      	adds	r6, #1
 80066fa:	e7f2      	b.n	80066e2 <__libc_init_array+0x1e>
 80066fc:	0800a674 	.word	0x0800a674
 8006700:	0800a674 	.word	0x0800a674
 8006704:	0800a674 	.word	0x0800a674
 8006708:	0800a678 	.word	0x0800a678

0800670c <__retarget_lock_init_recursive>:
 800670c:	4770      	bx	lr

0800670e <__retarget_lock_acquire_recursive>:
 800670e:	4770      	bx	lr

08006710 <__retarget_lock_release_recursive>:
 8006710:	4770      	bx	lr
	...

08006714 <nanf>:
 8006714:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800671c <nanf+0x8>
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	7fc00000 	.word	0x7fc00000

08006720 <quorem>:
 8006720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	6903      	ldr	r3, [r0, #16]
 8006726:	690c      	ldr	r4, [r1, #16]
 8006728:	42a3      	cmp	r3, r4
 800672a:	4607      	mov	r7, r0
 800672c:	db7e      	blt.n	800682c <quorem+0x10c>
 800672e:	3c01      	subs	r4, #1
 8006730:	f101 0814 	add.w	r8, r1, #20
 8006734:	00a3      	lsls	r3, r4, #2
 8006736:	f100 0514 	add.w	r5, r0, #20
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800674a:	3301      	adds	r3, #1
 800674c:	429a      	cmp	r2, r3
 800674e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006752:	fbb2 f6f3 	udiv	r6, r2, r3
 8006756:	d32e      	bcc.n	80067b6 <quorem+0x96>
 8006758:	f04f 0a00 	mov.w	sl, #0
 800675c:	46c4      	mov	ip, r8
 800675e:	46ae      	mov	lr, r5
 8006760:	46d3      	mov	fp, sl
 8006762:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006766:	b298      	uxth	r0, r3
 8006768:	fb06 a000 	mla	r0, r6, r0, sl
 800676c:	0c02      	lsrs	r2, r0, #16
 800676e:	0c1b      	lsrs	r3, r3, #16
 8006770:	fb06 2303 	mla	r3, r6, r3, r2
 8006774:	f8de 2000 	ldr.w	r2, [lr]
 8006778:	b280      	uxth	r0, r0
 800677a:	b292      	uxth	r2, r2
 800677c:	1a12      	subs	r2, r2, r0
 800677e:	445a      	add	r2, fp
 8006780:	f8de 0000 	ldr.w	r0, [lr]
 8006784:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006788:	b29b      	uxth	r3, r3
 800678a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800678e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006792:	b292      	uxth	r2, r2
 8006794:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006798:	45e1      	cmp	r9, ip
 800679a:	f84e 2b04 	str.w	r2, [lr], #4
 800679e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80067a2:	d2de      	bcs.n	8006762 <quorem+0x42>
 80067a4:	9b00      	ldr	r3, [sp, #0]
 80067a6:	58eb      	ldr	r3, [r5, r3]
 80067a8:	b92b      	cbnz	r3, 80067b6 <quorem+0x96>
 80067aa:	9b01      	ldr	r3, [sp, #4]
 80067ac:	3b04      	subs	r3, #4
 80067ae:	429d      	cmp	r5, r3
 80067b0:	461a      	mov	r2, r3
 80067b2:	d32f      	bcc.n	8006814 <quorem+0xf4>
 80067b4:	613c      	str	r4, [r7, #16]
 80067b6:	4638      	mov	r0, r7
 80067b8:	f001 f9c6 	bl	8007b48 <__mcmp>
 80067bc:	2800      	cmp	r0, #0
 80067be:	db25      	blt.n	800680c <quorem+0xec>
 80067c0:	4629      	mov	r1, r5
 80067c2:	2000      	movs	r0, #0
 80067c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80067c8:	f8d1 c000 	ldr.w	ip, [r1]
 80067cc:	fa1f fe82 	uxth.w	lr, r2
 80067d0:	fa1f f38c 	uxth.w	r3, ip
 80067d4:	eba3 030e 	sub.w	r3, r3, lr
 80067d8:	4403      	add	r3, r0
 80067da:	0c12      	lsrs	r2, r2, #16
 80067dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80067e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067ea:	45c1      	cmp	r9, r8
 80067ec:	f841 3b04 	str.w	r3, [r1], #4
 80067f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067f4:	d2e6      	bcs.n	80067c4 <quorem+0xa4>
 80067f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067fe:	b922      	cbnz	r2, 800680a <quorem+0xea>
 8006800:	3b04      	subs	r3, #4
 8006802:	429d      	cmp	r5, r3
 8006804:	461a      	mov	r2, r3
 8006806:	d30b      	bcc.n	8006820 <quorem+0x100>
 8006808:	613c      	str	r4, [r7, #16]
 800680a:	3601      	adds	r6, #1
 800680c:	4630      	mov	r0, r6
 800680e:	b003      	add	sp, #12
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	6812      	ldr	r2, [r2, #0]
 8006816:	3b04      	subs	r3, #4
 8006818:	2a00      	cmp	r2, #0
 800681a:	d1cb      	bne.n	80067b4 <quorem+0x94>
 800681c:	3c01      	subs	r4, #1
 800681e:	e7c6      	b.n	80067ae <quorem+0x8e>
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	3b04      	subs	r3, #4
 8006824:	2a00      	cmp	r2, #0
 8006826:	d1ef      	bne.n	8006808 <quorem+0xe8>
 8006828:	3c01      	subs	r4, #1
 800682a:	e7ea      	b.n	8006802 <quorem+0xe2>
 800682c:	2000      	movs	r0, #0
 800682e:	e7ee      	b.n	800680e <quorem+0xee>

08006830 <_dtoa_r>:
 8006830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	69c7      	ldr	r7, [r0, #28]
 8006836:	b097      	sub	sp, #92	@ 0x5c
 8006838:	ed8d 0b04 	vstr	d0, [sp, #16]
 800683c:	ec55 4b10 	vmov	r4, r5, d0
 8006840:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006842:	9107      	str	r1, [sp, #28]
 8006844:	4681      	mov	r9, r0
 8006846:	920c      	str	r2, [sp, #48]	@ 0x30
 8006848:	9311      	str	r3, [sp, #68]	@ 0x44
 800684a:	b97f      	cbnz	r7, 800686c <_dtoa_r+0x3c>
 800684c:	2010      	movs	r0, #16
 800684e:	f000 fe09 	bl	8007464 <malloc>
 8006852:	4602      	mov	r2, r0
 8006854:	f8c9 001c 	str.w	r0, [r9, #28]
 8006858:	b920      	cbnz	r0, 8006864 <_dtoa_r+0x34>
 800685a:	4ba9      	ldr	r3, [pc, #676]	@ (8006b00 <_dtoa_r+0x2d0>)
 800685c:	21ef      	movs	r1, #239	@ 0xef
 800685e:	48a9      	ldr	r0, [pc, #676]	@ (8006b04 <_dtoa_r+0x2d4>)
 8006860:	f002 fc3a 	bl	80090d8 <__assert_func>
 8006864:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006868:	6007      	str	r7, [r0, #0]
 800686a:	60c7      	str	r7, [r0, #12]
 800686c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006870:	6819      	ldr	r1, [r3, #0]
 8006872:	b159      	cbz	r1, 800688c <_dtoa_r+0x5c>
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	604a      	str	r2, [r1, #4]
 8006878:	2301      	movs	r3, #1
 800687a:	4093      	lsls	r3, r2
 800687c:	608b      	str	r3, [r1, #8]
 800687e:	4648      	mov	r0, r9
 8006880:	f000 fee6 	bl	8007650 <_Bfree>
 8006884:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	1e2b      	subs	r3, r5, #0
 800688e:	bfb9      	ittee	lt
 8006890:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006894:	9305      	strlt	r3, [sp, #20]
 8006896:	2300      	movge	r3, #0
 8006898:	6033      	strge	r3, [r6, #0]
 800689a:	9f05      	ldr	r7, [sp, #20]
 800689c:	4b9a      	ldr	r3, [pc, #616]	@ (8006b08 <_dtoa_r+0x2d8>)
 800689e:	bfbc      	itt	lt
 80068a0:	2201      	movlt	r2, #1
 80068a2:	6032      	strlt	r2, [r6, #0]
 80068a4:	43bb      	bics	r3, r7
 80068a6:	d112      	bne.n	80068ce <_dtoa_r+0x9e>
 80068a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80068aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068b4:	4323      	orrs	r3, r4
 80068b6:	f000 855a 	beq.w	800736e <_dtoa_r+0xb3e>
 80068ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006b1c <_dtoa_r+0x2ec>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 855c 	beq.w	800737e <_dtoa_r+0xb4e>
 80068c6:	f10a 0303 	add.w	r3, sl, #3
 80068ca:	f000 bd56 	b.w	800737a <_dtoa_r+0xb4a>
 80068ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80068d2:	2200      	movs	r2, #0
 80068d4:	ec51 0b17 	vmov	r0, r1, d7
 80068d8:	2300      	movs	r3, #0
 80068da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80068de:	f7fa f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80068e2:	4680      	mov	r8, r0
 80068e4:	b158      	cbz	r0, 80068fe <_dtoa_r+0xce>
 80068e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80068e8:	2301      	movs	r3, #1
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068ee:	b113      	cbz	r3, 80068f6 <_dtoa_r+0xc6>
 80068f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80068f2:	4b86      	ldr	r3, [pc, #536]	@ (8006b0c <_dtoa_r+0x2dc>)
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006b20 <_dtoa_r+0x2f0>
 80068fa:	f000 bd40 	b.w	800737e <_dtoa_r+0xb4e>
 80068fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006902:	aa14      	add	r2, sp, #80	@ 0x50
 8006904:	a915      	add	r1, sp, #84	@ 0x54
 8006906:	4648      	mov	r0, r9
 8006908:	f001 fa3e 	bl	8007d88 <__d2b>
 800690c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006910:	9002      	str	r0, [sp, #8]
 8006912:	2e00      	cmp	r6, #0
 8006914:	d078      	beq.n	8006a08 <_dtoa_r+0x1d8>
 8006916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006918:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800691c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006924:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006928:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800692c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006930:	4619      	mov	r1, r3
 8006932:	2200      	movs	r2, #0
 8006934:	4b76      	ldr	r3, [pc, #472]	@ (8006b10 <_dtoa_r+0x2e0>)
 8006936:	f7f9 fca7 	bl	8000288 <__aeabi_dsub>
 800693a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ae8 <_dtoa_r+0x2b8>)
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f7f9 fe5a 	bl	80005f8 <__aeabi_dmul>
 8006944:	a36a      	add	r3, pc, #424	@ (adr r3, 8006af0 <_dtoa_r+0x2c0>)
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f7f9 fc9f 	bl	800028c <__adddf3>
 800694e:	4604      	mov	r4, r0
 8006950:	4630      	mov	r0, r6
 8006952:	460d      	mov	r5, r1
 8006954:	f7f9 fde6 	bl	8000524 <__aeabi_i2d>
 8006958:	a367      	add	r3, pc, #412	@ (adr r3, 8006af8 <_dtoa_r+0x2c8>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f7f9 fe4b 	bl	80005f8 <__aeabi_dmul>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4620      	mov	r0, r4
 8006968:	4629      	mov	r1, r5
 800696a:	f7f9 fc8f 	bl	800028c <__adddf3>
 800696e:	4604      	mov	r4, r0
 8006970:	460d      	mov	r5, r1
 8006972:	f7fa f8f1 	bl	8000b58 <__aeabi_d2iz>
 8006976:	2200      	movs	r2, #0
 8006978:	4607      	mov	r7, r0
 800697a:	2300      	movs	r3, #0
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7fa f8ac 	bl	8000adc <__aeabi_dcmplt>
 8006984:	b140      	cbz	r0, 8006998 <_dtoa_r+0x168>
 8006986:	4638      	mov	r0, r7
 8006988:	f7f9 fdcc 	bl	8000524 <__aeabi_i2d>
 800698c:	4622      	mov	r2, r4
 800698e:	462b      	mov	r3, r5
 8006990:	f7fa f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006994:	b900      	cbnz	r0, 8006998 <_dtoa_r+0x168>
 8006996:	3f01      	subs	r7, #1
 8006998:	2f16      	cmp	r7, #22
 800699a:	d852      	bhi.n	8006a42 <_dtoa_r+0x212>
 800699c:	4b5d      	ldr	r3, [pc, #372]	@ (8006b14 <_dtoa_r+0x2e4>)
 800699e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80069aa:	f7fa f897 	bl	8000adc <__aeabi_dcmplt>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d049      	beq.n	8006a46 <_dtoa_r+0x216>
 80069b2:	3f01      	subs	r7, #1
 80069b4:	2300      	movs	r3, #0
 80069b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80069b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069ba:	1b9b      	subs	r3, r3, r6
 80069bc:	1e5a      	subs	r2, r3, #1
 80069be:	bf45      	ittet	mi
 80069c0:	f1c3 0301 	rsbmi	r3, r3, #1
 80069c4:	9300      	strmi	r3, [sp, #0]
 80069c6:	2300      	movpl	r3, #0
 80069c8:	2300      	movmi	r3, #0
 80069ca:	9206      	str	r2, [sp, #24]
 80069cc:	bf54      	ite	pl
 80069ce:	9300      	strpl	r3, [sp, #0]
 80069d0:	9306      	strmi	r3, [sp, #24]
 80069d2:	2f00      	cmp	r7, #0
 80069d4:	db39      	blt.n	8006a4a <_dtoa_r+0x21a>
 80069d6:	9b06      	ldr	r3, [sp, #24]
 80069d8:	970d      	str	r7, [sp, #52]	@ 0x34
 80069da:	443b      	add	r3, r7
 80069dc:	9306      	str	r3, [sp, #24]
 80069de:	2300      	movs	r3, #0
 80069e0:	9308      	str	r3, [sp, #32]
 80069e2:	9b07      	ldr	r3, [sp, #28]
 80069e4:	2b09      	cmp	r3, #9
 80069e6:	d863      	bhi.n	8006ab0 <_dtoa_r+0x280>
 80069e8:	2b05      	cmp	r3, #5
 80069ea:	bfc4      	itt	gt
 80069ec:	3b04      	subgt	r3, #4
 80069ee:	9307      	strgt	r3, [sp, #28]
 80069f0:	9b07      	ldr	r3, [sp, #28]
 80069f2:	f1a3 0302 	sub.w	r3, r3, #2
 80069f6:	bfcc      	ite	gt
 80069f8:	2400      	movgt	r4, #0
 80069fa:	2401      	movle	r4, #1
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d863      	bhi.n	8006ac8 <_dtoa_r+0x298>
 8006a00:	e8df f003 	tbb	[pc, r3]
 8006a04:	2b375452 	.word	0x2b375452
 8006a08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006a0c:	441e      	add	r6, r3
 8006a0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	bfc1      	itttt	gt
 8006a16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006a1a:	409f      	lslgt	r7, r3
 8006a1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006a20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006a24:	bfd6      	itet	le
 8006a26:	f1c3 0320 	rsble	r3, r3, #32
 8006a2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8006a2e:	fa04 f003 	lslle.w	r0, r4, r3
 8006a32:	f7f9 fd67 	bl	8000504 <__aeabi_ui2d>
 8006a36:	2201      	movs	r2, #1
 8006a38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a3c:	3e01      	subs	r6, #1
 8006a3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006a40:	e776      	b.n	8006930 <_dtoa_r+0x100>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e7b7      	b.n	80069b6 <_dtoa_r+0x186>
 8006a46:	9010      	str	r0, [sp, #64]	@ 0x40
 8006a48:	e7b6      	b.n	80069b8 <_dtoa_r+0x188>
 8006a4a:	9b00      	ldr	r3, [sp, #0]
 8006a4c:	1bdb      	subs	r3, r3, r7
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	427b      	negs	r3, r7
 8006a52:	9308      	str	r3, [sp, #32]
 8006a54:	2300      	movs	r3, #0
 8006a56:	930d      	str	r3, [sp, #52]	@ 0x34
 8006a58:	e7c3      	b.n	80069e2 <_dtoa_r+0x1b2>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a60:	eb07 0b03 	add.w	fp, r7, r3
 8006a64:	f10b 0301 	add.w	r3, fp, #1
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	9303      	str	r3, [sp, #12]
 8006a6c:	bfb8      	it	lt
 8006a6e:	2301      	movlt	r3, #1
 8006a70:	e006      	b.n	8006a80 <_dtoa_r+0x250>
 8006a72:	2301      	movs	r3, #1
 8006a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dd28      	ble.n	8006ace <_dtoa_r+0x29e>
 8006a7c:	469b      	mov	fp, r3
 8006a7e:	9303      	str	r3, [sp, #12]
 8006a80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006a84:	2100      	movs	r1, #0
 8006a86:	2204      	movs	r2, #4
 8006a88:	f102 0514 	add.w	r5, r2, #20
 8006a8c:	429d      	cmp	r5, r3
 8006a8e:	d926      	bls.n	8006ade <_dtoa_r+0x2ae>
 8006a90:	6041      	str	r1, [r0, #4]
 8006a92:	4648      	mov	r0, r9
 8006a94:	f000 fd9c 	bl	80075d0 <_Balloc>
 8006a98:	4682      	mov	sl, r0
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d142      	bne.n	8006b24 <_dtoa_r+0x2f4>
 8006a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b18 <_dtoa_r+0x2e8>)
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	f240 11af 	movw	r1, #431	@ 0x1af
 8006aa6:	e6da      	b.n	800685e <_dtoa_r+0x2e>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e7e3      	b.n	8006a74 <_dtoa_r+0x244>
 8006aac:	2300      	movs	r3, #0
 8006aae:	e7d5      	b.n	8006a5c <_dtoa_r+0x22c>
 8006ab0:	2401      	movs	r4, #1
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9307      	str	r3, [sp, #28]
 8006ab6:	9409      	str	r4, [sp, #36]	@ 0x24
 8006ab8:	f04f 3bff 	mov.w	fp, #4294967295
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8cd b00c 	str.w	fp, [sp, #12]
 8006ac2:	2312      	movs	r3, #18
 8006ac4:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ac6:	e7db      	b.n	8006a80 <_dtoa_r+0x250>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006acc:	e7f4      	b.n	8006ab8 <_dtoa_r+0x288>
 8006ace:	f04f 0b01 	mov.w	fp, #1
 8006ad2:	f8cd b00c 	str.w	fp, [sp, #12]
 8006ad6:	465b      	mov	r3, fp
 8006ad8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006adc:	e7d0      	b.n	8006a80 <_dtoa_r+0x250>
 8006ade:	3101      	adds	r1, #1
 8006ae0:	0052      	lsls	r2, r2, #1
 8006ae2:	e7d1      	b.n	8006a88 <_dtoa_r+0x258>
 8006ae4:	f3af 8000 	nop.w
 8006ae8:	636f4361 	.word	0x636f4361
 8006aec:	3fd287a7 	.word	0x3fd287a7
 8006af0:	8b60c8b3 	.word	0x8b60c8b3
 8006af4:	3fc68a28 	.word	0x3fc68a28
 8006af8:	509f79fb 	.word	0x509f79fb
 8006afc:	3fd34413 	.word	0x3fd34413
 8006b00:	0800a28a 	.word	0x0800a28a
 8006b04:	0800a2a1 	.word	0x0800a2a1
 8006b08:	7ff00000 	.word	0x7ff00000
 8006b0c:	0800a255 	.word	0x0800a255
 8006b10:	3ff80000 	.word	0x3ff80000
 8006b14:	0800a450 	.word	0x0800a450
 8006b18:	0800a2f9 	.word	0x0800a2f9
 8006b1c:	0800a286 	.word	0x0800a286
 8006b20:	0800a254 	.word	0x0800a254
 8006b24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006b28:	6018      	str	r0, [r3, #0]
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	2b0e      	cmp	r3, #14
 8006b2e:	f200 80a1 	bhi.w	8006c74 <_dtoa_r+0x444>
 8006b32:	2c00      	cmp	r4, #0
 8006b34:	f000 809e 	beq.w	8006c74 <_dtoa_r+0x444>
 8006b38:	2f00      	cmp	r7, #0
 8006b3a:	dd33      	ble.n	8006ba4 <_dtoa_r+0x374>
 8006b3c:	4b9c      	ldr	r3, [pc, #624]	@ (8006db0 <_dtoa_r+0x580>)
 8006b3e:	f007 020f 	and.w	r2, r7, #15
 8006b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b46:	ed93 7b00 	vldr	d7, [r3]
 8006b4a:	05f8      	lsls	r0, r7, #23
 8006b4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006b50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b54:	d516      	bpl.n	8006b84 <_dtoa_r+0x354>
 8006b56:	4b97      	ldr	r3, [pc, #604]	@ (8006db4 <_dtoa_r+0x584>)
 8006b58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b60:	f7f9 fe74 	bl	800084c <__aeabi_ddiv>
 8006b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b68:	f004 040f 	and.w	r4, r4, #15
 8006b6c:	2603      	movs	r6, #3
 8006b6e:	4d91      	ldr	r5, [pc, #580]	@ (8006db4 <_dtoa_r+0x584>)
 8006b70:	b954      	cbnz	r4, 8006b88 <_dtoa_r+0x358>
 8006b72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b7a:	f7f9 fe67 	bl	800084c <__aeabi_ddiv>
 8006b7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b82:	e028      	b.n	8006bd6 <_dtoa_r+0x3a6>
 8006b84:	2602      	movs	r6, #2
 8006b86:	e7f2      	b.n	8006b6e <_dtoa_r+0x33e>
 8006b88:	07e1      	lsls	r1, r4, #31
 8006b8a:	d508      	bpl.n	8006b9e <_dtoa_r+0x36e>
 8006b8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b94:	f7f9 fd30 	bl	80005f8 <__aeabi_dmul>
 8006b98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b9c:	3601      	adds	r6, #1
 8006b9e:	1064      	asrs	r4, r4, #1
 8006ba0:	3508      	adds	r5, #8
 8006ba2:	e7e5      	b.n	8006b70 <_dtoa_r+0x340>
 8006ba4:	f000 80af 	beq.w	8006d06 <_dtoa_r+0x4d6>
 8006ba8:	427c      	negs	r4, r7
 8006baa:	4b81      	ldr	r3, [pc, #516]	@ (8006db0 <_dtoa_r+0x580>)
 8006bac:	4d81      	ldr	r5, [pc, #516]	@ (8006db4 <_dtoa_r+0x584>)
 8006bae:	f004 020f 	and.w	r2, r4, #15
 8006bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006bbe:	f7f9 fd1b 	bl	80005f8 <__aeabi_dmul>
 8006bc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc6:	1124      	asrs	r4, r4, #4
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2602      	movs	r6, #2
 8006bcc:	2c00      	cmp	r4, #0
 8006bce:	f040 808f 	bne.w	8006cf0 <_dtoa_r+0x4c0>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1d3      	bne.n	8006b7e <_dtoa_r+0x34e>
 8006bd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006bd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 8094 	beq.w	8006d0a <_dtoa_r+0x4da>
 8006be2:	4b75      	ldr	r3, [pc, #468]	@ (8006db8 <_dtoa_r+0x588>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	4620      	mov	r0, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	f7f9 ff77 	bl	8000adc <__aeabi_dcmplt>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f000 808b 	beq.w	8006d0a <_dtoa_r+0x4da>
 8006bf4:	9b03      	ldr	r3, [sp, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8087 	beq.w	8006d0a <_dtoa_r+0x4da>
 8006bfc:	f1bb 0f00 	cmp.w	fp, #0
 8006c00:	dd34      	ble.n	8006c6c <_dtoa_r+0x43c>
 8006c02:	4620      	mov	r0, r4
 8006c04:	4b6d      	ldr	r3, [pc, #436]	@ (8006dbc <_dtoa_r+0x58c>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7f9 fcf5 	bl	80005f8 <__aeabi_dmul>
 8006c0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c12:	f107 38ff 	add.w	r8, r7, #4294967295
 8006c16:	3601      	adds	r6, #1
 8006c18:	465c      	mov	r4, fp
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f7f9 fc82 	bl	8000524 <__aeabi_i2d>
 8006c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c24:	f7f9 fce8 	bl	80005f8 <__aeabi_dmul>
 8006c28:	4b65      	ldr	r3, [pc, #404]	@ (8006dc0 <_dtoa_r+0x590>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f7f9 fb2e 	bl	800028c <__adddf3>
 8006c30:	4605      	mov	r5, r0
 8006c32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c36:	2c00      	cmp	r4, #0
 8006c38:	d16a      	bne.n	8006d10 <_dtoa_r+0x4e0>
 8006c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c3e:	4b61      	ldr	r3, [pc, #388]	@ (8006dc4 <_dtoa_r+0x594>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	f7f9 fb21 	bl	8000288 <__aeabi_dsub>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c4e:	462a      	mov	r2, r5
 8006c50:	4633      	mov	r3, r6
 8006c52:	f7f9 ff61 	bl	8000b18 <__aeabi_dcmpgt>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	f040 8298 	bne.w	800718c <_dtoa_r+0x95c>
 8006c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c60:	462a      	mov	r2, r5
 8006c62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c66:	f7f9 ff39 	bl	8000adc <__aeabi_dcmplt>
 8006c6a:	bb38      	cbnz	r0, 8006cbc <_dtoa_r+0x48c>
 8006c6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006c70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f2c0 8157 	blt.w	8006f2a <_dtoa_r+0x6fa>
 8006c7c:	2f0e      	cmp	r7, #14
 8006c7e:	f300 8154 	bgt.w	8006f2a <_dtoa_r+0x6fa>
 8006c82:	4b4b      	ldr	r3, [pc, #300]	@ (8006db0 <_dtoa_r+0x580>)
 8006c84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c88:	ed93 7b00 	vldr	d7, [r3]
 8006c8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	ed8d 7b00 	vstr	d7, [sp]
 8006c94:	f280 80e5 	bge.w	8006e62 <_dtoa_r+0x632>
 8006c98:	9b03      	ldr	r3, [sp, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f300 80e1 	bgt.w	8006e62 <_dtoa_r+0x632>
 8006ca0:	d10c      	bne.n	8006cbc <_dtoa_r+0x48c>
 8006ca2:	4b48      	ldr	r3, [pc, #288]	@ (8006dc4 <_dtoa_r+0x594>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	ec51 0b17 	vmov	r0, r1, d7
 8006caa:	f7f9 fca5 	bl	80005f8 <__aeabi_dmul>
 8006cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cb2:	f7f9 ff27 	bl	8000b04 <__aeabi_dcmpge>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f000 8266 	beq.w	8007188 <_dtoa_r+0x958>
 8006cbc:	2400      	movs	r4, #0
 8006cbe:	4625      	mov	r5, r4
 8006cc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006cc2:	4656      	mov	r6, sl
 8006cc4:	ea6f 0803 	mvn.w	r8, r3
 8006cc8:	2700      	movs	r7, #0
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4648      	mov	r0, r9
 8006cce:	f000 fcbf 	bl	8007650 <_Bfree>
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	f000 80bd 	beq.w	8006e52 <_dtoa_r+0x622>
 8006cd8:	b12f      	cbz	r7, 8006ce6 <_dtoa_r+0x4b6>
 8006cda:	42af      	cmp	r7, r5
 8006cdc:	d003      	beq.n	8006ce6 <_dtoa_r+0x4b6>
 8006cde:	4639      	mov	r1, r7
 8006ce0:	4648      	mov	r0, r9
 8006ce2:	f000 fcb5 	bl	8007650 <_Bfree>
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4648      	mov	r0, r9
 8006cea:	f000 fcb1 	bl	8007650 <_Bfree>
 8006cee:	e0b0      	b.n	8006e52 <_dtoa_r+0x622>
 8006cf0:	07e2      	lsls	r2, r4, #31
 8006cf2:	d505      	bpl.n	8006d00 <_dtoa_r+0x4d0>
 8006cf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cf8:	f7f9 fc7e 	bl	80005f8 <__aeabi_dmul>
 8006cfc:	3601      	adds	r6, #1
 8006cfe:	2301      	movs	r3, #1
 8006d00:	1064      	asrs	r4, r4, #1
 8006d02:	3508      	adds	r5, #8
 8006d04:	e762      	b.n	8006bcc <_dtoa_r+0x39c>
 8006d06:	2602      	movs	r6, #2
 8006d08:	e765      	b.n	8006bd6 <_dtoa_r+0x3a6>
 8006d0a:	9c03      	ldr	r4, [sp, #12]
 8006d0c:	46b8      	mov	r8, r7
 8006d0e:	e784      	b.n	8006c1a <_dtoa_r+0x3ea>
 8006d10:	4b27      	ldr	r3, [pc, #156]	@ (8006db0 <_dtoa_r+0x580>)
 8006d12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d1c:	4454      	add	r4, sl
 8006d1e:	2900      	cmp	r1, #0
 8006d20:	d054      	beq.n	8006dcc <_dtoa_r+0x59c>
 8006d22:	4929      	ldr	r1, [pc, #164]	@ (8006dc8 <_dtoa_r+0x598>)
 8006d24:	2000      	movs	r0, #0
 8006d26:	f7f9 fd91 	bl	800084c <__aeabi_ddiv>
 8006d2a:	4633      	mov	r3, r6
 8006d2c:	462a      	mov	r2, r5
 8006d2e:	f7f9 faab 	bl	8000288 <__aeabi_dsub>
 8006d32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d36:	4656      	mov	r6, sl
 8006d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d3c:	f7f9 ff0c 	bl	8000b58 <__aeabi_d2iz>
 8006d40:	4605      	mov	r5, r0
 8006d42:	f7f9 fbef 	bl	8000524 <__aeabi_i2d>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d4e:	f7f9 fa9b 	bl	8000288 <__aeabi_dsub>
 8006d52:	3530      	adds	r5, #48	@ 0x30
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d5c:	f806 5b01 	strb.w	r5, [r6], #1
 8006d60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d64:	f7f9 feba 	bl	8000adc <__aeabi_dcmplt>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d172      	bne.n	8006e52 <_dtoa_r+0x622>
 8006d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d70:	4911      	ldr	r1, [pc, #68]	@ (8006db8 <_dtoa_r+0x588>)
 8006d72:	2000      	movs	r0, #0
 8006d74:	f7f9 fa88 	bl	8000288 <__aeabi_dsub>
 8006d78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d7c:	f7f9 feae 	bl	8000adc <__aeabi_dcmplt>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	f040 80b4 	bne.w	8006eee <_dtoa_r+0x6be>
 8006d86:	42a6      	cmp	r6, r4
 8006d88:	f43f af70 	beq.w	8006c6c <_dtoa_r+0x43c>
 8006d8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d90:	4b0a      	ldr	r3, [pc, #40]	@ (8006dbc <_dtoa_r+0x58c>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	f7f9 fc30 	bl	80005f8 <__aeabi_dmul>
 8006d98:	4b08      	ldr	r3, [pc, #32]	@ (8006dbc <_dtoa_r+0x58c>)
 8006d9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d9e:	2200      	movs	r2, #0
 8006da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006da4:	f7f9 fc28 	bl	80005f8 <__aeabi_dmul>
 8006da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dac:	e7c4      	b.n	8006d38 <_dtoa_r+0x508>
 8006dae:	bf00      	nop
 8006db0:	0800a450 	.word	0x0800a450
 8006db4:	0800a428 	.word	0x0800a428
 8006db8:	3ff00000 	.word	0x3ff00000
 8006dbc:	40240000 	.word	0x40240000
 8006dc0:	401c0000 	.word	0x401c0000
 8006dc4:	40140000 	.word	0x40140000
 8006dc8:	3fe00000 	.word	0x3fe00000
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f7f9 fc12 	bl	80005f8 <__aeabi_dmul>
 8006dd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006dd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006dda:	4656      	mov	r6, sl
 8006ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006de0:	f7f9 feba 	bl	8000b58 <__aeabi_d2iz>
 8006de4:	4605      	mov	r5, r0
 8006de6:	f7f9 fb9d 	bl	8000524 <__aeabi_i2d>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006df2:	f7f9 fa49 	bl	8000288 <__aeabi_dsub>
 8006df6:	3530      	adds	r5, #48	@ 0x30
 8006df8:	f806 5b01 	strb.w	r5, [r6], #1
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	42a6      	cmp	r6, r4
 8006e02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	d124      	bne.n	8006e56 <_dtoa_r+0x626>
 8006e0c:	4baf      	ldr	r3, [pc, #700]	@ (80070cc <_dtoa_r+0x89c>)
 8006e0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006e12:	f7f9 fa3b 	bl	800028c <__adddf3>
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e1e:	f7f9 fe7b 	bl	8000b18 <__aeabi_dcmpgt>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d163      	bne.n	8006eee <_dtoa_r+0x6be>
 8006e26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006e2a:	49a8      	ldr	r1, [pc, #672]	@ (80070cc <_dtoa_r+0x89c>)
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f7f9 fa2b 	bl	8000288 <__aeabi_dsub>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e3a:	f7f9 fe4f 	bl	8000adc <__aeabi_dcmplt>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f43f af14 	beq.w	8006c6c <_dtoa_r+0x43c>
 8006e44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006e46:	1e73      	subs	r3, r6, #1
 8006e48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e4e:	2b30      	cmp	r3, #48	@ 0x30
 8006e50:	d0f8      	beq.n	8006e44 <_dtoa_r+0x614>
 8006e52:	4647      	mov	r7, r8
 8006e54:	e03b      	b.n	8006ece <_dtoa_r+0x69e>
 8006e56:	4b9e      	ldr	r3, [pc, #632]	@ (80070d0 <_dtoa_r+0x8a0>)
 8006e58:	f7f9 fbce 	bl	80005f8 <__aeabi_dmul>
 8006e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e60:	e7bc      	b.n	8006ddc <_dtoa_r+0x5ac>
 8006e62:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006e66:	4656      	mov	r6, sl
 8006e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7f9 fcec 	bl	800084c <__aeabi_ddiv>
 8006e74:	f7f9 fe70 	bl	8000b58 <__aeabi_d2iz>
 8006e78:	4680      	mov	r8, r0
 8006e7a:	f7f9 fb53 	bl	8000524 <__aeabi_i2d>
 8006e7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e82:	f7f9 fbb9 	bl	80005f8 <__aeabi_dmul>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e92:	f7f9 f9f9 	bl	8000288 <__aeabi_dsub>
 8006e96:	f806 4b01 	strb.w	r4, [r6], #1
 8006e9a:	9d03      	ldr	r5, [sp, #12]
 8006e9c:	eba6 040a 	sub.w	r4, r6, sl
 8006ea0:	42a5      	cmp	r5, r4
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	d133      	bne.n	8006f10 <_dtoa_r+0x6e0>
 8006ea8:	f7f9 f9f0 	bl	800028c <__adddf3>
 8006eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	f7f9 fe30 	bl	8000b18 <__aeabi_dcmpgt>
 8006eb8:	b9c0      	cbnz	r0, 8006eec <_dtoa_r+0x6bc>
 8006eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ec6:	b110      	cbz	r0, 8006ece <_dtoa_r+0x69e>
 8006ec8:	f018 0f01 	tst.w	r8, #1
 8006ecc:	d10e      	bne.n	8006eec <_dtoa_r+0x6bc>
 8006ece:	9902      	ldr	r1, [sp, #8]
 8006ed0:	4648      	mov	r0, r9
 8006ed2:	f000 fbbd 	bl	8007650 <_Bfree>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	7033      	strb	r3, [r6, #0]
 8006eda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006edc:	3701      	adds	r7, #1
 8006ede:	601f      	str	r7, [r3, #0]
 8006ee0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 824b 	beq.w	800737e <_dtoa_r+0xb4e>
 8006ee8:	601e      	str	r6, [r3, #0]
 8006eea:	e248      	b.n	800737e <_dtoa_r+0xb4e>
 8006eec:	46b8      	mov	r8, r7
 8006eee:	4633      	mov	r3, r6
 8006ef0:	461e      	mov	r6, r3
 8006ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ef6:	2a39      	cmp	r2, #57	@ 0x39
 8006ef8:	d106      	bne.n	8006f08 <_dtoa_r+0x6d8>
 8006efa:	459a      	cmp	sl, r3
 8006efc:	d1f8      	bne.n	8006ef0 <_dtoa_r+0x6c0>
 8006efe:	2230      	movs	r2, #48	@ 0x30
 8006f00:	f108 0801 	add.w	r8, r8, #1
 8006f04:	f88a 2000 	strb.w	r2, [sl]
 8006f08:	781a      	ldrb	r2, [r3, #0]
 8006f0a:	3201      	adds	r2, #1
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	e7a0      	b.n	8006e52 <_dtoa_r+0x622>
 8006f10:	4b6f      	ldr	r3, [pc, #444]	@ (80070d0 <_dtoa_r+0x8a0>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	f7f9 fb70 	bl	80005f8 <__aeabi_dmul>
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	460d      	mov	r5, r1
 8006f20:	f7f9 fdd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d09f      	beq.n	8006e68 <_dtoa_r+0x638>
 8006f28:	e7d1      	b.n	8006ece <_dtoa_r+0x69e>
 8006f2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	f000 80ea 	beq.w	8007106 <_dtoa_r+0x8d6>
 8006f32:	9a07      	ldr	r2, [sp, #28]
 8006f34:	2a01      	cmp	r2, #1
 8006f36:	f300 80cd 	bgt.w	80070d4 <_dtoa_r+0x8a4>
 8006f3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	f000 80c1 	beq.w	80070c4 <_dtoa_r+0x894>
 8006f42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f46:	9c08      	ldr	r4, [sp, #32]
 8006f48:	9e00      	ldr	r6, [sp, #0]
 8006f4a:	9a00      	ldr	r2, [sp, #0]
 8006f4c:	441a      	add	r2, r3
 8006f4e:	9200      	str	r2, [sp, #0]
 8006f50:	9a06      	ldr	r2, [sp, #24]
 8006f52:	2101      	movs	r1, #1
 8006f54:	441a      	add	r2, r3
 8006f56:	4648      	mov	r0, r9
 8006f58:	9206      	str	r2, [sp, #24]
 8006f5a:	f000 fc77 	bl	800784c <__i2b>
 8006f5e:	4605      	mov	r5, r0
 8006f60:	b166      	cbz	r6, 8006f7c <_dtoa_r+0x74c>
 8006f62:	9b06      	ldr	r3, [sp, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dd09      	ble.n	8006f7c <_dtoa_r+0x74c>
 8006f68:	42b3      	cmp	r3, r6
 8006f6a:	9a00      	ldr	r2, [sp, #0]
 8006f6c:	bfa8      	it	ge
 8006f6e:	4633      	movge	r3, r6
 8006f70:	1ad2      	subs	r2, r2, r3
 8006f72:	9200      	str	r2, [sp, #0]
 8006f74:	9a06      	ldr	r2, [sp, #24]
 8006f76:	1af6      	subs	r6, r6, r3
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	9306      	str	r3, [sp, #24]
 8006f7c:	9b08      	ldr	r3, [sp, #32]
 8006f7e:	b30b      	cbz	r3, 8006fc4 <_dtoa_r+0x794>
 8006f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80c6 	beq.w	8007114 <_dtoa_r+0x8e4>
 8006f88:	2c00      	cmp	r4, #0
 8006f8a:	f000 80c0 	beq.w	800710e <_dtoa_r+0x8de>
 8006f8e:	4629      	mov	r1, r5
 8006f90:	4622      	mov	r2, r4
 8006f92:	4648      	mov	r0, r9
 8006f94:	f000 fd12 	bl	80079bc <__pow5mult>
 8006f98:	9a02      	ldr	r2, [sp, #8]
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	4648      	mov	r0, r9
 8006fa0:	f000 fc6a 	bl	8007878 <__multiply>
 8006fa4:	9902      	ldr	r1, [sp, #8]
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	4648      	mov	r0, r9
 8006faa:	f000 fb51 	bl	8007650 <_Bfree>
 8006fae:	9b08      	ldr	r3, [sp, #32]
 8006fb0:	1b1b      	subs	r3, r3, r4
 8006fb2:	9308      	str	r3, [sp, #32]
 8006fb4:	f000 80b1 	beq.w	800711a <_dtoa_r+0x8ea>
 8006fb8:	9a08      	ldr	r2, [sp, #32]
 8006fba:	4641      	mov	r1, r8
 8006fbc:	4648      	mov	r0, r9
 8006fbe:	f000 fcfd 	bl	80079bc <__pow5mult>
 8006fc2:	9002      	str	r0, [sp, #8]
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4648      	mov	r0, r9
 8006fc8:	f000 fc40 	bl	800784c <__i2b>
 8006fcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fce:	4604      	mov	r4, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 81d8 	beq.w	8007386 <_dtoa_r+0xb56>
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	4601      	mov	r1, r0
 8006fda:	4648      	mov	r0, r9
 8006fdc:	f000 fcee 	bl	80079bc <__pow5mult>
 8006fe0:	9b07      	ldr	r3, [sp, #28]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	f300 809f 	bgt.w	8007128 <_dtoa_r+0x8f8>
 8006fea:	9b04      	ldr	r3, [sp, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 8097 	bne.w	8007120 <_dtoa_r+0x8f0>
 8006ff2:	9b05      	ldr	r3, [sp, #20]
 8006ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f040 8093 	bne.w	8007124 <_dtoa_r+0x8f4>
 8006ffe:	9b05      	ldr	r3, [sp, #20]
 8007000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007004:	0d1b      	lsrs	r3, r3, #20
 8007006:	051b      	lsls	r3, r3, #20
 8007008:	b133      	cbz	r3, 8007018 <_dtoa_r+0x7e8>
 800700a:	9b00      	ldr	r3, [sp, #0]
 800700c:	3301      	adds	r3, #1
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	9b06      	ldr	r3, [sp, #24]
 8007012:	3301      	adds	r3, #1
 8007014:	9306      	str	r3, [sp, #24]
 8007016:	2301      	movs	r3, #1
 8007018:	9308      	str	r3, [sp, #32]
 800701a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 81b8 	beq.w	8007392 <_dtoa_r+0xb62>
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007028:	6918      	ldr	r0, [r3, #16]
 800702a:	f000 fbc3 	bl	80077b4 <__hi0bits>
 800702e:	f1c0 0020 	rsb	r0, r0, #32
 8007032:	9b06      	ldr	r3, [sp, #24]
 8007034:	4418      	add	r0, r3
 8007036:	f010 001f 	ands.w	r0, r0, #31
 800703a:	f000 8082 	beq.w	8007142 <_dtoa_r+0x912>
 800703e:	f1c0 0320 	rsb	r3, r0, #32
 8007042:	2b04      	cmp	r3, #4
 8007044:	dd73      	ble.n	800712e <_dtoa_r+0x8fe>
 8007046:	9b00      	ldr	r3, [sp, #0]
 8007048:	f1c0 001c 	rsb	r0, r0, #28
 800704c:	4403      	add	r3, r0
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	9b06      	ldr	r3, [sp, #24]
 8007052:	4403      	add	r3, r0
 8007054:	4406      	add	r6, r0
 8007056:	9306      	str	r3, [sp, #24]
 8007058:	9b00      	ldr	r3, [sp, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	dd05      	ble.n	800706a <_dtoa_r+0x83a>
 800705e:	9902      	ldr	r1, [sp, #8]
 8007060:	461a      	mov	r2, r3
 8007062:	4648      	mov	r0, r9
 8007064:	f000 fd04 	bl	8007a70 <__lshift>
 8007068:	9002      	str	r0, [sp, #8]
 800706a:	9b06      	ldr	r3, [sp, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	dd05      	ble.n	800707c <_dtoa_r+0x84c>
 8007070:	4621      	mov	r1, r4
 8007072:	461a      	mov	r2, r3
 8007074:	4648      	mov	r0, r9
 8007076:	f000 fcfb 	bl	8007a70 <__lshift>
 800707a:	4604      	mov	r4, r0
 800707c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	d061      	beq.n	8007146 <_dtoa_r+0x916>
 8007082:	9802      	ldr	r0, [sp, #8]
 8007084:	4621      	mov	r1, r4
 8007086:	f000 fd5f 	bl	8007b48 <__mcmp>
 800708a:	2800      	cmp	r0, #0
 800708c:	da5b      	bge.n	8007146 <_dtoa_r+0x916>
 800708e:	2300      	movs	r3, #0
 8007090:	9902      	ldr	r1, [sp, #8]
 8007092:	220a      	movs	r2, #10
 8007094:	4648      	mov	r0, r9
 8007096:	f000 fafd 	bl	8007694 <__multadd>
 800709a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800709c:	9002      	str	r0, [sp, #8]
 800709e:	f107 38ff 	add.w	r8, r7, #4294967295
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 8177 	beq.w	8007396 <_dtoa_r+0xb66>
 80070a8:	4629      	mov	r1, r5
 80070aa:	2300      	movs	r3, #0
 80070ac:	220a      	movs	r2, #10
 80070ae:	4648      	mov	r0, r9
 80070b0:	f000 faf0 	bl	8007694 <__multadd>
 80070b4:	f1bb 0f00 	cmp.w	fp, #0
 80070b8:	4605      	mov	r5, r0
 80070ba:	dc6f      	bgt.n	800719c <_dtoa_r+0x96c>
 80070bc:	9b07      	ldr	r3, [sp, #28]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	dc49      	bgt.n	8007156 <_dtoa_r+0x926>
 80070c2:	e06b      	b.n	800719c <_dtoa_r+0x96c>
 80070c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80070ca:	e73c      	b.n	8006f46 <_dtoa_r+0x716>
 80070cc:	3fe00000 	.word	0x3fe00000
 80070d0:	40240000 	.word	0x40240000
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	1e5c      	subs	r4, r3, #1
 80070d8:	9b08      	ldr	r3, [sp, #32]
 80070da:	42a3      	cmp	r3, r4
 80070dc:	db09      	blt.n	80070f2 <_dtoa_r+0x8c2>
 80070de:	1b1c      	subs	r4, r3, r4
 80070e0:	9b03      	ldr	r3, [sp, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f6bf af30 	bge.w	8006f48 <_dtoa_r+0x718>
 80070e8:	9b00      	ldr	r3, [sp, #0]
 80070ea:	9a03      	ldr	r2, [sp, #12]
 80070ec:	1a9e      	subs	r6, r3, r2
 80070ee:	2300      	movs	r3, #0
 80070f0:	e72b      	b.n	8006f4a <_dtoa_r+0x71a>
 80070f2:	9b08      	ldr	r3, [sp, #32]
 80070f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070f6:	9408      	str	r4, [sp, #32]
 80070f8:	1ae3      	subs	r3, r4, r3
 80070fa:	441a      	add	r2, r3
 80070fc:	9e00      	ldr	r6, [sp, #0]
 80070fe:	9b03      	ldr	r3, [sp, #12]
 8007100:	920d      	str	r2, [sp, #52]	@ 0x34
 8007102:	2400      	movs	r4, #0
 8007104:	e721      	b.n	8006f4a <_dtoa_r+0x71a>
 8007106:	9c08      	ldr	r4, [sp, #32]
 8007108:	9e00      	ldr	r6, [sp, #0]
 800710a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800710c:	e728      	b.n	8006f60 <_dtoa_r+0x730>
 800710e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007112:	e751      	b.n	8006fb8 <_dtoa_r+0x788>
 8007114:	9a08      	ldr	r2, [sp, #32]
 8007116:	9902      	ldr	r1, [sp, #8]
 8007118:	e750      	b.n	8006fbc <_dtoa_r+0x78c>
 800711a:	f8cd 8008 	str.w	r8, [sp, #8]
 800711e:	e751      	b.n	8006fc4 <_dtoa_r+0x794>
 8007120:	2300      	movs	r3, #0
 8007122:	e779      	b.n	8007018 <_dtoa_r+0x7e8>
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	e777      	b.n	8007018 <_dtoa_r+0x7e8>
 8007128:	2300      	movs	r3, #0
 800712a:	9308      	str	r3, [sp, #32]
 800712c:	e779      	b.n	8007022 <_dtoa_r+0x7f2>
 800712e:	d093      	beq.n	8007058 <_dtoa_r+0x828>
 8007130:	9a00      	ldr	r2, [sp, #0]
 8007132:	331c      	adds	r3, #28
 8007134:	441a      	add	r2, r3
 8007136:	9200      	str	r2, [sp, #0]
 8007138:	9a06      	ldr	r2, [sp, #24]
 800713a:	441a      	add	r2, r3
 800713c:	441e      	add	r6, r3
 800713e:	9206      	str	r2, [sp, #24]
 8007140:	e78a      	b.n	8007058 <_dtoa_r+0x828>
 8007142:	4603      	mov	r3, r0
 8007144:	e7f4      	b.n	8007130 <_dtoa_r+0x900>
 8007146:	9b03      	ldr	r3, [sp, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	46b8      	mov	r8, r7
 800714c:	dc20      	bgt.n	8007190 <_dtoa_r+0x960>
 800714e:	469b      	mov	fp, r3
 8007150:	9b07      	ldr	r3, [sp, #28]
 8007152:	2b02      	cmp	r3, #2
 8007154:	dd1e      	ble.n	8007194 <_dtoa_r+0x964>
 8007156:	f1bb 0f00 	cmp.w	fp, #0
 800715a:	f47f adb1 	bne.w	8006cc0 <_dtoa_r+0x490>
 800715e:	4621      	mov	r1, r4
 8007160:	465b      	mov	r3, fp
 8007162:	2205      	movs	r2, #5
 8007164:	4648      	mov	r0, r9
 8007166:	f000 fa95 	bl	8007694 <__multadd>
 800716a:	4601      	mov	r1, r0
 800716c:	4604      	mov	r4, r0
 800716e:	9802      	ldr	r0, [sp, #8]
 8007170:	f000 fcea 	bl	8007b48 <__mcmp>
 8007174:	2800      	cmp	r0, #0
 8007176:	f77f ada3 	ble.w	8006cc0 <_dtoa_r+0x490>
 800717a:	4656      	mov	r6, sl
 800717c:	2331      	movs	r3, #49	@ 0x31
 800717e:	f806 3b01 	strb.w	r3, [r6], #1
 8007182:	f108 0801 	add.w	r8, r8, #1
 8007186:	e59f      	b.n	8006cc8 <_dtoa_r+0x498>
 8007188:	9c03      	ldr	r4, [sp, #12]
 800718a:	46b8      	mov	r8, r7
 800718c:	4625      	mov	r5, r4
 800718e:	e7f4      	b.n	800717a <_dtoa_r+0x94a>
 8007190:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 8101 	beq.w	800739e <_dtoa_r+0xb6e>
 800719c:	2e00      	cmp	r6, #0
 800719e:	dd05      	ble.n	80071ac <_dtoa_r+0x97c>
 80071a0:	4629      	mov	r1, r5
 80071a2:	4632      	mov	r2, r6
 80071a4:	4648      	mov	r0, r9
 80071a6:	f000 fc63 	bl	8007a70 <__lshift>
 80071aa:	4605      	mov	r5, r0
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d05c      	beq.n	800726c <_dtoa_r+0xa3c>
 80071b2:	6869      	ldr	r1, [r5, #4]
 80071b4:	4648      	mov	r0, r9
 80071b6:	f000 fa0b 	bl	80075d0 <_Balloc>
 80071ba:	4606      	mov	r6, r0
 80071bc:	b928      	cbnz	r0, 80071ca <_dtoa_r+0x99a>
 80071be:	4b82      	ldr	r3, [pc, #520]	@ (80073c8 <_dtoa_r+0xb98>)
 80071c0:	4602      	mov	r2, r0
 80071c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80071c6:	f7ff bb4a 	b.w	800685e <_dtoa_r+0x2e>
 80071ca:	692a      	ldr	r2, [r5, #16]
 80071cc:	3202      	adds	r2, #2
 80071ce:	0092      	lsls	r2, r2, #2
 80071d0:	f105 010c 	add.w	r1, r5, #12
 80071d4:	300c      	adds	r0, #12
 80071d6:	f001 ff69 	bl	80090ac <memcpy>
 80071da:	2201      	movs	r2, #1
 80071dc:	4631      	mov	r1, r6
 80071de:	4648      	mov	r0, r9
 80071e0:	f000 fc46 	bl	8007a70 <__lshift>
 80071e4:	f10a 0301 	add.w	r3, sl, #1
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	eb0a 030b 	add.w	r3, sl, fp
 80071ee:	9308      	str	r3, [sp, #32]
 80071f0:	9b04      	ldr	r3, [sp, #16]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	462f      	mov	r7, r5
 80071f8:	9306      	str	r3, [sp, #24]
 80071fa:	4605      	mov	r5, r0
 80071fc:	9b00      	ldr	r3, [sp, #0]
 80071fe:	9802      	ldr	r0, [sp, #8]
 8007200:	4621      	mov	r1, r4
 8007202:	f103 3bff 	add.w	fp, r3, #4294967295
 8007206:	f7ff fa8b 	bl	8006720 <quorem>
 800720a:	4603      	mov	r3, r0
 800720c:	3330      	adds	r3, #48	@ 0x30
 800720e:	9003      	str	r0, [sp, #12]
 8007210:	4639      	mov	r1, r7
 8007212:	9802      	ldr	r0, [sp, #8]
 8007214:	9309      	str	r3, [sp, #36]	@ 0x24
 8007216:	f000 fc97 	bl	8007b48 <__mcmp>
 800721a:	462a      	mov	r2, r5
 800721c:	9004      	str	r0, [sp, #16]
 800721e:	4621      	mov	r1, r4
 8007220:	4648      	mov	r0, r9
 8007222:	f000 fcad 	bl	8007b80 <__mdiff>
 8007226:	68c2      	ldr	r2, [r0, #12]
 8007228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722a:	4606      	mov	r6, r0
 800722c:	bb02      	cbnz	r2, 8007270 <_dtoa_r+0xa40>
 800722e:	4601      	mov	r1, r0
 8007230:	9802      	ldr	r0, [sp, #8]
 8007232:	f000 fc89 	bl	8007b48 <__mcmp>
 8007236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007238:	4602      	mov	r2, r0
 800723a:	4631      	mov	r1, r6
 800723c:	4648      	mov	r0, r9
 800723e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007240:	9309      	str	r3, [sp, #36]	@ 0x24
 8007242:	f000 fa05 	bl	8007650 <_Bfree>
 8007246:	9b07      	ldr	r3, [sp, #28]
 8007248:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800724a:	9e00      	ldr	r6, [sp, #0]
 800724c:	ea42 0103 	orr.w	r1, r2, r3
 8007250:	9b06      	ldr	r3, [sp, #24]
 8007252:	4319      	orrs	r1, r3
 8007254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007256:	d10d      	bne.n	8007274 <_dtoa_r+0xa44>
 8007258:	2b39      	cmp	r3, #57	@ 0x39
 800725a:	d027      	beq.n	80072ac <_dtoa_r+0xa7c>
 800725c:	9a04      	ldr	r2, [sp, #16]
 800725e:	2a00      	cmp	r2, #0
 8007260:	dd01      	ble.n	8007266 <_dtoa_r+0xa36>
 8007262:	9b03      	ldr	r3, [sp, #12]
 8007264:	3331      	adds	r3, #49	@ 0x31
 8007266:	f88b 3000 	strb.w	r3, [fp]
 800726a:	e52e      	b.n	8006cca <_dtoa_r+0x49a>
 800726c:	4628      	mov	r0, r5
 800726e:	e7b9      	b.n	80071e4 <_dtoa_r+0x9b4>
 8007270:	2201      	movs	r2, #1
 8007272:	e7e2      	b.n	800723a <_dtoa_r+0xa0a>
 8007274:	9904      	ldr	r1, [sp, #16]
 8007276:	2900      	cmp	r1, #0
 8007278:	db04      	blt.n	8007284 <_dtoa_r+0xa54>
 800727a:	9807      	ldr	r0, [sp, #28]
 800727c:	4301      	orrs	r1, r0
 800727e:	9806      	ldr	r0, [sp, #24]
 8007280:	4301      	orrs	r1, r0
 8007282:	d120      	bne.n	80072c6 <_dtoa_r+0xa96>
 8007284:	2a00      	cmp	r2, #0
 8007286:	ddee      	ble.n	8007266 <_dtoa_r+0xa36>
 8007288:	9902      	ldr	r1, [sp, #8]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	2201      	movs	r2, #1
 800728e:	4648      	mov	r0, r9
 8007290:	f000 fbee 	bl	8007a70 <__lshift>
 8007294:	4621      	mov	r1, r4
 8007296:	9002      	str	r0, [sp, #8]
 8007298:	f000 fc56 	bl	8007b48 <__mcmp>
 800729c:	2800      	cmp	r0, #0
 800729e:	9b00      	ldr	r3, [sp, #0]
 80072a0:	dc02      	bgt.n	80072a8 <_dtoa_r+0xa78>
 80072a2:	d1e0      	bne.n	8007266 <_dtoa_r+0xa36>
 80072a4:	07da      	lsls	r2, r3, #31
 80072a6:	d5de      	bpl.n	8007266 <_dtoa_r+0xa36>
 80072a8:	2b39      	cmp	r3, #57	@ 0x39
 80072aa:	d1da      	bne.n	8007262 <_dtoa_r+0xa32>
 80072ac:	2339      	movs	r3, #57	@ 0x39
 80072ae:	f88b 3000 	strb.w	r3, [fp]
 80072b2:	4633      	mov	r3, r6
 80072b4:	461e      	mov	r6, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80072bc:	2a39      	cmp	r2, #57	@ 0x39
 80072be:	d04e      	beq.n	800735e <_dtoa_r+0xb2e>
 80072c0:	3201      	adds	r2, #1
 80072c2:	701a      	strb	r2, [r3, #0]
 80072c4:	e501      	b.n	8006cca <_dtoa_r+0x49a>
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	dd03      	ble.n	80072d2 <_dtoa_r+0xaa2>
 80072ca:	2b39      	cmp	r3, #57	@ 0x39
 80072cc:	d0ee      	beq.n	80072ac <_dtoa_r+0xa7c>
 80072ce:	3301      	adds	r3, #1
 80072d0:	e7c9      	b.n	8007266 <_dtoa_r+0xa36>
 80072d2:	9a00      	ldr	r2, [sp, #0]
 80072d4:	9908      	ldr	r1, [sp, #32]
 80072d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80072da:	428a      	cmp	r2, r1
 80072dc:	d028      	beq.n	8007330 <_dtoa_r+0xb00>
 80072de:	9902      	ldr	r1, [sp, #8]
 80072e0:	2300      	movs	r3, #0
 80072e2:	220a      	movs	r2, #10
 80072e4:	4648      	mov	r0, r9
 80072e6:	f000 f9d5 	bl	8007694 <__multadd>
 80072ea:	42af      	cmp	r7, r5
 80072ec:	9002      	str	r0, [sp, #8]
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	f04f 020a 	mov.w	r2, #10
 80072f6:	4639      	mov	r1, r7
 80072f8:	4648      	mov	r0, r9
 80072fa:	d107      	bne.n	800730c <_dtoa_r+0xadc>
 80072fc:	f000 f9ca 	bl	8007694 <__multadd>
 8007300:	4607      	mov	r7, r0
 8007302:	4605      	mov	r5, r0
 8007304:	9b00      	ldr	r3, [sp, #0]
 8007306:	3301      	adds	r3, #1
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	e777      	b.n	80071fc <_dtoa_r+0x9cc>
 800730c:	f000 f9c2 	bl	8007694 <__multadd>
 8007310:	4629      	mov	r1, r5
 8007312:	4607      	mov	r7, r0
 8007314:	2300      	movs	r3, #0
 8007316:	220a      	movs	r2, #10
 8007318:	4648      	mov	r0, r9
 800731a:	f000 f9bb 	bl	8007694 <__multadd>
 800731e:	4605      	mov	r5, r0
 8007320:	e7f0      	b.n	8007304 <_dtoa_r+0xad4>
 8007322:	f1bb 0f00 	cmp.w	fp, #0
 8007326:	bfcc      	ite	gt
 8007328:	465e      	movgt	r6, fp
 800732a:	2601      	movle	r6, #1
 800732c:	4456      	add	r6, sl
 800732e:	2700      	movs	r7, #0
 8007330:	9902      	ldr	r1, [sp, #8]
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	2201      	movs	r2, #1
 8007336:	4648      	mov	r0, r9
 8007338:	f000 fb9a 	bl	8007a70 <__lshift>
 800733c:	4621      	mov	r1, r4
 800733e:	9002      	str	r0, [sp, #8]
 8007340:	f000 fc02 	bl	8007b48 <__mcmp>
 8007344:	2800      	cmp	r0, #0
 8007346:	dcb4      	bgt.n	80072b2 <_dtoa_r+0xa82>
 8007348:	d102      	bne.n	8007350 <_dtoa_r+0xb20>
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	07db      	lsls	r3, r3, #31
 800734e:	d4b0      	bmi.n	80072b2 <_dtoa_r+0xa82>
 8007350:	4633      	mov	r3, r6
 8007352:	461e      	mov	r6, r3
 8007354:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007358:	2a30      	cmp	r2, #48	@ 0x30
 800735a:	d0fa      	beq.n	8007352 <_dtoa_r+0xb22>
 800735c:	e4b5      	b.n	8006cca <_dtoa_r+0x49a>
 800735e:	459a      	cmp	sl, r3
 8007360:	d1a8      	bne.n	80072b4 <_dtoa_r+0xa84>
 8007362:	2331      	movs	r3, #49	@ 0x31
 8007364:	f108 0801 	add.w	r8, r8, #1
 8007368:	f88a 3000 	strb.w	r3, [sl]
 800736c:	e4ad      	b.n	8006cca <_dtoa_r+0x49a>
 800736e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007370:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80073cc <_dtoa_r+0xb9c>
 8007374:	b11b      	cbz	r3, 800737e <_dtoa_r+0xb4e>
 8007376:	f10a 0308 	add.w	r3, sl, #8
 800737a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	4650      	mov	r0, sl
 8007380:	b017      	add	sp, #92	@ 0x5c
 8007382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007386:	9b07      	ldr	r3, [sp, #28]
 8007388:	2b01      	cmp	r3, #1
 800738a:	f77f ae2e 	ble.w	8006fea <_dtoa_r+0x7ba>
 800738e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	2001      	movs	r0, #1
 8007394:	e64d      	b.n	8007032 <_dtoa_r+0x802>
 8007396:	f1bb 0f00 	cmp.w	fp, #0
 800739a:	f77f aed9 	ble.w	8007150 <_dtoa_r+0x920>
 800739e:	4656      	mov	r6, sl
 80073a0:	9802      	ldr	r0, [sp, #8]
 80073a2:	4621      	mov	r1, r4
 80073a4:	f7ff f9bc 	bl	8006720 <quorem>
 80073a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80073ac:	f806 3b01 	strb.w	r3, [r6], #1
 80073b0:	eba6 020a 	sub.w	r2, r6, sl
 80073b4:	4593      	cmp	fp, r2
 80073b6:	ddb4      	ble.n	8007322 <_dtoa_r+0xaf2>
 80073b8:	9902      	ldr	r1, [sp, #8]
 80073ba:	2300      	movs	r3, #0
 80073bc:	220a      	movs	r2, #10
 80073be:	4648      	mov	r0, r9
 80073c0:	f000 f968 	bl	8007694 <__multadd>
 80073c4:	9002      	str	r0, [sp, #8]
 80073c6:	e7eb      	b.n	80073a0 <_dtoa_r+0xb70>
 80073c8:	0800a2f9 	.word	0x0800a2f9
 80073cc:	0800a27d 	.word	0x0800a27d

080073d0 <_free_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4605      	mov	r5, r0
 80073d4:	2900      	cmp	r1, #0
 80073d6:	d041      	beq.n	800745c <_free_r+0x8c>
 80073d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073dc:	1f0c      	subs	r4, r1, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfb8      	it	lt
 80073e2:	18e4      	addlt	r4, r4, r3
 80073e4:	f000 f8e8 	bl	80075b8 <__malloc_lock>
 80073e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007460 <_free_r+0x90>)
 80073ea:	6813      	ldr	r3, [r2, #0]
 80073ec:	b933      	cbnz	r3, 80073fc <_free_r+0x2c>
 80073ee:	6063      	str	r3, [r4, #4]
 80073f0:	6014      	str	r4, [r2, #0]
 80073f2:	4628      	mov	r0, r5
 80073f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073f8:	f000 b8e4 	b.w	80075c4 <__malloc_unlock>
 80073fc:	42a3      	cmp	r3, r4
 80073fe:	d908      	bls.n	8007412 <_free_r+0x42>
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	1821      	adds	r1, r4, r0
 8007404:	428b      	cmp	r3, r1
 8007406:	bf01      	itttt	eq
 8007408:	6819      	ldreq	r1, [r3, #0]
 800740a:	685b      	ldreq	r3, [r3, #4]
 800740c:	1809      	addeq	r1, r1, r0
 800740e:	6021      	streq	r1, [r4, #0]
 8007410:	e7ed      	b.n	80073ee <_free_r+0x1e>
 8007412:	461a      	mov	r2, r3
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	b10b      	cbz	r3, 800741c <_free_r+0x4c>
 8007418:	42a3      	cmp	r3, r4
 800741a:	d9fa      	bls.n	8007412 <_free_r+0x42>
 800741c:	6811      	ldr	r1, [r2, #0]
 800741e:	1850      	adds	r0, r2, r1
 8007420:	42a0      	cmp	r0, r4
 8007422:	d10b      	bne.n	800743c <_free_r+0x6c>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	4401      	add	r1, r0
 8007428:	1850      	adds	r0, r2, r1
 800742a:	4283      	cmp	r3, r0
 800742c:	6011      	str	r1, [r2, #0]
 800742e:	d1e0      	bne.n	80073f2 <_free_r+0x22>
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	6053      	str	r3, [r2, #4]
 8007436:	4408      	add	r0, r1
 8007438:	6010      	str	r0, [r2, #0]
 800743a:	e7da      	b.n	80073f2 <_free_r+0x22>
 800743c:	d902      	bls.n	8007444 <_free_r+0x74>
 800743e:	230c      	movs	r3, #12
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	e7d6      	b.n	80073f2 <_free_r+0x22>
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	1821      	adds	r1, r4, r0
 8007448:	428b      	cmp	r3, r1
 800744a:	bf04      	itt	eq
 800744c:	6819      	ldreq	r1, [r3, #0]
 800744e:	685b      	ldreq	r3, [r3, #4]
 8007450:	6063      	str	r3, [r4, #4]
 8007452:	bf04      	itt	eq
 8007454:	1809      	addeq	r1, r1, r0
 8007456:	6021      	streq	r1, [r4, #0]
 8007458:	6054      	str	r4, [r2, #4]
 800745a:	e7ca      	b.n	80073f2 <_free_r+0x22>
 800745c:	bd38      	pop	{r3, r4, r5, pc}
 800745e:	bf00      	nop
 8007460:	20000500 	.word	0x20000500

08007464 <malloc>:
 8007464:	4b02      	ldr	r3, [pc, #8]	@ (8007470 <malloc+0xc>)
 8007466:	4601      	mov	r1, r0
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	f000 b825 	b.w	80074b8 <_malloc_r>
 800746e:	bf00      	nop
 8007470:	20000030 	.word	0x20000030

08007474 <sbrk_aligned>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	4e0f      	ldr	r6, [pc, #60]	@ (80074b4 <sbrk_aligned+0x40>)
 8007478:	460c      	mov	r4, r1
 800747a:	6831      	ldr	r1, [r6, #0]
 800747c:	4605      	mov	r5, r0
 800747e:	b911      	cbnz	r1, 8007486 <sbrk_aligned+0x12>
 8007480:	f001 fe04 	bl	800908c <_sbrk_r>
 8007484:	6030      	str	r0, [r6, #0]
 8007486:	4621      	mov	r1, r4
 8007488:	4628      	mov	r0, r5
 800748a:	f001 fdff 	bl	800908c <_sbrk_r>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	d103      	bne.n	800749a <sbrk_aligned+0x26>
 8007492:	f04f 34ff 	mov.w	r4, #4294967295
 8007496:	4620      	mov	r0, r4
 8007498:	bd70      	pop	{r4, r5, r6, pc}
 800749a:	1cc4      	adds	r4, r0, #3
 800749c:	f024 0403 	bic.w	r4, r4, #3
 80074a0:	42a0      	cmp	r0, r4
 80074a2:	d0f8      	beq.n	8007496 <sbrk_aligned+0x22>
 80074a4:	1a21      	subs	r1, r4, r0
 80074a6:	4628      	mov	r0, r5
 80074a8:	f001 fdf0 	bl	800908c <_sbrk_r>
 80074ac:	3001      	adds	r0, #1
 80074ae:	d1f2      	bne.n	8007496 <sbrk_aligned+0x22>
 80074b0:	e7ef      	b.n	8007492 <sbrk_aligned+0x1e>
 80074b2:	bf00      	nop
 80074b4:	200004fc 	.word	0x200004fc

080074b8 <_malloc_r>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	1ccd      	adds	r5, r1, #3
 80074be:	f025 0503 	bic.w	r5, r5, #3
 80074c2:	3508      	adds	r5, #8
 80074c4:	2d0c      	cmp	r5, #12
 80074c6:	bf38      	it	cc
 80074c8:	250c      	movcc	r5, #12
 80074ca:	2d00      	cmp	r5, #0
 80074cc:	4606      	mov	r6, r0
 80074ce:	db01      	blt.n	80074d4 <_malloc_r+0x1c>
 80074d0:	42a9      	cmp	r1, r5
 80074d2:	d904      	bls.n	80074de <_malloc_r+0x26>
 80074d4:	230c      	movs	r3, #12
 80074d6:	6033      	str	r3, [r6, #0]
 80074d8:	2000      	movs	r0, #0
 80074da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075b4 <_malloc_r+0xfc>
 80074e2:	f000 f869 	bl	80075b8 <__malloc_lock>
 80074e6:	f8d8 3000 	ldr.w	r3, [r8]
 80074ea:	461c      	mov	r4, r3
 80074ec:	bb44      	cbnz	r4, 8007540 <_malloc_r+0x88>
 80074ee:	4629      	mov	r1, r5
 80074f0:	4630      	mov	r0, r6
 80074f2:	f7ff ffbf 	bl	8007474 <sbrk_aligned>
 80074f6:	1c43      	adds	r3, r0, #1
 80074f8:	4604      	mov	r4, r0
 80074fa:	d158      	bne.n	80075ae <_malloc_r+0xf6>
 80074fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007500:	4627      	mov	r7, r4
 8007502:	2f00      	cmp	r7, #0
 8007504:	d143      	bne.n	800758e <_malloc_r+0xd6>
 8007506:	2c00      	cmp	r4, #0
 8007508:	d04b      	beq.n	80075a2 <_malloc_r+0xea>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	4639      	mov	r1, r7
 800750e:	4630      	mov	r0, r6
 8007510:	eb04 0903 	add.w	r9, r4, r3
 8007514:	f001 fdba 	bl	800908c <_sbrk_r>
 8007518:	4581      	cmp	r9, r0
 800751a:	d142      	bne.n	80075a2 <_malloc_r+0xea>
 800751c:	6821      	ldr	r1, [r4, #0]
 800751e:	1a6d      	subs	r5, r5, r1
 8007520:	4629      	mov	r1, r5
 8007522:	4630      	mov	r0, r6
 8007524:	f7ff ffa6 	bl	8007474 <sbrk_aligned>
 8007528:	3001      	adds	r0, #1
 800752a:	d03a      	beq.n	80075a2 <_malloc_r+0xea>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	442b      	add	r3, r5
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	f8d8 3000 	ldr.w	r3, [r8]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	bb62      	cbnz	r2, 8007594 <_malloc_r+0xdc>
 800753a:	f8c8 7000 	str.w	r7, [r8]
 800753e:	e00f      	b.n	8007560 <_malloc_r+0xa8>
 8007540:	6822      	ldr	r2, [r4, #0]
 8007542:	1b52      	subs	r2, r2, r5
 8007544:	d420      	bmi.n	8007588 <_malloc_r+0xd0>
 8007546:	2a0b      	cmp	r2, #11
 8007548:	d917      	bls.n	800757a <_malloc_r+0xc2>
 800754a:	1961      	adds	r1, r4, r5
 800754c:	42a3      	cmp	r3, r4
 800754e:	6025      	str	r5, [r4, #0]
 8007550:	bf18      	it	ne
 8007552:	6059      	strne	r1, [r3, #4]
 8007554:	6863      	ldr	r3, [r4, #4]
 8007556:	bf08      	it	eq
 8007558:	f8c8 1000 	streq.w	r1, [r8]
 800755c:	5162      	str	r2, [r4, r5]
 800755e:	604b      	str	r3, [r1, #4]
 8007560:	4630      	mov	r0, r6
 8007562:	f000 f82f 	bl	80075c4 <__malloc_unlock>
 8007566:	f104 000b 	add.w	r0, r4, #11
 800756a:	1d23      	adds	r3, r4, #4
 800756c:	f020 0007 	bic.w	r0, r0, #7
 8007570:	1ac2      	subs	r2, r0, r3
 8007572:	bf1c      	itt	ne
 8007574:	1a1b      	subne	r3, r3, r0
 8007576:	50a3      	strne	r3, [r4, r2]
 8007578:	e7af      	b.n	80074da <_malloc_r+0x22>
 800757a:	6862      	ldr	r2, [r4, #4]
 800757c:	42a3      	cmp	r3, r4
 800757e:	bf0c      	ite	eq
 8007580:	f8c8 2000 	streq.w	r2, [r8]
 8007584:	605a      	strne	r2, [r3, #4]
 8007586:	e7eb      	b.n	8007560 <_malloc_r+0xa8>
 8007588:	4623      	mov	r3, r4
 800758a:	6864      	ldr	r4, [r4, #4]
 800758c:	e7ae      	b.n	80074ec <_malloc_r+0x34>
 800758e:	463c      	mov	r4, r7
 8007590:	687f      	ldr	r7, [r7, #4]
 8007592:	e7b6      	b.n	8007502 <_malloc_r+0x4a>
 8007594:	461a      	mov	r2, r3
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	42a3      	cmp	r3, r4
 800759a:	d1fb      	bne.n	8007594 <_malloc_r+0xdc>
 800759c:	2300      	movs	r3, #0
 800759e:	6053      	str	r3, [r2, #4]
 80075a0:	e7de      	b.n	8007560 <_malloc_r+0xa8>
 80075a2:	230c      	movs	r3, #12
 80075a4:	6033      	str	r3, [r6, #0]
 80075a6:	4630      	mov	r0, r6
 80075a8:	f000 f80c 	bl	80075c4 <__malloc_unlock>
 80075ac:	e794      	b.n	80074d8 <_malloc_r+0x20>
 80075ae:	6005      	str	r5, [r0, #0]
 80075b0:	e7d6      	b.n	8007560 <_malloc_r+0xa8>
 80075b2:	bf00      	nop
 80075b4:	20000500 	.word	0x20000500

080075b8 <__malloc_lock>:
 80075b8:	4801      	ldr	r0, [pc, #4]	@ (80075c0 <__malloc_lock+0x8>)
 80075ba:	f7ff b8a8 	b.w	800670e <__retarget_lock_acquire_recursive>
 80075be:	bf00      	nop
 80075c0:	200004f8 	.word	0x200004f8

080075c4 <__malloc_unlock>:
 80075c4:	4801      	ldr	r0, [pc, #4]	@ (80075cc <__malloc_unlock+0x8>)
 80075c6:	f7ff b8a3 	b.w	8006710 <__retarget_lock_release_recursive>
 80075ca:	bf00      	nop
 80075cc:	200004f8 	.word	0x200004f8

080075d0 <_Balloc>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	69c6      	ldr	r6, [r0, #28]
 80075d4:	4604      	mov	r4, r0
 80075d6:	460d      	mov	r5, r1
 80075d8:	b976      	cbnz	r6, 80075f8 <_Balloc+0x28>
 80075da:	2010      	movs	r0, #16
 80075dc:	f7ff ff42 	bl	8007464 <malloc>
 80075e0:	4602      	mov	r2, r0
 80075e2:	61e0      	str	r0, [r4, #28]
 80075e4:	b920      	cbnz	r0, 80075f0 <_Balloc+0x20>
 80075e6:	4b18      	ldr	r3, [pc, #96]	@ (8007648 <_Balloc+0x78>)
 80075e8:	4818      	ldr	r0, [pc, #96]	@ (800764c <_Balloc+0x7c>)
 80075ea:	216b      	movs	r1, #107	@ 0x6b
 80075ec:	f001 fd74 	bl	80090d8 <__assert_func>
 80075f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075f4:	6006      	str	r6, [r0, #0]
 80075f6:	60c6      	str	r6, [r0, #12]
 80075f8:	69e6      	ldr	r6, [r4, #28]
 80075fa:	68f3      	ldr	r3, [r6, #12]
 80075fc:	b183      	cbz	r3, 8007620 <_Balloc+0x50>
 80075fe:	69e3      	ldr	r3, [r4, #28]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007606:	b9b8      	cbnz	r0, 8007638 <_Balloc+0x68>
 8007608:	2101      	movs	r1, #1
 800760a:	fa01 f605 	lsl.w	r6, r1, r5
 800760e:	1d72      	adds	r2, r6, #5
 8007610:	0092      	lsls	r2, r2, #2
 8007612:	4620      	mov	r0, r4
 8007614:	f001 fd7e 	bl	8009114 <_calloc_r>
 8007618:	b160      	cbz	r0, 8007634 <_Balloc+0x64>
 800761a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800761e:	e00e      	b.n	800763e <_Balloc+0x6e>
 8007620:	2221      	movs	r2, #33	@ 0x21
 8007622:	2104      	movs	r1, #4
 8007624:	4620      	mov	r0, r4
 8007626:	f001 fd75 	bl	8009114 <_calloc_r>
 800762a:	69e3      	ldr	r3, [r4, #28]
 800762c:	60f0      	str	r0, [r6, #12]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e4      	bne.n	80075fe <_Balloc+0x2e>
 8007634:	2000      	movs	r0, #0
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	6802      	ldr	r2, [r0, #0]
 800763a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800763e:	2300      	movs	r3, #0
 8007640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007644:	e7f7      	b.n	8007636 <_Balloc+0x66>
 8007646:	bf00      	nop
 8007648:	0800a28a 	.word	0x0800a28a
 800764c:	0800a30a 	.word	0x0800a30a

08007650 <_Bfree>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	69c6      	ldr	r6, [r0, #28]
 8007654:	4605      	mov	r5, r0
 8007656:	460c      	mov	r4, r1
 8007658:	b976      	cbnz	r6, 8007678 <_Bfree+0x28>
 800765a:	2010      	movs	r0, #16
 800765c:	f7ff ff02 	bl	8007464 <malloc>
 8007660:	4602      	mov	r2, r0
 8007662:	61e8      	str	r0, [r5, #28]
 8007664:	b920      	cbnz	r0, 8007670 <_Bfree+0x20>
 8007666:	4b09      	ldr	r3, [pc, #36]	@ (800768c <_Bfree+0x3c>)
 8007668:	4809      	ldr	r0, [pc, #36]	@ (8007690 <_Bfree+0x40>)
 800766a:	218f      	movs	r1, #143	@ 0x8f
 800766c:	f001 fd34 	bl	80090d8 <__assert_func>
 8007670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007674:	6006      	str	r6, [r0, #0]
 8007676:	60c6      	str	r6, [r0, #12]
 8007678:	b13c      	cbz	r4, 800768a <_Bfree+0x3a>
 800767a:	69eb      	ldr	r3, [r5, #28]
 800767c:	6862      	ldr	r2, [r4, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007684:	6021      	str	r1, [r4, #0]
 8007686:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	0800a28a 	.word	0x0800a28a
 8007690:	0800a30a 	.word	0x0800a30a

08007694 <__multadd>:
 8007694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007698:	690d      	ldr	r5, [r1, #16]
 800769a:	4607      	mov	r7, r0
 800769c:	460c      	mov	r4, r1
 800769e:	461e      	mov	r6, r3
 80076a0:	f101 0c14 	add.w	ip, r1, #20
 80076a4:	2000      	movs	r0, #0
 80076a6:	f8dc 3000 	ldr.w	r3, [ip]
 80076aa:	b299      	uxth	r1, r3
 80076ac:	fb02 6101 	mla	r1, r2, r1, r6
 80076b0:	0c1e      	lsrs	r6, r3, #16
 80076b2:	0c0b      	lsrs	r3, r1, #16
 80076b4:	fb02 3306 	mla	r3, r2, r6, r3
 80076b8:	b289      	uxth	r1, r1
 80076ba:	3001      	adds	r0, #1
 80076bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076c0:	4285      	cmp	r5, r0
 80076c2:	f84c 1b04 	str.w	r1, [ip], #4
 80076c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076ca:	dcec      	bgt.n	80076a6 <__multadd+0x12>
 80076cc:	b30e      	cbz	r6, 8007712 <__multadd+0x7e>
 80076ce:	68a3      	ldr	r3, [r4, #8]
 80076d0:	42ab      	cmp	r3, r5
 80076d2:	dc19      	bgt.n	8007708 <__multadd+0x74>
 80076d4:	6861      	ldr	r1, [r4, #4]
 80076d6:	4638      	mov	r0, r7
 80076d8:	3101      	adds	r1, #1
 80076da:	f7ff ff79 	bl	80075d0 <_Balloc>
 80076de:	4680      	mov	r8, r0
 80076e0:	b928      	cbnz	r0, 80076ee <__multadd+0x5a>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007718 <__multadd+0x84>)
 80076e6:	480d      	ldr	r0, [pc, #52]	@ (800771c <__multadd+0x88>)
 80076e8:	21ba      	movs	r1, #186	@ 0xba
 80076ea:	f001 fcf5 	bl	80090d8 <__assert_func>
 80076ee:	6922      	ldr	r2, [r4, #16]
 80076f0:	3202      	adds	r2, #2
 80076f2:	f104 010c 	add.w	r1, r4, #12
 80076f6:	0092      	lsls	r2, r2, #2
 80076f8:	300c      	adds	r0, #12
 80076fa:	f001 fcd7 	bl	80090ac <memcpy>
 80076fe:	4621      	mov	r1, r4
 8007700:	4638      	mov	r0, r7
 8007702:	f7ff ffa5 	bl	8007650 <_Bfree>
 8007706:	4644      	mov	r4, r8
 8007708:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800770c:	3501      	adds	r5, #1
 800770e:	615e      	str	r6, [r3, #20]
 8007710:	6125      	str	r5, [r4, #16]
 8007712:	4620      	mov	r0, r4
 8007714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007718:	0800a2f9 	.word	0x0800a2f9
 800771c:	0800a30a 	.word	0x0800a30a

08007720 <__s2b>:
 8007720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007724:	460c      	mov	r4, r1
 8007726:	4615      	mov	r5, r2
 8007728:	461f      	mov	r7, r3
 800772a:	2209      	movs	r2, #9
 800772c:	3308      	adds	r3, #8
 800772e:	4606      	mov	r6, r0
 8007730:	fb93 f3f2 	sdiv	r3, r3, r2
 8007734:	2100      	movs	r1, #0
 8007736:	2201      	movs	r2, #1
 8007738:	429a      	cmp	r2, r3
 800773a:	db09      	blt.n	8007750 <__s2b+0x30>
 800773c:	4630      	mov	r0, r6
 800773e:	f7ff ff47 	bl	80075d0 <_Balloc>
 8007742:	b940      	cbnz	r0, 8007756 <__s2b+0x36>
 8007744:	4602      	mov	r2, r0
 8007746:	4b19      	ldr	r3, [pc, #100]	@ (80077ac <__s2b+0x8c>)
 8007748:	4819      	ldr	r0, [pc, #100]	@ (80077b0 <__s2b+0x90>)
 800774a:	21d3      	movs	r1, #211	@ 0xd3
 800774c:	f001 fcc4 	bl	80090d8 <__assert_func>
 8007750:	0052      	lsls	r2, r2, #1
 8007752:	3101      	adds	r1, #1
 8007754:	e7f0      	b.n	8007738 <__s2b+0x18>
 8007756:	9b08      	ldr	r3, [sp, #32]
 8007758:	6143      	str	r3, [r0, #20]
 800775a:	2d09      	cmp	r5, #9
 800775c:	f04f 0301 	mov.w	r3, #1
 8007760:	6103      	str	r3, [r0, #16]
 8007762:	dd16      	ble.n	8007792 <__s2b+0x72>
 8007764:	f104 0909 	add.w	r9, r4, #9
 8007768:	46c8      	mov	r8, r9
 800776a:	442c      	add	r4, r5
 800776c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007770:	4601      	mov	r1, r0
 8007772:	3b30      	subs	r3, #48	@ 0x30
 8007774:	220a      	movs	r2, #10
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff ff8c 	bl	8007694 <__multadd>
 800777c:	45a0      	cmp	r8, r4
 800777e:	d1f5      	bne.n	800776c <__s2b+0x4c>
 8007780:	f1a5 0408 	sub.w	r4, r5, #8
 8007784:	444c      	add	r4, r9
 8007786:	1b2d      	subs	r5, r5, r4
 8007788:	1963      	adds	r3, r4, r5
 800778a:	42bb      	cmp	r3, r7
 800778c:	db04      	blt.n	8007798 <__s2b+0x78>
 800778e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007792:	340a      	adds	r4, #10
 8007794:	2509      	movs	r5, #9
 8007796:	e7f6      	b.n	8007786 <__s2b+0x66>
 8007798:	f814 3b01 	ldrb.w	r3, [r4], #1
 800779c:	4601      	mov	r1, r0
 800779e:	3b30      	subs	r3, #48	@ 0x30
 80077a0:	220a      	movs	r2, #10
 80077a2:	4630      	mov	r0, r6
 80077a4:	f7ff ff76 	bl	8007694 <__multadd>
 80077a8:	e7ee      	b.n	8007788 <__s2b+0x68>
 80077aa:	bf00      	nop
 80077ac:	0800a2f9 	.word	0x0800a2f9
 80077b0:	0800a30a 	.word	0x0800a30a

080077b4 <__hi0bits>:
 80077b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077b8:	4603      	mov	r3, r0
 80077ba:	bf36      	itet	cc
 80077bc:	0403      	lslcc	r3, r0, #16
 80077be:	2000      	movcs	r0, #0
 80077c0:	2010      	movcc	r0, #16
 80077c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077c6:	bf3c      	itt	cc
 80077c8:	021b      	lslcc	r3, r3, #8
 80077ca:	3008      	addcc	r0, #8
 80077cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077d0:	bf3c      	itt	cc
 80077d2:	011b      	lslcc	r3, r3, #4
 80077d4:	3004      	addcc	r0, #4
 80077d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077da:	bf3c      	itt	cc
 80077dc:	009b      	lslcc	r3, r3, #2
 80077de:	3002      	addcc	r0, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	db05      	blt.n	80077f0 <__hi0bits+0x3c>
 80077e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80077e8:	f100 0001 	add.w	r0, r0, #1
 80077ec:	bf08      	it	eq
 80077ee:	2020      	moveq	r0, #32
 80077f0:	4770      	bx	lr

080077f2 <__lo0bits>:
 80077f2:	6803      	ldr	r3, [r0, #0]
 80077f4:	4602      	mov	r2, r0
 80077f6:	f013 0007 	ands.w	r0, r3, #7
 80077fa:	d00b      	beq.n	8007814 <__lo0bits+0x22>
 80077fc:	07d9      	lsls	r1, r3, #31
 80077fe:	d421      	bmi.n	8007844 <__lo0bits+0x52>
 8007800:	0798      	lsls	r0, r3, #30
 8007802:	bf49      	itett	mi
 8007804:	085b      	lsrmi	r3, r3, #1
 8007806:	089b      	lsrpl	r3, r3, #2
 8007808:	2001      	movmi	r0, #1
 800780a:	6013      	strmi	r3, [r2, #0]
 800780c:	bf5c      	itt	pl
 800780e:	6013      	strpl	r3, [r2, #0]
 8007810:	2002      	movpl	r0, #2
 8007812:	4770      	bx	lr
 8007814:	b299      	uxth	r1, r3
 8007816:	b909      	cbnz	r1, 800781c <__lo0bits+0x2a>
 8007818:	0c1b      	lsrs	r3, r3, #16
 800781a:	2010      	movs	r0, #16
 800781c:	b2d9      	uxtb	r1, r3
 800781e:	b909      	cbnz	r1, 8007824 <__lo0bits+0x32>
 8007820:	3008      	adds	r0, #8
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	0719      	lsls	r1, r3, #28
 8007826:	bf04      	itt	eq
 8007828:	091b      	lsreq	r3, r3, #4
 800782a:	3004      	addeq	r0, #4
 800782c:	0799      	lsls	r1, r3, #30
 800782e:	bf04      	itt	eq
 8007830:	089b      	lsreq	r3, r3, #2
 8007832:	3002      	addeq	r0, #2
 8007834:	07d9      	lsls	r1, r3, #31
 8007836:	d403      	bmi.n	8007840 <__lo0bits+0x4e>
 8007838:	085b      	lsrs	r3, r3, #1
 800783a:	f100 0001 	add.w	r0, r0, #1
 800783e:	d003      	beq.n	8007848 <__lo0bits+0x56>
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	4770      	bx	lr
 8007844:	2000      	movs	r0, #0
 8007846:	4770      	bx	lr
 8007848:	2020      	movs	r0, #32
 800784a:	4770      	bx	lr

0800784c <__i2b>:
 800784c:	b510      	push	{r4, lr}
 800784e:	460c      	mov	r4, r1
 8007850:	2101      	movs	r1, #1
 8007852:	f7ff febd 	bl	80075d0 <_Balloc>
 8007856:	4602      	mov	r2, r0
 8007858:	b928      	cbnz	r0, 8007866 <__i2b+0x1a>
 800785a:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <__i2b+0x24>)
 800785c:	4805      	ldr	r0, [pc, #20]	@ (8007874 <__i2b+0x28>)
 800785e:	f240 1145 	movw	r1, #325	@ 0x145
 8007862:	f001 fc39 	bl	80090d8 <__assert_func>
 8007866:	2301      	movs	r3, #1
 8007868:	6144      	str	r4, [r0, #20]
 800786a:	6103      	str	r3, [r0, #16]
 800786c:	bd10      	pop	{r4, pc}
 800786e:	bf00      	nop
 8007870:	0800a2f9 	.word	0x0800a2f9
 8007874:	0800a30a 	.word	0x0800a30a

08007878 <__multiply>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	4617      	mov	r7, r2
 800787e:	690a      	ldr	r2, [r1, #16]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	429a      	cmp	r2, r3
 8007884:	bfa8      	it	ge
 8007886:	463b      	movge	r3, r7
 8007888:	4689      	mov	r9, r1
 800788a:	bfa4      	itt	ge
 800788c:	460f      	movge	r7, r1
 800788e:	4699      	movge	r9, r3
 8007890:	693d      	ldr	r5, [r7, #16]
 8007892:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	eb05 060a 	add.w	r6, r5, sl
 800789e:	42b3      	cmp	r3, r6
 80078a0:	b085      	sub	sp, #20
 80078a2:	bfb8      	it	lt
 80078a4:	3101      	addlt	r1, #1
 80078a6:	f7ff fe93 	bl	80075d0 <_Balloc>
 80078aa:	b930      	cbnz	r0, 80078ba <__multiply+0x42>
 80078ac:	4602      	mov	r2, r0
 80078ae:	4b41      	ldr	r3, [pc, #260]	@ (80079b4 <__multiply+0x13c>)
 80078b0:	4841      	ldr	r0, [pc, #260]	@ (80079b8 <__multiply+0x140>)
 80078b2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078b6:	f001 fc0f 	bl	80090d8 <__assert_func>
 80078ba:	f100 0414 	add.w	r4, r0, #20
 80078be:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80078c2:	4623      	mov	r3, r4
 80078c4:	2200      	movs	r2, #0
 80078c6:	4573      	cmp	r3, lr
 80078c8:	d320      	bcc.n	800790c <__multiply+0x94>
 80078ca:	f107 0814 	add.w	r8, r7, #20
 80078ce:	f109 0114 	add.w	r1, r9, #20
 80078d2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80078d6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80078da:	9302      	str	r3, [sp, #8]
 80078dc:	1beb      	subs	r3, r5, r7
 80078de:	3b15      	subs	r3, #21
 80078e0:	f023 0303 	bic.w	r3, r3, #3
 80078e4:	3304      	adds	r3, #4
 80078e6:	3715      	adds	r7, #21
 80078e8:	42bd      	cmp	r5, r7
 80078ea:	bf38      	it	cc
 80078ec:	2304      	movcc	r3, #4
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	9b02      	ldr	r3, [sp, #8]
 80078f2:	9103      	str	r1, [sp, #12]
 80078f4:	428b      	cmp	r3, r1
 80078f6:	d80c      	bhi.n	8007912 <__multiply+0x9a>
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	dd03      	ble.n	8007904 <__multiply+0x8c>
 80078fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007900:	2b00      	cmp	r3, #0
 8007902:	d055      	beq.n	80079b0 <__multiply+0x138>
 8007904:	6106      	str	r6, [r0, #16]
 8007906:	b005      	add	sp, #20
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	f843 2b04 	str.w	r2, [r3], #4
 8007910:	e7d9      	b.n	80078c6 <__multiply+0x4e>
 8007912:	f8b1 a000 	ldrh.w	sl, [r1]
 8007916:	f1ba 0f00 	cmp.w	sl, #0
 800791a:	d01f      	beq.n	800795c <__multiply+0xe4>
 800791c:	46c4      	mov	ip, r8
 800791e:	46a1      	mov	r9, r4
 8007920:	2700      	movs	r7, #0
 8007922:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007926:	f8d9 3000 	ldr.w	r3, [r9]
 800792a:	fa1f fb82 	uxth.w	fp, r2
 800792e:	b29b      	uxth	r3, r3
 8007930:	fb0a 330b 	mla	r3, sl, fp, r3
 8007934:	443b      	add	r3, r7
 8007936:	f8d9 7000 	ldr.w	r7, [r9]
 800793a:	0c12      	lsrs	r2, r2, #16
 800793c:	0c3f      	lsrs	r7, r7, #16
 800793e:	fb0a 7202 	mla	r2, sl, r2, r7
 8007942:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007946:	b29b      	uxth	r3, r3
 8007948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800794c:	4565      	cmp	r5, ip
 800794e:	f849 3b04 	str.w	r3, [r9], #4
 8007952:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007956:	d8e4      	bhi.n	8007922 <__multiply+0xaa>
 8007958:	9b01      	ldr	r3, [sp, #4]
 800795a:	50e7      	str	r7, [r4, r3]
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007962:	3104      	adds	r1, #4
 8007964:	f1b9 0f00 	cmp.w	r9, #0
 8007968:	d020      	beq.n	80079ac <__multiply+0x134>
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	4647      	mov	r7, r8
 800796e:	46a4      	mov	ip, r4
 8007970:	f04f 0a00 	mov.w	sl, #0
 8007974:	f8b7 b000 	ldrh.w	fp, [r7]
 8007978:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800797c:	fb09 220b 	mla	r2, r9, fp, r2
 8007980:	4452      	add	r2, sl
 8007982:	b29b      	uxth	r3, r3
 8007984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007988:	f84c 3b04 	str.w	r3, [ip], #4
 800798c:	f857 3b04 	ldr.w	r3, [r7], #4
 8007990:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007994:	f8bc 3000 	ldrh.w	r3, [ip]
 8007998:	fb09 330a 	mla	r3, r9, sl, r3
 800799c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80079a0:	42bd      	cmp	r5, r7
 80079a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079a6:	d8e5      	bhi.n	8007974 <__multiply+0xfc>
 80079a8:	9a01      	ldr	r2, [sp, #4]
 80079aa:	50a3      	str	r3, [r4, r2]
 80079ac:	3404      	adds	r4, #4
 80079ae:	e79f      	b.n	80078f0 <__multiply+0x78>
 80079b0:	3e01      	subs	r6, #1
 80079b2:	e7a1      	b.n	80078f8 <__multiply+0x80>
 80079b4:	0800a2f9 	.word	0x0800a2f9
 80079b8:	0800a30a 	.word	0x0800a30a

080079bc <__pow5mult>:
 80079bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c0:	4615      	mov	r5, r2
 80079c2:	f012 0203 	ands.w	r2, r2, #3
 80079c6:	4607      	mov	r7, r0
 80079c8:	460e      	mov	r6, r1
 80079ca:	d007      	beq.n	80079dc <__pow5mult+0x20>
 80079cc:	4c25      	ldr	r4, [pc, #148]	@ (8007a64 <__pow5mult+0xa8>)
 80079ce:	3a01      	subs	r2, #1
 80079d0:	2300      	movs	r3, #0
 80079d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079d6:	f7ff fe5d 	bl	8007694 <__multadd>
 80079da:	4606      	mov	r6, r0
 80079dc:	10ad      	asrs	r5, r5, #2
 80079de:	d03d      	beq.n	8007a5c <__pow5mult+0xa0>
 80079e0:	69fc      	ldr	r4, [r7, #28]
 80079e2:	b97c      	cbnz	r4, 8007a04 <__pow5mult+0x48>
 80079e4:	2010      	movs	r0, #16
 80079e6:	f7ff fd3d 	bl	8007464 <malloc>
 80079ea:	4602      	mov	r2, r0
 80079ec:	61f8      	str	r0, [r7, #28]
 80079ee:	b928      	cbnz	r0, 80079fc <__pow5mult+0x40>
 80079f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a68 <__pow5mult+0xac>)
 80079f2:	481e      	ldr	r0, [pc, #120]	@ (8007a6c <__pow5mult+0xb0>)
 80079f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80079f8:	f001 fb6e 	bl	80090d8 <__assert_func>
 80079fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a00:	6004      	str	r4, [r0, #0]
 8007a02:	60c4      	str	r4, [r0, #12]
 8007a04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a0c:	b94c      	cbnz	r4, 8007a22 <__pow5mult+0x66>
 8007a0e:	f240 2171 	movw	r1, #625	@ 0x271
 8007a12:	4638      	mov	r0, r7
 8007a14:	f7ff ff1a 	bl	800784c <__i2b>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a1e:	4604      	mov	r4, r0
 8007a20:	6003      	str	r3, [r0, #0]
 8007a22:	f04f 0900 	mov.w	r9, #0
 8007a26:	07eb      	lsls	r3, r5, #31
 8007a28:	d50a      	bpl.n	8007a40 <__pow5mult+0x84>
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	4638      	mov	r0, r7
 8007a30:	f7ff ff22 	bl	8007878 <__multiply>
 8007a34:	4631      	mov	r1, r6
 8007a36:	4680      	mov	r8, r0
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7ff fe09 	bl	8007650 <_Bfree>
 8007a3e:	4646      	mov	r6, r8
 8007a40:	106d      	asrs	r5, r5, #1
 8007a42:	d00b      	beq.n	8007a5c <__pow5mult+0xa0>
 8007a44:	6820      	ldr	r0, [r4, #0]
 8007a46:	b938      	cbnz	r0, 8007a58 <__pow5mult+0x9c>
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f7ff ff13 	bl	8007878 <__multiply>
 8007a52:	6020      	str	r0, [r4, #0]
 8007a54:	f8c0 9000 	str.w	r9, [r0]
 8007a58:	4604      	mov	r4, r0
 8007a5a:	e7e4      	b.n	8007a26 <__pow5mult+0x6a>
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a62:	bf00      	nop
 8007a64:	0800a41c 	.word	0x0800a41c
 8007a68:	0800a28a 	.word	0x0800a28a
 8007a6c:	0800a30a 	.word	0x0800a30a

08007a70 <__lshift>:
 8007a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	460c      	mov	r4, r1
 8007a76:	6849      	ldr	r1, [r1, #4]
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a7e:	68a3      	ldr	r3, [r4, #8]
 8007a80:	4607      	mov	r7, r0
 8007a82:	4691      	mov	r9, r2
 8007a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a88:	f108 0601 	add.w	r6, r8, #1
 8007a8c:	42b3      	cmp	r3, r6
 8007a8e:	db0b      	blt.n	8007aa8 <__lshift+0x38>
 8007a90:	4638      	mov	r0, r7
 8007a92:	f7ff fd9d 	bl	80075d0 <_Balloc>
 8007a96:	4605      	mov	r5, r0
 8007a98:	b948      	cbnz	r0, 8007aae <__lshift+0x3e>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	4b28      	ldr	r3, [pc, #160]	@ (8007b40 <__lshift+0xd0>)
 8007a9e:	4829      	ldr	r0, [pc, #164]	@ (8007b44 <__lshift+0xd4>)
 8007aa0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007aa4:	f001 fb18 	bl	80090d8 <__assert_func>
 8007aa8:	3101      	adds	r1, #1
 8007aaa:	005b      	lsls	r3, r3, #1
 8007aac:	e7ee      	b.n	8007a8c <__lshift+0x1c>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f100 0114 	add.w	r1, r0, #20
 8007ab4:	f100 0210 	add.w	r2, r0, #16
 8007ab8:	4618      	mov	r0, r3
 8007aba:	4553      	cmp	r3, sl
 8007abc:	db33      	blt.n	8007b26 <__lshift+0xb6>
 8007abe:	6920      	ldr	r0, [r4, #16]
 8007ac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ac4:	f104 0314 	add.w	r3, r4, #20
 8007ac8:	f019 091f 	ands.w	r9, r9, #31
 8007acc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ad0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ad4:	d02b      	beq.n	8007b2e <__lshift+0xbe>
 8007ad6:	f1c9 0e20 	rsb	lr, r9, #32
 8007ada:	468a      	mov	sl, r1
 8007adc:	2200      	movs	r2, #0
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	fa00 f009 	lsl.w	r0, r0, r9
 8007ae4:	4310      	orrs	r0, r2
 8007ae6:	f84a 0b04 	str.w	r0, [sl], #4
 8007aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aee:	459c      	cmp	ip, r3
 8007af0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007af4:	d8f3      	bhi.n	8007ade <__lshift+0x6e>
 8007af6:	ebac 0304 	sub.w	r3, ip, r4
 8007afa:	3b15      	subs	r3, #21
 8007afc:	f023 0303 	bic.w	r3, r3, #3
 8007b00:	3304      	adds	r3, #4
 8007b02:	f104 0015 	add.w	r0, r4, #21
 8007b06:	4560      	cmp	r0, ip
 8007b08:	bf88      	it	hi
 8007b0a:	2304      	movhi	r3, #4
 8007b0c:	50ca      	str	r2, [r1, r3]
 8007b0e:	b10a      	cbz	r2, 8007b14 <__lshift+0xa4>
 8007b10:	f108 0602 	add.w	r6, r8, #2
 8007b14:	3e01      	subs	r6, #1
 8007b16:	4638      	mov	r0, r7
 8007b18:	612e      	str	r6, [r5, #16]
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	f7ff fd98 	bl	8007650 <_Bfree>
 8007b20:	4628      	mov	r0, r5
 8007b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b26:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	e7c5      	b.n	8007aba <__lshift+0x4a>
 8007b2e:	3904      	subs	r1, #4
 8007b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b34:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b38:	459c      	cmp	ip, r3
 8007b3a:	d8f9      	bhi.n	8007b30 <__lshift+0xc0>
 8007b3c:	e7ea      	b.n	8007b14 <__lshift+0xa4>
 8007b3e:	bf00      	nop
 8007b40:	0800a2f9 	.word	0x0800a2f9
 8007b44:	0800a30a 	.word	0x0800a30a

08007b48 <__mcmp>:
 8007b48:	690a      	ldr	r2, [r1, #16]
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6900      	ldr	r0, [r0, #16]
 8007b4e:	1a80      	subs	r0, r0, r2
 8007b50:	b530      	push	{r4, r5, lr}
 8007b52:	d10e      	bne.n	8007b72 <__mcmp+0x2a>
 8007b54:	3314      	adds	r3, #20
 8007b56:	3114      	adds	r1, #20
 8007b58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b68:	4295      	cmp	r5, r2
 8007b6a:	d003      	beq.n	8007b74 <__mcmp+0x2c>
 8007b6c:	d205      	bcs.n	8007b7a <__mcmp+0x32>
 8007b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b72:	bd30      	pop	{r4, r5, pc}
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	d3f3      	bcc.n	8007b60 <__mcmp+0x18>
 8007b78:	e7fb      	b.n	8007b72 <__mcmp+0x2a>
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	e7f9      	b.n	8007b72 <__mcmp+0x2a>
	...

08007b80 <__mdiff>:
 8007b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	4689      	mov	r9, r1
 8007b86:	4606      	mov	r6, r0
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4648      	mov	r0, r9
 8007b8c:	4614      	mov	r4, r2
 8007b8e:	f7ff ffdb 	bl	8007b48 <__mcmp>
 8007b92:	1e05      	subs	r5, r0, #0
 8007b94:	d112      	bne.n	8007bbc <__mdiff+0x3c>
 8007b96:	4629      	mov	r1, r5
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff fd19 	bl	80075d0 <_Balloc>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	b928      	cbnz	r0, 8007bae <__mdiff+0x2e>
 8007ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ca0 <__mdiff+0x120>)
 8007ba4:	f240 2137 	movw	r1, #567	@ 0x237
 8007ba8:	483e      	ldr	r0, [pc, #248]	@ (8007ca4 <__mdiff+0x124>)
 8007baa:	f001 fa95 	bl	80090d8 <__assert_func>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	b003      	add	sp, #12
 8007bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbc:	bfbc      	itt	lt
 8007bbe:	464b      	movlt	r3, r9
 8007bc0:	46a1      	movlt	r9, r4
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007bc8:	bfba      	itte	lt
 8007bca:	461c      	movlt	r4, r3
 8007bcc:	2501      	movlt	r5, #1
 8007bce:	2500      	movge	r5, #0
 8007bd0:	f7ff fcfe 	bl	80075d0 <_Balloc>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	b918      	cbnz	r0, 8007be0 <__mdiff+0x60>
 8007bd8:	4b31      	ldr	r3, [pc, #196]	@ (8007ca0 <__mdiff+0x120>)
 8007bda:	f240 2145 	movw	r1, #581	@ 0x245
 8007bde:	e7e3      	b.n	8007ba8 <__mdiff+0x28>
 8007be0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007be4:	6926      	ldr	r6, [r4, #16]
 8007be6:	60c5      	str	r5, [r0, #12]
 8007be8:	f109 0310 	add.w	r3, r9, #16
 8007bec:	f109 0514 	add.w	r5, r9, #20
 8007bf0:	f104 0e14 	add.w	lr, r4, #20
 8007bf4:	f100 0b14 	add.w	fp, r0, #20
 8007bf8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007bfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	46d9      	mov	r9, fp
 8007c04:	f04f 0c00 	mov.w	ip, #0
 8007c08:	9b01      	ldr	r3, [sp, #4]
 8007c0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	fa1f f38a 	uxth.w	r3, sl
 8007c18:	4619      	mov	r1, r3
 8007c1a:	b283      	uxth	r3, r0
 8007c1c:	1acb      	subs	r3, r1, r3
 8007c1e:	0c00      	lsrs	r0, r0, #16
 8007c20:	4463      	add	r3, ip
 8007c22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c30:	4576      	cmp	r6, lr
 8007c32:	f849 3b04 	str.w	r3, [r9], #4
 8007c36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c3a:	d8e5      	bhi.n	8007c08 <__mdiff+0x88>
 8007c3c:	1b33      	subs	r3, r6, r4
 8007c3e:	3b15      	subs	r3, #21
 8007c40:	f023 0303 	bic.w	r3, r3, #3
 8007c44:	3415      	adds	r4, #21
 8007c46:	3304      	adds	r3, #4
 8007c48:	42a6      	cmp	r6, r4
 8007c4a:	bf38      	it	cc
 8007c4c:	2304      	movcc	r3, #4
 8007c4e:	441d      	add	r5, r3
 8007c50:	445b      	add	r3, fp
 8007c52:	461e      	mov	r6, r3
 8007c54:	462c      	mov	r4, r5
 8007c56:	4544      	cmp	r4, r8
 8007c58:	d30e      	bcc.n	8007c78 <__mdiff+0xf8>
 8007c5a:	f108 0103 	add.w	r1, r8, #3
 8007c5e:	1b49      	subs	r1, r1, r5
 8007c60:	f021 0103 	bic.w	r1, r1, #3
 8007c64:	3d03      	subs	r5, #3
 8007c66:	45a8      	cmp	r8, r5
 8007c68:	bf38      	it	cc
 8007c6a:	2100      	movcc	r1, #0
 8007c6c:	440b      	add	r3, r1
 8007c6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c72:	b191      	cbz	r1, 8007c9a <__mdiff+0x11a>
 8007c74:	6117      	str	r7, [r2, #16]
 8007c76:	e79d      	b.n	8007bb4 <__mdiff+0x34>
 8007c78:	f854 1b04 	ldr.w	r1, [r4], #4
 8007c7c:	46e6      	mov	lr, ip
 8007c7e:	0c08      	lsrs	r0, r1, #16
 8007c80:	fa1c fc81 	uxtah	ip, ip, r1
 8007c84:	4471      	add	r1, lr
 8007c86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007c8a:	b289      	uxth	r1, r1
 8007c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c90:	f846 1b04 	str.w	r1, [r6], #4
 8007c94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c98:	e7dd      	b.n	8007c56 <__mdiff+0xd6>
 8007c9a:	3f01      	subs	r7, #1
 8007c9c:	e7e7      	b.n	8007c6e <__mdiff+0xee>
 8007c9e:	bf00      	nop
 8007ca0:	0800a2f9 	.word	0x0800a2f9
 8007ca4:	0800a30a 	.word	0x0800a30a

08007ca8 <__ulp>:
 8007ca8:	b082      	sub	sp, #8
 8007caa:	ed8d 0b00 	vstr	d0, [sp]
 8007cae:	9a01      	ldr	r2, [sp, #4]
 8007cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf0 <__ulp+0x48>)
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc08      	bgt.n	8007cce <__ulp+0x26>
 8007cbc:	425b      	negs	r3, r3
 8007cbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007cc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007cc6:	da04      	bge.n	8007cd2 <__ulp+0x2a>
 8007cc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007ccc:	4113      	asrs	r3, r2
 8007cce:	2200      	movs	r2, #0
 8007cd0:	e008      	b.n	8007ce4 <__ulp+0x3c>
 8007cd2:	f1a2 0314 	sub.w	r3, r2, #20
 8007cd6:	2b1e      	cmp	r3, #30
 8007cd8:	bfda      	itte	le
 8007cda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007cde:	40da      	lsrle	r2, r3
 8007ce0:	2201      	movgt	r2, #1
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	ec41 0b10 	vmov	d0, r0, r1
 8007cec:	b002      	add	sp, #8
 8007cee:	4770      	bx	lr
 8007cf0:	7ff00000 	.word	0x7ff00000

08007cf4 <__b2d>:
 8007cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf8:	6906      	ldr	r6, [r0, #16]
 8007cfa:	f100 0814 	add.w	r8, r0, #20
 8007cfe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007d02:	1f37      	subs	r7, r6, #4
 8007d04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007d08:	4610      	mov	r0, r2
 8007d0a:	f7ff fd53 	bl	80077b4 <__hi0bits>
 8007d0e:	f1c0 0320 	rsb	r3, r0, #32
 8007d12:	280a      	cmp	r0, #10
 8007d14:	600b      	str	r3, [r1, #0]
 8007d16:	491b      	ldr	r1, [pc, #108]	@ (8007d84 <__b2d+0x90>)
 8007d18:	dc15      	bgt.n	8007d46 <__b2d+0x52>
 8007d1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007d1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007d22:	45b8      	cmp	r8, r7
 8007d24:	ea43 0501 	orr.w	r5, r3, r1
 8007d28:	bf34      	ite	cc
 8007d2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007d2e:	2300      	movcs	r3, #0
 8007d30:	3015      	adds	r0, #21
 8007d32:	fa02 f000 	lsl.w	r0, r2, r0
 8007d36:	fa23 f30c 	lsr.w	r3, r3, ip
 8007d3a:	4303      	orrs	r3, r0
 8007d3c:	461c      	mov	r4, r3
 8007d3e:	ec45 4b10 	vmov	d0, r4, r5
 8007d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d46:	45b8      	cmp	r8, r7
 8007d48:	bf3a      	itte	cc
 8007d4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007d4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007d52:	2300      	movcs	r3, #0
 8007d54:	380b      	subs	r0, #11
 8007d56:	d012      	beq.n	8007d7e <__b2d+0x8a>
 8007d58:	f1c0 0120 	rsb	r1, r0, #32
 8007d5c:	fa23 f401 	lsr.w	r4, r3, r1
 8007d60:	4082      	lsls	r2, r0
 8007d62:	4322      	orrs	r2, r4
 8007d64:	4547      	cmp	r7, r8
 8007d66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007d6a:	bf8c      	ite	hi
 8007d6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007d70:	2200      	movls	r2, #0
 8007d72:	4083      	lsls	r3, r0
 8007d74:	40ca      	lsrs	r2, r1
 8007d76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	e7de      	b.n	8007d3c <__b2d+0x48>
 8007d7e:	ea42 0501 	orr.w	r5, r2, r1
 8007d82:	e7db      	b.n	8007d3c <__b2d+0x48>
 8007d84:	3ff00000 	.word	0x3ff00000

08007d88 <__d2b>:
 8007d88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d8c:	460f      	mov	r7, r1
 8007d8e:	2101      	movs	r1, #1
 8007d90:	ec59 8b10 	vmov	r8, r9, d0
 8007d94:	4616      	mov	r6, r2
 8007d96:	f7ff fc1b 	bl	80075d0 <_Balloc>
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	b930      	cbnz	r0, 8007dac <__d2b+0x24>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	4b23      	ldr	r3, [pc, #140]	@ (8007e30 <__d2b+0xa8>)
 8007da2:	4824      	ldr	r0, [pc, #144]	@ (8007e34 <__d2b+0xac>)
 8007da4:	f240 310f 	movw	r1, #783	@ 0x30f
 8007da8:	f001 f996 	bl	80090d8 <__assert_func>
 8007dac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007db0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007db4:	b10d      	cbz	r5, 8007dba <__d2b+0x32>
 8007db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	f1b8 0300 	subs.w	r3, r8, #0
 8007dc0:	d023      	beq.n	8007e0a <__d2b+0x82>
 8007dc2:	4668      	mov	r0, sp
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	f7ff fd14 	bl	80077f2 <__lo0bits>
 8007dca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007dce:	b1d0      	cbz	r0, 8007e06 <__d2b+0x7e>
 8007dd0:	f1c0 0320 	rsb	r3, r0, #32
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	40c2      	lsrs	r2, r0
 8007ddc:	6163      	str	r3, [r4, #20]
 8007dde:	9201      	str	r2, [sp, #4]
 8007de0:	9b01      	ldr	r3, [sp, #4]
 8007de2:	61a3      	str	r3, [r4, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bf0c      	ite	eq
 8007de8:	2201      	moveq	r2, #1
 8007dea:	2202      	movne	r2, #2
 8007dec:	6122      	str	r2, [r4, #16]
 8007dee:	b1a5      	cbz	r5, 8007e1a <__d2b+0x92>
 8007df0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007df4:	4405      	add	r5, r0
 8007df6:	603d      	str	r5, [r7, #0]
 8007df8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007dfc:	6030      	str	r0, [r6, #0]
 8007dfe:	4620      	mov	r0, r4
 8007e00:	b003      	add	sp, #12
 8007e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e06:	6161      	str	r1, [r4, #20]
 8007e08:	e7ea      	b.n	8007de0 <__d2b+0x58>
 8007e0a:	a801      	add	r0, sp, #4
 8007e0c:	f7ff fcf1 	bl	80077f2 <__lo0bits>
 8007e10:	9b01      	ldr	r3, [sp, #4]
 8007e12:	6163      	str	r3, [r4, #20]
 8007e14:	3020      	adds	r0, #32
 8007e16:	2201      	movs	r2, #1
 8007e18:	e7e8      	b.n	8007dec <__d2b+0x64>
 8007e1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e22:	6038      	str	r0, [r7, #0]
 8007e24:	6918      	ldr	r0, [r3, #16]
 8007e26:	f7ff fcc5 	bl	80077b4 <__hi0bits>
 8007e2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e2e:	e7e5      	b.n	8007dfc <__d2b+0x74>
 8007e30:	0800a2f9 	.word	0x0800a2f9
 8007e34:	0800a30a 	.word	0x0800a30a

08007e38 <__ratio>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	b085      	sub	sp, #20
 8007e3e:	e9cd 1000 	strd	r1, r0, [sp]
 8007e42:	a902      	add	r1, sp, #8
 8007e44:	f7ff ff56 	bl	8007cf4 <__b2d>
 8007e48:	9800      	ldr	r0, [sp, #0]
 8007e4a:	a903      	add	r1, sp, #12
 8007e4c:	ec55 4b10 	vmov	r4, r5, d0
 8007e50:	f7ff ff50 	bl	8007cf4 <__b2d>
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	6919      	ldr	r1, [r3, #16]
 8007e58:	9b00      	ldr	r3, [sp, #0]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	1ac9      	subs	r1, r1, r3
 8007e5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007e62:	1a9b      	subs	r3, r3, r2
 8007e64:	ec5b ab10 	vmov	sl, fp, d0
 8007e68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bfce      	itee	gt
 8007e70:	462a      	movgt	r2, r5
 8007e72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007e76:	465a      	movle	r2, fp
 8007e78:	462f      	mov	r7, r5
 8007e7a:	46d9      	mov	r9, fp
 8007e7c:	bfcc      	ite	gt
 8007e7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007e82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007e86:	464b      	mov	r3, r9
 8007e88:	4652      	mov	r2, sl
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	f7f8 fcdd 	bl	800084c <__aeabi_ddiv>
 8007e92:	ec41 0b10 	vmov	d0, r0, r1
 8007e96:	b005      	add	sp, #20
 8007e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e9c <__copybits>:
 8007e9c:	3901      	subs	r1, #1
 8007e9e:	b570      	push	{r4, r5, r6, lr}
 8007ea0:	1149      	asrs	r1, r1, #5
 8007ea2:	6914      	ldr	r4, [r2, #16]
 8007ea4:	3101      	adds	r1, #1
 8007ea6:	f102 0314 	add.w	r3, r2, #20
 8007eaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007eae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007eb2:	1f05      	subs	r5, r0, #4
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	d30c      	bcc.n	8007ed2 <__copybits+0x36>
 8007eb8:	1aa3      	subs	r3, r4, r2
 8007eba:	3b11      	subs	r3, #17
 8007ebc:	f023 0303 	bic.w	r3, r3, #3
 8007ec0:	3211      	adds	r2, #17
 8007ec2:	42a2      	cmp	r2, r4
 8007ec4:	bf88      	it	hi
 8007ec6:	2300      	movhi	r3, #0
 8007ec8:	4418      	add	r0, r3
 8007eca:	2300      	movs	r3, #0
 8007ecc:	4288      	cmp	r0, r1
 8007ece:	d305      	bcc.n	8007edc <__copybits+0x40>
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
 8007ed2:	f853 6b04 	ldr.w	r6, [r3], #4
 8007ed6:	f845 6f04 	str.w	r6, [r5, #4]!
 8007eda:	e7eb      	b.n	8007eb4 <__copybits+0x18>
 8007edc:	f840 3b04 	str.w	r3, [r0], #4
 8007ee0:	e7f4      	b.n	8007ecc <__copybits+0x30>

08007ee2 <__any_on>:
 8007ee2:	f100 0214 	add.w	r2, r0, #20
 8007ee6:	6900      	ldr	r0, [r0, #16]
 8007ee8:	114b      	asrs	r3, r1, #5
 8007eea:	4298      	cmp	r0, r3
 8007eec:	b510      	push	{r4, lr}
 8007eee:	db11      	blt.n	8007f14 <__any_on+0x32>
 8007ef0:	dd0a      	ble.n	8007f08 <__any_on+0x26>
 8007ef2:	f011 011f 	ands.w	r1, r1, #31
 8007ef6:	d007      	beq.n	8007f08 <__any_on+0x26>
 8007ef8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007efc:	fa24 f001 	lsr.w	r0, r4, r1
 8007f00:	fa00 f101 	lsl.w	r1, r0, r1
 8007f04:	428c      	cmp	r4, r1
 8007f06:	d10b      	bne.n	8007f20 <__any_on+0x3e>
 8007f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d803      	bhi.n	8007f18 <__any_on+0x36>
 8007f10:	2000      	movs	r0, #0
 8007f12:	bd10      	pop	{r4, pc}
 8007f14:	4603      	mov	r3, r0
 8007f16:	e7f7      	b.n	8007f08 <__any_on+0x26>
 8007f18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f1c:	2900      	cmp	r1, #0
 8007f1e:	d0f5      	beq.n	8007f0c <__any_on+0x2a>
 8007f20:	2001      	movs	r0, #1
 8007f22:	e7f6      	b.n	8007f12 <__any_on+0x30>

08007f24 <sulp>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	4604      	mov	r4, r0
 8007f28:	460d      	mov	r5, r1
 8007f2a:	ec45 4b10 	vmov	d0, r4, r5
 8007f2e:	4616      	mov	r6, r2
 8007f30:	f7ff feba 	bl	8007ca8 <__ulp>
 8007f34:	ec51 0b10 	vmov	r0, r1, d0
 8007f38:	b17e      	cbz	r6, 8007f5a <sulp+0x36>
 8007f3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dd09      	ble.n	8007f5a <sulp+0x36>
 8007f46:	051b      	lsls	r3, r3, #20
 8007f48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007f4c:	2400      	movs	r4, #0
 8007f4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007f52:	4622      	mov	r2, r4
 8007f54:	462b      	mov	r3, r5
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	ec41 0b10 	vmov	d0, r0, r1
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}

08007f60 <_strtod_l>:
 8007f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	b09f      	sub	sp, #124	@ 0x7c
 8007f66:	460c      	mov	r4, r1
 8007f68:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007f6e:	9005      	str	r0, [sp, #20]
 8007f70:	f04f 0a00 	mov.w	sl, #0
 8007f74:	f04f 0b00 	mov.w	fp, #0
 8007f78:	460a      	mov	r2, r1
 8007f7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f7c:	7811      	ldrb	r1, [r2, #0]
 8007f7e:	292b      	cmp	r1, #43	@ 0x2b
 8007f80:	d04a      	beq.n	8008018 <_strtod_l+0xb8>
 8007f82:	d838      	bhi.n	8007ff6 <_strtod_l+0x96>
 8007f84:	290d      	cmp	r1, #13
 8007f86:	d832      	bhi.n	8007fee <_strtod_l+0x8e>
 8007f88:	2908      	cmp	r1, #8
 8007f8a:	d832      	bhi.n	8007ff2 <_strtod_l+0x92>
 8007f8c:	2900      	cmp	r1, #0
 8007f8e:	d03b      	beq.n	8008008 <_strtod_l+0xa8>
 8007f90:	2200      	movs	r2, #0
 8007f92:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007f96:	782a      	ldrb	r2, [r5, #0]
 8007f98:	2a30      	cmp	r2, #48	@ 0x30
 8007f9a:	f040 80b2 	bne.w	8008102 <_strtod_l+0x1a2>
 8007f9e:	786a      	ldrb	r2, [r5, #1]
 8007fa0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007fa4:	2a58      	cmp	r2, #88	@ 0x58
 8007fa6:	d16e      	bne.n	8008086 <_strtod_l+0x126>
 8007fa8:	9302      	str	r3, [sp, #8]
 8007faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	ab1a      	add	r3, sp, #104	@ 0x68
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	4a8f      	ldr	r2, [pc, #572]	@ (80081f0 <_strtod_l+0x290>)
 8007fb4:	9805      	ldr	r0, [sp, #20]
 8007fb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007fb8:	a919      	add	r1, sp, #100	@ 0x64
 8007fba:	f001 f927 	bl	800920c <__gethex>
 8007fbe:	f010 060f 	ands.w	r6, r0, #15
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	d005      	beq.n	8007fd2 <_strtod_l+0x72>
 8007fc6:	2e06      	cmp	r6, #6
 8007fc8:	d128      	bne.n	800801c <_strtod_l+0xbc>
 8007fca:	3501      	adds	r5, #1
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9519      	str	r5, [sp, #100]	@ 0x64
 8007fd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007fd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f040 858e 	bne.w	8008af6 <_strtod_l+0xb96>
 8007fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fdc:	b1cb      	cbz	r3, 8008012 <_strtod_l+0xb2>
 8007fde:	4652      	mov	r2, sl
 8007fe0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007fe4:	ec43 2b10 	vmov	d0, r2, r3
 8007fe8:	b01f      	add	sp, #124	@ 0x7c
 8007fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fee:	2920      	cmp	r1, #32
 8007ff0:	d1ce      	bne.n	8007f90 <_strtod_l+0x30>
 8007ff2:	3201      	adds	r2, #1
 8007ff4:	e7c1      	b.n	8007f7a <_strtod_l+0x1a>
 8007ff6:	292d      	cmp	r1, #45	@ 0x2d
 8007ff8:	d1ca      	bne.n	8007f90 <_strtod_l+0x30>
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	910e      	str	r1, [sp, #56]	@ 0x38
 8007ffe:	1c51      	adds	r1, r2, #1
 8008000:	9119      	str	r1, [sp, #100]	@ 0x64
 8008002:	7852      	ldrb	r2, [r2, #1]
 8008004:	2a00      	cmp	r2, #0
 8008006:	d1c5      	bne.n	8007f94 <_strtod_l+0x34>
 8008008:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800800a:	9419      	str	r4, [sp, #100]	@ 0x64
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 8570 	bne.w	8008af2 <_strtod_l+0xb92>
 8008012:	4652      	mov	r2, sl
 8008014:	465b      	mov	r3, fp
 8008016:	e7e5      	b.n	8007fe4 <_strtod_l+0x84>
 8008018:	2100      	movs	r1, #0
 800801a:	e7ef      	b.n	8007ffc <_strtod_l+0x9c>
 800801c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800801e:	b13a      	cbz	r2, 8008030 <_strtod_l+0xd0>
 8008020:	2135      	movs	r1, #53	@ 0x35
 8008022:	a81c      	add	r0, sp, #112	@ 0x70
 8008024:	f7ff ff3a 	bl	8007e9c <__copybits>
 8008028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800802a:	9805      	ldr	r0, [sp, #20]
 800802c:	f7ff fb10 	bl	8007650 <_Bfree>
 8008030:	3e01      	subs	r6, #1
 8008032:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008034:	2e04      	cmp	r6, #4
 8008036:	d806      	bhi.n	8008046 <_strtod_l+0xe6>
 8008038:	e8df f006 	tbb	[pc, r6]
 800803c:	201d0314 	.word	0x201d0314
 8008040:	14          	.byte	0x14
 8008041:	00          	.byte	0x00
 8008042:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008046:	05e1      	lsls	r1, r4, #23
 8008048:	bf48      	it	mi
 800804a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800804e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008052:	0d1b      	lsrs	r3, r3, #20
 8008054:	051b      	lsls	r3, r3, #20
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1bb      	bne.n	8007fd2 <_strtod_l+0x72>
 800805a:	f7fe fb2d 	bl	80066b8 <__errno>
 800805e:	2322      	movs	r3, #34	@ 0x22
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	e7b6      	b.n	8007fd2 <_strtod_l+0x72>
 8008064:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008068:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800806c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008070:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008074:	e7e7      	b.n	8008046 <_strtod_l+0xe6>
 8008076:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80081f8 <_strtod_l+0x298>
 800807a:	e7e4      	b.n	8008046 <_strtod_l+0xe6>
 800807c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008080:	f04f 3aff 	mov.w	sl, #4294967295
 8008084:	e7df      	b.n	8008046 <_strtod_l+0xe6>
 8008086:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	9219      	str	r2, [sp, #100]	@ 0x64
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	2b30      	cmp	r3, #48	@ 0x30
 8008090:	d0f9      	beq.n	8008086 <_strtod_l+0x126>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d09d      	beq.n	8007fd2 <_strtod_l+0x72>
 8008096:	2301      	movs	r3, #1
 8008098:	2700      	movs	r7, #0
 800809a:	9308      	str	r3, [sp, #32]
 800809c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800809e:	930c      	str	r3, [sp, #48]	@ 0x30
 80080a0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80080a2:	46b9      	mov	r9, r7
 80080a4:	220a      	movs	r2, #10
 80080a6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80080a8:	7805      	ldrb	r5, [r0, #0]
 80080aa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80080ae:	b2d9      	uxtb	r1, r3
 80080b0:	2909      	cmp	r1, #9
 80080b2:	d928      	bls.n	8008106 <_strtod_l+0x1a6>
 80080b4:	494f      	ldr	r1, [pc, #316]	@ (80081f4 <_strtod_l+0x294>)
 80080b6:	2201      	movs	r2, #1
 80080b8:	f000 ffd6 	bl	8009068 <strncmp>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d032      	beq.n	8008126 <_strtod_l+0x1c6>
 80080c0:	2000      	movs	r0, #0
 80080c2:	462a      	mov	r2, r5
 80080c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80080c6:	464d      	mov	r5, r9
 80080c8:	4603      	mov	r3, r0
 80080ca:	2a65      	cmp	r2, #101	@ 0x65
 80080cc:	d001      	beq.n	80080d2 <_strtod_l+0x172>
 80080ce:	2a45      	cmp	r2, #69	@ 0x45
 80080d0:	d114      	bne.n	80080fc <_strtod_l+0x19c>
 80080d2:	b91d      	cbnz	r5, 80080dc <_strtod_l+0x17c>
 80080d4:	9a08      	ldr	r2, [sp, #32]
 80080d6:	4302      	orrs	r2, r0
 80080d8:	d096      	beq.n	8008008 <_strtod_l+0xa8>
 80080da:	2500      	movs	r5, #0
 80080dc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80080de:	1c62      	adds	r2, r4, #1
 80080e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80080e2:	7862      	ldrb	r2, [r4, #1]
 80080e4:	2a2b      	cmp	r2, #43	@ 0x2b
 80080e6:	d07a      	beq.n	80081de <_strtod_l+0x27e>
 80080e8:	2a2d      	cmp	r2, #45	@ 0x2d
 80080ea:	d07e      	beq.n	80081ea <_strtod_l+0x28a>
 80080ec:	f04f 0c00 	mov.w	ip, #0
 80080f0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80080f4:	2909      	cmp	r1, #9
 80080f6:	f240 8085 	bls.w	8008204 <_strtod_l+0x2a4>
 80080fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80080fc:	f04f 0800 	mov.w	r8, #0
 8008100:	e0a5      	b.n	800824e <_strtod_l+0x2ee>
 8008102:	2300      	movs	r3, #0
 8008104:	e7c8      	b.n	8008098 <_strtod_l+0x138>
 8008106:	f1b9 0f08 	cmp.w	r9, #8
 800810a:	bfd8      	it	le
 800810c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800810e:	f100 0001 	add.w	r0, r0, #1
 8008112:	bfda      	itte	le
 8008114:	fb02 3301 	mlale	r3, r2, r1, r3
 8008118:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800811a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800811e:	f109 0901 	add.w	r9, r9, #1
 8008122:	9019      	str	r0, [sp, #100]	@ 0x64
 8008124:	e7bf      	b.n	80080a6 <_strtod_l+0x146>
 8008126:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	9219      	str	r2, [sp, #100]	@ 0x64
 800812c:	785a      	ldrb	r2, [r3, #1]
 800812e:	f1b9 0f00 	cmp.w	r9, #0
 8008132:	d03b      	beq.n	80081ac <_strtod_l+0x24c>
 8008134:	900a      	str	r0, [sp, #40]	@ 0x28
 8008136:	464d      	mov	r5, r9
 8008138:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800813c:	2b09      	cmp	r3, #9
 800813e:	d912      	bls.n	8008166 <_strtod_l+0x206>
 8008140:	2301      	movs	r3, #1
 8008142:	e7c2      	b.n	80080ca <_strtod_l+0x16a>
 8008144:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	9219      	str	r2, [sp, #100]	@ 0x64
 800814a:	785a      	ldrb	r2, [r3, #1]
 800814c:	3001      	adds	r0, #1
 800814e:	2a30      	cmp	r2, #48	@ 0x30
 8008150:	d0f8      	beq.n	8008144 <_strtod_l+0x1e4>
 8008152:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008156:	2b08      	cmp	r3, #8
 8008158:	f200 84d2 	bhi.w	8008b00 <_strtod_l+0xba0>
 800815c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800815e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008160:	2000      	movs	r0, #0
 8008162:	930c      	str	r3, [sp, #48]	@ 0x30
 8008164:	4605      	mov	r5, r0
 8008166:	3a30      	subs	r2, #48	@ 0x30
 8008168:	f100 0301 	add.w	r3, r0, #1
 800816c:	d018      	beq.n	80081a0 <_strtod_l+0x240>
 800816e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008170:	4419      	add	r1, r3
 8008172:	910a      	str	r1, [sp, #40]	@ 0x28
 8008174:	462e      	mov	r6, r5
 8008176:	f04f 0e0a 	mov.w	lr, #10
 800817a:	1c71      	adds	r1, r6, #1
 800817c:	eba1 0c05 	sub.w	ip, r1, r5
 8008180:	4563      	cmp	r3, ip
 8008182:	dc15      	bgt.n	80081b0 <_strtod_l+0x250>
 8008184:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008188:	182b      	adds	r3, r5, r0
 800818a:	2b08      	cmp	r3, #8
 800818c:	f105 0501 	add.w	r5, r5, #1
 8008190:	4405      	add	r5, r0
 8008192:	dc1a      	bgt.n	80081ca <_strtod_l+0x26a>
 8008194:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008196:	230a      	movs	r3, #10
 8008198:	fb03 2301 	mla	r3, r3, r1, r2
 800819c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800819e:	2300      	movs	r3, #0
 80081a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081a2:	1c51      	adds	r1, r2, #1
 80081a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80081a6:	7852      	ldrb	r2, [r2, #1]
 80081a8:	4618      	mov	r0, r3
 80081aa:	e7c5      	b.n	8008138 <_strtod_l+0x1d8>
 80081ac:	4648      	mov	r0, r9
 80081ae:	e7ce      	b.n	800814e <_strtod_l+0x1ee>
 80081b0:	2e08      	cmp	r6, #8
 80081b2:	dc05      	bgt.n	80081c0 <_strtod_l+0x260>
 80081b4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80081b6:	fb0e f606 	mul.w	r6, lr, r6
 80081ba:	960b      	str	r6, [sp, #44]	@ 0x2c
 80081bc:	460e      	mov	r6, r1
 80081be:	e7dc      	b.n	800817a <_strtod_l+0x21a>
 80081c0:	2910      	cmp	r1, #16
 80081c2:	bfd8      	it	le
 80081c4:	fb0e f707 	mulle.w	r7, lr, r7
 80081c8:	e7f8      	b.n	80081bc <_strtod_l+0x25c>
 80081ca:	2b0f      	cmp	r3, #15
 80081cc:	bfdc      	itt	le
 80081ce:	230a      	movle	r3, #10
 80081d0:	fb03 2707 	mlale	r7, r3, r7, r2
 80081d4:	e7e3      	b.n	800819e <_strtod_l+0x23e>
 80081d6:	2300      	movs	r3, #0
 80081d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80081da:	2301      	movs	r3, #1
 80081dc:	e77a      	b.n	80080d4 <_strtod_l+0x174>
 80081de:	f04f 0c00 	mov.w	ip, #0
 80081e2:	1ca2      	adds	r2, r4, #2
 80081e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80081e6:	78a2      	ldrb	r2, [r4, #2]
 80081e8:	e782      	b.n	80080f0 <_strtod_l+0x190>
 80081ea:	f04f 0c01 	mov.w	ip, #1
 80081ee:	e7f8      	b.n	80081e2 <_strtod_l+0x282>
 80081f0:	0800a52c 	.word	0x0800a52c
 80081f4:	0800a363 	.word	0x0800a363
 80081f8:	7ff00000 	.word	0x7ff00000
 80081fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081fe:	1c51      	adds	r1, r2, #1
 8008200:	9119      	str	r1, [sp, #100]	@ 0x64
 8008202:	7852      	ldrb	r2, [r2, #1]
 8008204:	2a30      	cmp	r2, #48	@ 0x30
 8008206:	d0f9      	beq.n	80081fc <_strtod_l+0x29c>
 8008208:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800820c:	2908      	cmp	r1, #8
 800820e:	f63f af75 	bhi.w	80080fc <_strtod_l+0x19c>
 8008212:	3a30      	subs	r2, #48	@ 0x30
 8008214:	9209      	str	r2, [sp, #36]	@ 0x24
 8008216:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008218:	920f      	str	r2, [sp, #60]	@ 0x3c
 800821a:	f04f 080a 	mov.w	r8, #10
 800821e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008220:	1c56      	adds	r6, r2, #1
 8008222:	9619      	str	r6, [sp, #100]	@ 0x64
 8008224:	7852      	ldrb	r2, [r2, #1]
 8008226:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800822a:	f1be 0f09 	cmp.w	lr, #9
 800822e:	d939      	bls.n	80082a4 <_strtod_l+0x344>
 8008230:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008232:	1a76      	subs	r6, r6, r1
 8008234:	2e08      	cmp	r6, #8
 8008236:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800823a:	dc03      	bgt.n	8008244 <_strtod_l+0x2e4>
 800823c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800823e:	4588      	cmp	r8, r1
 8008240:	bfa8      	it	ge
 8008242:	4688      	movge	r8, r1
 8008244:	f1bc 0f00 	cmp.w	ip, #0
 8008248:	d001      	beq.n	800824e <_strtod_l+0x2ee>
 800824a:	f1c8 0800 	rsb	r8, r8, #0
 800824e:	2d00      	cmp	r5, #0
 8008250:	d14e      	bne.n	80082f0 <_strtod_l+0x390>
 8008252:	9908      	ldr	r1, [sp, #32]
 8008254:	4308      	orrs	r0, r1
 8008256:	f47f aebc 	bne.w	8007fd2 <_strtod_l+0x72>
 800825a:	2b00      	cmp	r3, #0
 800825c:	f47f aed4 	bne.w	8008008 <_strtod_l+0xa8>
 8008260:	2a69      	cmp	r2, #105	@ 0x69
 8008262:	d028      	beq.n	80082b6 <_strtod_l+0x356>
 8008264:	dc25      	bgt.n	80082b2 <_strtod_l+0x352>
 8008266:	2a49      	cmp	r2, #73	@ 0x49
 8008268:	d025      	beq.n	80082b6 <_strtod_l+0x356>
 800826a:	2a4e      	cmp	r2, #78	@ 0x4e
 800826c:	f47f aecc 	bne.w	8008008 <_strtod_l+0xa8>
 8008270:	499a      	ldr	r1, [pc, #616]	@ (80084dc <_strtod_l+0x57c>)
 8008272:	a819      	add	r0, sp, #100	@ 0x64
 8008274:	f001 f9ec 	bl	8009650 <__match>
 8008278:	2800      	cmp	r0, #0
 800827a:	f43f aec5 	beq.w	8008008 <_strtod_l+0xa8>
 800827e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b28      	cmp	r3, #40	@ 0x28
 8008284:	d12e      	bne.n	80082e4 <_strtod_l+0x384>
 8008286:	4996      	ldr	r1, [pc, #600]	@ (80084e0 <_strtod_l+0x580>)
 8008288:	aa1c      	add	r2, sp, #112	@ 0x70
 800828a:	a819      	add	r0, sp, #100	@ 0x64
 800828c:	f001 f9f4 	bl	8009678 <__hexnan>
 8008290:	2805      	cmp	r0, #5
 8008292:	d127      	bne.n	80082e4 <_strtod_l+0x384>
 8008294:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008296:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800829a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800829e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80082a2:	e696      	b.n	8007fd2 <_strtod_l+0x72>
 80082a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082a6:	fb08 2101 	mla	r1, r8, r1, r2
 80082aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80082ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80082b0:	e7b5      	b.n	800821e <_strtod_l+0x2be>
 80082b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80082b4:	e7da      	b.n	800826c <_strtod_l+0x30c>
 80082b6:	498b      	ldr	r1, [pc, #556]	@ (80084e4 <_strtod_l+0x584>)
 80082b8:	a819      	add	r0, sp, #100	@ 0x64
 80082ba:	f001 f9c9 	bl	8009650 <__match>
 80082be:	2800      	cmp	r0, #0
 80082c0:	f43f aea2 	beq.w	8008008 <_strtod_l+0xa8>
 80082c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082c6:	4988      	ldr	r1, [pc, #544]	@ (80084e8 <_strtod_l+0x588>)
 80082c8:	3b01      	subs	r3, #1
 80082ca:	a819      	add	r0, sp, #100	@ 0x64
 80082cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80082ce:	f001 f9bf 	bl	8009650 <__match>
 80082d2:	b910      	cbnz	r0, 80082da <_strtod_l+0x37a>
 80082d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082d6:	3301      	adds	r3, #1
 80082d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80082da:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80084f8 <_strtod_l+0x598>
 80082de:	f04f 0a00 	mov.w	sl, #0
 80082e2:	e676      	b.n	8007fd2 <_strtod_l+0x72>
 80082e4:	4881      	ldr	r0, [pc, #516]	@ (80084ec <_strtod_l+0x58c>)
 80082e6:	f000 feef 	bl	80090c8 <nan>
 80082ea:	ec5b ab10 	vmov	sl, fp, d0
 80082ee:	e670      	b.n	8007fd2 <_strtod_l+0x72>
 80082f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80082f4:	eba8 0303 	sub.w	r3, r8, r3
 80082f8:	f1b9 0f00 	cmp.w	r9, #0
 80082fc:	bf08      	it	eq
 80082fe:	46a9      	moveq	r9, r5
 8008300:	2d10      	cmp	r5, #16
 8008302:	9309      	str	r3, [sp, #36]	@ 0x24
 8008304:	462c      	mov	r4, r5
 8008306:	bfa8      	it	ge
 8008308:	2410      	movge	r4, #16
 800830a:	f7f8 f8fb 	bl	8000504 <__aeabi_ui2d>
 800830e:	2d09      	cmp	r5, #9
 8008310:	4682      	mov	sl, r0
 8008312:	468b      	mov	fp, r1
 8008314:	dc13      	bgt.n	800833e <_strtod_l+0x3de>
 8008316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	f43f ae5a 	beq.w	8007fd2 <_strtod_l+0x72>
 800831e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008320:	dd78      	ble.n	8008414 <_strtod_l+0x4b4>
 8008322:	2b16      	cmp	r3, #22
 8008324:	dc5f      	bgt.n	80083e6 <_strtod_l+0x486>
 8008326:	4972      	ldr	r1, [pc, #456]	@ (80084f0 <_strtod_l+0x590>)
 8008328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800832c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008330:	4652      	mov	r2, sl
 8008332:	465b      	mov	r3, fp
 8008334:	f7f8 f960 	bl	80005f8 <__aeabi_dmul>
 8008338:	4682      	mov	sl, r0
 800833a:	468b      	mov	fp, r1
 800833c:	e649      	b.n	8007fd2 <_strtod_l+0x72>
 800833e:	4b6c      	ldr	r3, [pc, #432]	@ (80084f0 <_strtod_l+0x590>)
 8008340:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008344:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008348:	f7f8 f956 	bl	80005f8 <__aeabi_dmul>
 800834c:	4682      	mov	sl, r0
 800834e:	4638      	mov	r0, r7
 8008350:	468b      	mov	fp, r1
 8008352:	f7f8 f8d7 	bl	8000504 <__aeabi_ui2d>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4650      	mov	r0, sl
 800835c:	4659      	mov	r1, fp
 800835e:	f7f7 ff95 	bl	800028c <__adddf3>
 8008362:	2d0f      	cmp	r5, #15
 8008364:	4682      	mov	sl, r0
 8008366:	468b      	mov	fp, r1
 8008368:	ddd5      	ble.n	8008316 <_strtod_l+0x3b6>
 800836a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800836c:	1b2c      	subs	r4, r5, r4
 800836e:	441c      	add	r4, r3
 8008370:	2c00      	cmp	r4, #0
 8008372:	f340 8093 	ble.w	800849c <_strtod_l+0x53c>
 8008376:	f014 030f 	ands.w	r3, r4, #15
 800837a:	d00a      	beq.n	8008392 <_strtod_l+0x432>
 800837c:	495c      	ldr	r1, [pc, #368]	@ (80084f0 <_strtod_l+0x590>)
 800837e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008382:	4652      	mov	r2, sl
 8008384:	465b      	mov	r3, fp
 8008386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800838a:	f7f8 f935 	bl	80005f8 <__aeabi_dmul>
 800838e:	4682      	mov	sl, r0
 8008390:	468b      	mov	fp, r1
 8008392:	f034 040f 	bics.w	r4, r4, #15
 8008396:	d073      	beq.n	8008480 <_strtod_l+0x520>
 8008398:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800839c:	dd49      	ble.n	8008432 <_strtod_l+0x4d2>
 800839e:	2400      	movs	r4, #0
 80083a0:	46a0      	mov	r8, r4
 80083a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80083a4:	46a1      	mov	r9, r4
 80083a6:	9a05      	ldr	r2, [sp, #20]
 80083a8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80084f8 <_strtod_l+0x598>
 80083ac:	2322      	movs	r3, #34	@ 0x22
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	f04f 0a00 	mov.w	sl, #0
 80083b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f43f ae0b 	beq.w	8007fd2 <_strtod_l+0x72>
 80083bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083be:	9805      	ldr	r0, [sp, #20]
 80083c0:	f7ff f946 	bl	8007650 <_Bfree>
 80083c4:	9805      	ldr	r0, [sp, #20]
 80083c6:	4649      	mov	r1, r9
 80083c8:	f7ff f942 	bl	8007650 <_Bfree>
 80083cc:	9805      	ldr	r0, [sp, #20]
 80083ce:	4641      	mov	r1, r8
 80083d0:	f7ff f93e 	bl	8007650 <_Bfree>
 80083d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083d6:	9805      	ldr	r0, [sp, #20]
 80083d8:	f7ff f93a 	bl	8007650 <_Bfree>
 80083dc:	9805      	ldr	r0, [sp, #20]
 80083de:	4621      	mov	r1, r4
 80083e0:	f7ff f936 	bl	8007650 <_Bfree>
 80083e4:	e5f5      	b.n	8007fd2 <_strtod_l+0x72>
 80083e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80083ec:	4293      	cmp	r3, r2
 80083ee:	dbbc      	blt.n	800836a <_strtod_l+0x40a>
 80083f0:	4c3f      	ldr	r4, [pc, #252]	@ (80084f0 <_strtod_l+0x590>)
 80083f2:	f1c5 050f 	rsb	r5, r5, #15
 80083f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80083fa:	4652      	mov	r2, sl
 80083fc:	465b      	mov	r3, fp
 80083fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008402:	f7f8 f8f9 	bl	80005f8 <__aeabi_dmul>
 8008406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008408:	1b5d      	subs	r5, r3, r5
 800840a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800840e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008412:	e78f      	b.n	8008334 <_strtod_l+0x3d4>
 8008414:	3316      	adds	r3, #22
 8008416:	dba8      	blt.n	800836a <_strtod_l+0x40a>
 8008418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800841a:	eba3 0808 	sub.w	r8, r3, r8
 800841e:	4b34      	ldr	r3, [pc, #208]	@ (80084f0 <_strtod_l+0x590>)
 8008420:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008424:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008428:	4650      	mov	r0, sl
 800842a:	4659      	mov	r1, fp
 800842c:	f7f8 fa0e 	bl	800084c <__aeabi_ddiv>
 8008430:	e782      	b.n	8008338 <_strtod_l+0x3d8>
 8008432:	2300      	movs	r3, #0
 8008434:	4f2f      	ldr	r7, [pc, #188]	@ (80084f4 <_strtod_l+0x594>)
 8008436:	1124      	asrs	r4, r4, #4
 8008438:	4650      	mov	r0, sl
 800843a:	4659      	mov	r1, fp
 800843c:	461e      	mov	r6, r3
 800843e:	2c01      	cmp	r4, #1
 8008440:	dc21      	bgt.n	8008486 <_strtod_l+0x526>
 8008442:	b10b      	cbz	r3, 8008448 <_strtod_l+0x4e8>
 8008444:	4682      	mov	sl, r0
 8008446:	468b      	mov	fp, r1
 8008448:	492a      	ldr	r1, [pc, #168]	@ (80084f4 <_strtod_l+0x594>)
 800844a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800844e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008452:	4652      	mov	r2, sl
 8008454:	465b      	mov	r3, fp
 8008456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800845a:	f7f8 f8cd 	bl	80005f8 <__aeabi_dmul>
 800845e:	4b26      	ldr	r3, [pc, #152]	@ (80084f8 <_strtod_l+0x598>)
 8008460:	460a      	mov	r2, r1
 8008462:	400b      	ands	r3, r1
 8008464:	4925      	ldr	r1, [pc, #148]	@ (80084fc <_strtod_l+0x59c>)
 8008466:	428b      	cmp	r3, r1
 8008468:	4682      	mov	sl, r0
 800846a:	d898      	bhi.n	800839e <_strtod_l+0x43e>
 800846c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008470:	428b      	cmp	r3, r1
 8008472:	bf86      	itte	hi
 8008474:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008500 <_strtod_l+0x5a0>
 8008478:	f04f 3aff 	movhi.w	sl, #4294967295
 800847c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008480:	2300      	movs	r3, #0
 8008482:	9308      	str	r3, [sp, #32]
 8008484:	e076      	b.n	8008574 <_strtod_l+0x614>
 8008486:	07e2      	lsls	r2, r4, #31
 8008488:	d504      	bpl.n	8008494 <_strtod_l+0x534>
 800848a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800848e:	f7f8 f8b3 	bl	80005f8 <__aeabi_dmul>
 8008492:	2301      	movs	r3, #1
 8008494:	3601      	adds	r6, #1
 8008496:	1064      	asrs	r4, r4, #1
 8008498:	3708      	adds	r7, #8
 800849a:	e7d0      	b.n	800843e <_strtod_l+0x4de>
 800849c:	d0f0      	beq.n	8008480 <_strtod_l+0x520>
 800849e:	4264      	negs	r4, r4
 80084a0:	f014 020f 	ands.w	r2, r4, #15
 80084a4:	d00a      	beq.n	80084bc <_strtod_l+0x55c>
 80084a6:	4b12      	ldr	r3, [pc, #72]	@ (80084f0 <_strtod_l+0x590>)
 80084a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ac:	4650      	mov	r0, sl
 80084ae:	4659      	mov	r1, fp
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f7f8 f9ca 	bl	800084c <__aeabi_ddiv>
 80084b8:	4682      	mov	sl, r0
 80084ba:	468b      	mov	fp, r1
 80084bc:	1124      	asrs	r4, r4, #4
 80084be:	d0df      	beq.n	8008480 <_strtod_l+0x520>
 80084c0:	2c1f      	cmp	r4, #31
 80084c2:	dd1f      	ble.n	8008504 <_strtod_l+0x5a4>
 80084c4:	2400      	movs	r4, #0
 80084c6:	46a0      	mov	r8, r4
 80084c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084ca:	46a1      	mov	r9, r4
 80084cc:	9a05      	ldr	r2, [sp, #20]
 80084ce:	2322      	movs	r3, #34	@ 0x22
 80084d0:	f04f 0a00 	mov.w	sl, #0
 80084d4:	f04f 0b00 	mov.w	fp, #0
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	e76b      	b.n	80083b4 <_strtod_l+0x454>
 80084dc:	0800a251 	.word	0x0800a251
 80084e0:	0800a518 	.word	0x0800a518
 80084e4:	0800a249 	.word	0x0800a249
 80084e8:	0800a280 	.word	0x0800a280
 80084ec:	0800a3b9 	.word	0x0800a3b9
 80084f0:	0800a450 	.word	0x0800a450
 80084f4:	0800a428 	.word	0x0800a428
 80084f8:	7ff00000 	.word	0x7ff00000
 80084fc:	7ca00000 	.word	0x7ca00000
 8008500:	7fefffff 	.word	0x7fefffff
 8008504:	f014 0310 	ands.w	r3, r4, #16
 8008508:	bf18      	it	ne
 800850a:	236a      	movne	r3, #106	@ 0x6a
 800850c:	4ea9      	ldr	r6, [pc, #676]	@ (80087b4 <_strtod_l+0x854>)
 800850e:	9308      	str	r3, [sp, #32]
 8008510:	4650      	mov	r0, sl
 8008512:	4659      	mov	r1, fp
 8008514:	2300      	movs	r3, #0
 8008516:	07e7      	lsls	r7, r4, #31
 8008518:	d504      	bpl.n	8008524 <_strtod_l+0x5c4>
 800851a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800851e:	f7f8 f86b 	bl	80005f8 <__aeabi_dmul>
 8008522:	2301      	movs	r3, #1
 8008524:	1064      	asrs	r4, r4, #1
 8008526:	f106 0608 	add.w	r6, r6, #8
 800852a:	d1f4      	bne.n	8008516 <_strtod_l+0x5b6>
 800852c:	b10b      	cbz	r3, 8008532 <_strtod_l+0x5d2>
 800852e:	4682      	mov	sl, r0
 8008530:	468b      	mov	fp, r1
 8008532:	9b08      	ldr	r3, [sp, #32]
 8008534:	b1b3      	cbz	r3, 8008564 <_strtod_l+0x604>
 8008536:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800853a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800853e:	2b00      	cmp	r3, #0
 8008540:	4659      	mov	r1, fp
 8008542:	dd0f      	ble.n	8008564 <_strtod_l+0x604>
 8008544:	2b1f      	cmp	r3, #31
 8008546:	dd56      	ble.n	80085f6 <_strtod_l+0x696>
 8008548:	2b34      	cmp	r3, #52	@ 0x34
 800854a:	bfde      	ittt	le
 800854c:	f04f 33ff 	movle.w	r3, #4294967295
 8008550:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008554:	4093      	lslle	r3, r2
 8008556:	f04f 0a00 	mov.w	sl, #0
 800855a:	bfcc      	ite	gt
 800855c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008560:	ea03 0b01 	andle.w	fp, r3, r1
 8008564:	2200      	movs	r2, #0
 8008566:	2300      	movs	r3, #0
 8008568:	4650      	mov	r0, sl
 800856a:	4659      	mov	r1, fp
 800856c:	f7f8 faac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008570:	2800      	cmp	r0, #0
 8008572:	d1a7      	bne.n	80084c4 <_strtod_l+0x564>
 8008574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800857a:	9805      	ldr	r0, [sp, #20]
 800857c:	462b      	mov	r3, r5
 800857e:	464a      	mov	r2, r9
 8008580:	f7ff f8ce 	bl	8007720 <__s2b>
 8008584:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008586:	2800      	cmp	r0, #0
 8008588:	f43f af09 	beq.w	800839e <_strtod_l+0x43e>
 800858c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800858e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008590:	2a00      	cmp	r2, #0
 8008592:	eba3 0308 	sub.w	r3, r3, r8
 8008596:	bfa8      	it	ge
 8008598:	2300      	movge	r3, #0
 800859a:	9312      	str	r3, [sp, #72]	@ 0x48
 800859c:	2400      	movs	r4, #0
 800859e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80085a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80085a4:	46a0      	mov	r8, r4
 80085a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085a8:	9805      	ldr	r0, [sp, #20]
 80085aa:	6859      	ldr	r1, [r3, #4]
 80085ac:	f7ff f810 	bl	80075d0 <_Balloc>
 80085b0:	4681      	mov	r9, r0
 80085b2:	2800      	cmp	r0, #0
 80085b4:	f43f aef7 	beq.w	80083a6 <_strtod_l+0x446>
 80085b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085ba:	691a      	ldr	r2, [r3, #16]
 80085bc:	3202      	adds	r2, #2
 80085be:	f103 010c 	add.w	r1, r3, #12
 80085c2:	0092      	lsls	r2, r2, #2
 80085c4:	300c      	adds	r0, #12
 80085c6:	f000 fd71 	bl	80090ac <memcpy>
 80085ca:	ec4b ab10 	vmov	d0, sl, fp
 80085ce:	9805      	ldr	r0, [sp, #20]
 80085d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80085d2:	a91b      	add	r1, sp, #108	@ 0x6c
 80085d4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80085d8:	f7ff fbd6 	bl	8007d88 <__d2b>
 80085dc:	901a      	str	r0, [sp, #104]	@ 0x68
 80085de:	2800      	cmp	r0, #0
 80085e0:	f43f aee1 	beq.w	80083a6 <_strtod_l+0x446>
 80085e4:	9805      	ldr	r0, [sp, #20]
 80085e6:	2101      	movs	r1, #1
 80085e8:	f7ff f930 	bl	800784c <__i2b>
 80085ec:	4680      	mov	r8, r0
 80085ee:	b948      	cbnz	r0, 8008604 <_strtod_l+0x6a4>
 80085f0:	f04f 0800 	mov.w	r8, #0
 80085f4:	e6d7      	b.n	80083a6 <_strtod_l+0x446>
 80085f6:	f04f 32ff 	mov.w	r2, #4294967295
 80085fa:	fa02 f303 	lsl.w	r3, r2, r3
 80085fe:	ea03 0a0a 	and.w	sl, r3, sl
 8008602:	e7af      	b.n	8008564 <_strtod_l+0x604>
 8008604:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008606:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008608:	2d00      	cmp	r5, #0
 800860a:	bfab      	itete	ge
 800860c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800860e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008610:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008612:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008614:	bfac      	ite	ge
 8008616:	18ef      	addge	r7, r5, r3
 8008618:	1b5e      	sublt	r6, r3, r5
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	1aed      	subs	r5, r5, r3
 800861e:	4415      	add	r5, r2
 8008620:	4b65      	ldr	r3, [pc, #404]	@ (80087b8 <_strtod_l+0x858>)
 8008622:	3d01      	subs	r5, #1
 8008624:	429d      	cmp	r5, r3
 8008626:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800862a:	da50      	bge.n	80086ce <_strtod_l+0x76e>
 800862c:	1b5b      	subs	r3, r3, r5
 800862e:	2b1f      	cmp	r3, #31
 8008630:	eba2 0203 	sub.w	r2, r2, r3
 8008634:	f04f 0101 	mov.w	r1, #1
 8008638:	dc3d      	bgt.n	80086b6 <_strtod_l+0x756>
 800863a:	fa01 f303 	lsl.w	r3, r1, r3
 800863e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008640:	2300      	movs	r3, #0
 8008642:	9310      	str	r3, [sp, #64]	@ 0x40
 8008644:	18bd      	adds	r5, r7, r2
 8008646:	9b08      	ldr	r3, [sp, #32]
 8008648:	42af      	cmp	r7, r5
 800864a:	4416      	add	r6, r2
 800864c:	441e      	add	r6, r3
 800864e:	463b      	mov	r3, r7
 8008650:	bfa8      	it	ge
 8008652:	462b      	movge	r3, r5
 8008654:	42b3      	cmp	r3, r6
 8008656:	bfa8      	it	ge
 8008658:	4633      	movge	r3, r6
 800865a:	2b00      	cmp	r3, #0
 800865c:	bfc2      	ittt	gt
 800865e:	1aed      	subgt	r5, r5, r3
 8008660:	1af6      	subgt	r6, r6, r3
 8008662:	1aff      	subgt	r7, r7, r3
 8008664:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008666:	2b00      	cmp	r3, #0
 8008668:	dd16      	ble.n	8008698 <_strtod_l+0x738>
 800866a:	4641      	mov	r1, r8
 800866c:	9805      	ldr	r0, [sp, #20]
 800866e:	461a      	mov	r2, r3
 8008670:	f7ff f9a4 	bl	80079bc <__pow5mult>
 8008674:	4680      	mov	r8, r0
 8008676:	2800      	cmp	r0, #0
 8008678:	d0ba      	beq.n	80085f0 <_strtod_l+0x690>
 800867a:	4601      	mov	r1, r0
 800867c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800867e:	9805      	ldr	r0, [sp, #20]
 8008680:	f7ff f8fa 	bl	8007878 <__multiply>
 8008684:	900a      	str	r0, [sp, #40]	@ 0x28
 8008686:	2800      	cmp	r0, #0
 8008688:	f43f ae8d 	beq.w	80083a6 <_strtod_l+0x446>
 800868c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800868e:	9805      	ldr	r0, [sp, #20]
 8008690:	f7fe ffde 	bl	8007650 <_Bfree>
 8008694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008696:	931a      	str	r3, [sp, #104]	@ 0x68
 8008698:	2d00      	cmp	r5, #0
 800869a:	dc1d      	bgt.n	80086d8 <_strtod_l+0x778>
 800869c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	dd23      	ble.n	80086ea <_strtod_l+0x78a>
 80086a2:	4649      	mov	r1, r9
 80086a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80086a6:	9805      	ldr	r0, [sp, #20]
 80086a8:	f7ff f988 	bl	80079bc <__pow5mult>
 80086ac:	4681      	mov	r9, r0
 80086ae:	b9e0      	cbnz	r0, 80086ea <_strtod_l+0x78a>
 80086b0:	f04f 0900 	mov.w	r9, #0
 80086b4:	e677      	b.n	80083a6 <_strtod_l+0x446>
 80086b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80086ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80086be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80086c2:	35e2      	adds	r5, #226	@ 0xe2
 80086c4:	fa01 f305 	lsl.w	r3, r1, r5
 80086c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80086ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 80086cc:	e7ba      	b.n	8008644 <_strtod_l+0x6e4>
 80086ce:	2300      	movs	r3, #0
 80086d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80086d2:	2301      	movs	r3, #1
 80086d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086d6:	e7b5      	b.n	8008644 <_strtod_l+0x6e4>
 80086d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086da:	9805      	ldr	r0, [sp, #20]
 80086dc:	462a      	mov	r2, r5
 80086de:	f7ff f9c7 	bl	8007a70 <__lshift>
 80086e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d1d9      	bne.n	800869c <_strtod_l+0x73c>
 80086e8:	e65d      	b.n	80083a6 <_strtod_l+0x446>
 80086ea:	2e00      	cmp	r6, #0
 80086ec:	dd07      	ble.n	80086fe <_strtod_l+0x79e>
 80086ee:	4649      	mov	r1, r9
 80086f0:	9805      	ldr	r0, [sp, #20]
 80086f2:	4632      	mov	r2, r6
 80086f4:	f7ff f9bc 	bl	8007a70 <__lshift>
 80086f8:	4681      	mov	r9, r0
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d0d8      	beq.n	80086b0 <_strtod_l+0x750>
 80086fe:	2f00      	cmp	r7, #0
 8008700:	dd08      	ble.n	8008714 <_strtod_l+0x7b4>
 8008702:	4641      	mov	r1, r8
 8008704:	9805      	ldr	r0, [sp, #20]
 8008706:	463a      	mov	r2, r7
 8008708:	f7ff f9b2 	bl	8007a70 <__lshift>
 800870c:	4680      	mov	r8, r0
 800870e:	2800      	cmp	r0, #0
 8008710:	f43f ae49 	beq.w	80083a6 <_strtod_l+0x446>
 8008714:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008716:	9805      	ldr	r0, [sp, #20]
 8008718:	464a      	mov	r2, r9
 800871a:	f7ff fa31 	bl	8007b80 <__mdiff>
 800871e:	4604      	mov	r4, r0
 8008720:	2800      	cmp	r0, #0
 8008722:	f43f ae40 	beq.w	80083a6 <_strtod_l+0x446>
 8008726:	68c3      	ldr	r3, [r0, #12]
 8008728:	930f      	str	r3, [sp, #60]	@ 0x3c
 800872a:	2300      	movs	r3, #0
 800872c:	60c3      	str	r3, [r0, #12]
 800872e:	4641      	mov	r1, r8
 8008730:	f7ff fa0a 	bl	8007b48 <__mcmp>
 8008734:	2800      	cmp	r0, #0
 8008736:	da45      	bge.n	80087c4 <_strtod_l+0x864>
 8008738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800873a:	ea53 030a 	orrs.w	r3, r3, sl
 800873e:	d16b      	bne.n	8008818 <_strtod_l+0x8b8>
 8008740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008744:	2b00      	cmp	r3, #0
 8008746:	d167      	bne.n	8008818 <_strtod_l+0x8b8>
 8008748:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800874c:	0d1b      	lsrs	r3, r3, #20
 800874e:	051b      	lsls	r3, r3, #20
 8008750:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008754:	d960      	bls.n	8008818 <_strtod_l+0x8b8>
 8008756:	6963      	ldr	r3, [r4, #20]
 8008758:	b913      	cbnz	r3, 8008760 <_strtod_l+0x800>
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	2b01      	cmp	r3, #1
 800875e:	dd5b      	ble.n	8008818 <_strtod_l+0x8b8>
 8008760:	4621      	mov	r1, r4
 8008762:	2201      	movs	r2, #1
 8008764:	9805      	ldr	r0, [sp, #20]
 8008766:	f7ff f983 	bl	8007a70 <__lshift>
 800876a:	4641      	mov	r1, r8
 800876c:	4604      	mov	r4, r0
 800876e:	f7ff f9eb 	bl	8007b48 <__mcmp>
 8008772:	2800      	cmp	r0, #0
 8008774:	dd50      	ble.n	8008818 <_strtod_l+0x8b8>
 8008776:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800877a:	9a08      	ldr	r2, [sp, #32]
 800877c:	0d1b      	lsrs	r3, r3, #20
 800877e:	051b      	lsls	r3, r3, #20
 8008780:	2a00      	cmp	r2, #0
 8008782:	d06a      	beq.n	800885a <_strtod_l+0x8fa>
 8008784:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008788:	d867      	bhi.n	800885a <_strtod_l+0x8fa>
 800878a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800878e:	f67f ae9d 	bls.w	80084cc <_strtod_l+0x56c>
 8008792:	4b0a      	ldr	r3, [pc, #40]	@ (80087bc <_strtod_l+0x85c>)
 8008794:	4650      	mov	r0, sl
 8008796:	4659      	mov	r1, fp
 8008798:	2200      	movs	r2, #0
 800879a:	f7f7 ff2d 	bl	80005f8 <__aeabi_dmul>
 800879e:	4b08      	ldr	r3, [pc, #32]	@ (80087c0 <_strtod_l+0x860>)
 80087a0:	400b      	ands	r3, r1
 80087a2:	4682      	mov	sl, r0
 80087a4:	468b      	mov	fp, r1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f47f ae08 	bne.w	80083bc <_strtod_l+0x45c>
 80087ac:	9a05      	ldr	r2, [sp, #20]
 80087ae:	2322      	movs	r3, #34	@ 0x22
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	e603      	b.n	80083bc <_strtod_l+0x45c>
 80087b4:	0800a540 	.word	0x0800a540
 80087b8:	fffffc02 	.word	0xfffffc02
 80087bc:	39500000 	.word	0x39500000
 80087c0:	7ff00000 	.word	0x7ff00000
 80087c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80087c8:	d165      	bne.n	8008896 <_strtod_l+0x936>
 80087ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80087cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087d0:	b35a      	cbz	r2, 800882a <_strtod_l+0x8ca>
 80087d2:	4a9f      	ldr	r2, [pc, #636]	@ (8008a50 <_strtod_l+0xaf0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d12b      	bne.n	8008830 <_strtod_l+0x8d0>
 80087d8:	9b08      	ldr	r3, [sp, #32]
 80087da:	4651      	mov	r1, sl
 80087dc:	b303      	cbz	r3, 8008820 <_strtod_l+0x8c0>
 80087de:	4b9d      	ldr	r3, [pc, #628]	@ (8008a54 <_strtod_l+0xaf4>)
 80087e0:	465a      	mov	r2, fp
 80087e2:	4013      	ands	r3, r2
 80087e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80087e8:	f04f 32ff 	mov.w	r2, #4294967295
 80087ec:	d81b      	bhi.n	8008826 <_strtod_l+0x8c6>
 80087ee:	0d1b      	lsrs	r3, r3, #20
 80087f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80087f4:	fa02 f303 	lsl.w	r3, r2, r3
 80087f8:	4299      	cmp	r1, r3
 80087fa:	d119      	bne.n	8008830 <_strtod_l+0x8d0>
 80087fc:	4b96      	ldr	r3, [pc, #600]	@ (8008a58 <_strtod_l+0xaf8>)
 80087fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008800:	429a      	cmp	r2, r3
 8008802:	d102      	bne.n	800880a <_strtod_l+0x8aa>
 8008804:	3101      	adds	r1, #1
 8008806:	f43f adce 	beq.w	80083a6 <_strtod_l+0x446>
 800880a:	4b92      	ldr	r3, [pc, #584]	@ (8008a54 <_strtod_l+0xaf4>)
 800880c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800880e:	401a      	ands	r2, r3
 8008810:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008814:	f04f 0a00 	mov.w	sl, #0
 8008818:	9b08      	ldr	r3, [sp, #32]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1b9      	bne.n	8008792 <_strtod_l+0x832>
 800881e:	e5cd      	b.n	80083bc <_strtod_l+0x45c>
 8008820:	f04f 33ff 	mov.w	r3, #4294967295
 8008824:	e7e8      	b.n	80087f8 <_strtod_l+0x898>
 8008826:	4613      	mov	r3, r2
 8008828:	e7e6      	b.n	80087f8 <_strtod_l+0x898>
 800882a:	ea53 030a 	orrs.w	r3, r3, sl
 800882e:	d0a2      	beq.n	8008776 <_strtod_l+0x816>
 8008830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008832:	b1db      	cbz	r3, 800886c <_strtod_l+0x90c>
 8008834:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008836:	4213      	tst	r3, r2
 8008838:	d0ee      	beq.n	8008818 <_strtod_l+0x8b8>
 800883a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800883c:	9a08      	ldr	r2, [sp, #32]
 800883e:	4650      	mov	r0, sl
 8008840:	4659      	mov	r1, fp
 8008842:	b1bb      	cbz	r3, 8008874 <_strtod_l+0x914>
 8008844:	f7ff fb6e 	bl	8007f24 <sulp>
 8008848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800884c:	ec53 2b10 	vmov	r2, r3, d0
 8008850:	f7f7 fd1c 	bl	800028c <__adddf3>
 8008854:	4682      	mov	sl, r0
 8008856:	468b      	mov	fp, r1
 8008858:	e7de      	b.n	8008818 <_strtod_l+0x8b8>
 800885a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800885e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008862:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008866:	f04f 3aff 	mov.w	sl, #4294967295
 800886a:	e7d5      	b.n	8008818 <_strtod_l+0x8b8>
 800886c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800886e:	ea13 0f0a 	tst.w	r3, sl
 8008872:	e7e1      	b.n	8008838 <_strtod_l+0x8d8>
 8008874:	f7ff fb56 	bl	8007f24 <sulp>
 8008878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800887c:	ec53 2b10 	vmov	r2, r3, d0
 8008880:	f7f7 fd02 	bl	8000288 <__aeabi_dsub>
 8008884:	2200      	movs	r2, #0
 8008886:	2300      	movs	r3, #0
 8008888:	4682      	mov	sl, r0
 800888a:	468b      	mov	fp, r1
 800888c:	f7f8 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008890:	2800      	cmp	r0, #0
 8008892:	d0c1      	beq.n	8008818 <_strtod_l+0x8b8>
 8008894:	e61a      	b.n	80084cc <_strtod_l+0x56c>
 8008896:	4641      	mov	r1, r8
 8008898:	4620      	mov	r0, r4
 800889a:	f7ff facd 	bl	8007e38 <__ratio>
 800889e:	ec57 6b10 	vmov	r6, r7, d0
 80088a2:	2200      	movs	r2, #0
 80088a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088a8:	4630      	mov	r0, r6
 80088aa:	4639      	mov	r1, r7
 80088ac:	f7f8 f920 	bl	8000af0 <__aeabi_dcmple>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d06f      	beq.n	8008994 <_strtod_l+0xa34>
 80088b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d17a      	bne.n	80089b0 <_strtod_l+0xa50>
 80088ba:	f1ba 0f00 	cmp.w	sl, #0
 80088be:	d158      	bne.n	8008972 <_strtod_l+0xa12>
 80088c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d15a      	bne.n	8008980 <_strtod_l+0xa20>
 80088ca:	4b64      	ldr	r3, [pc, #400]	@ (8008a5c <_strtod_l+0xafc>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	4630      	mov	r0, r6
 80088d0:	4639      	mov	r1, r7
 80088d2:	f7f8 f903 	bl	8000adc <__aeabi_dcmplt>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d159      	bne.n	800898e <_strtod_l+0xa2e>
 80088da:	4630      	mov	r0, r6
 80088dc:	4639      	mov	r1, r7
 80088de:	4b60      	ldr	r3, [pc, #384]	@ (8008a60 <_strtod_l+0xb00>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	f7f7 fe89 	bl	80005f8 <__aeabi_dmul>
 80088e6:	4606      	mov	r6, r0
 80088e8:	460f      	mov	r7, r1
 80088ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80088ee:	9606      	str	r6, [sp, #24]
 80088f0:	9307      	str	r3, [sp, #28]
 80088f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088f6:	4d57      	ldr	r5, [pc, #348]	@ (8008a54 <_strtod_l+0xaf4>)
 80088f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80088fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088fe:	401d      	ands	r5, r3
 8008900:	4b58      	ldr	r3, [pc, #352]	@ (8008a64 <_strtod_l+0xb04>)
 8008902:	429d      	cmp	r5, r3
 8008904:	f040 80b2 	bne.w	8008a6c <_strtod_l+0xb0c>
 8008908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800890a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800890e:	ec4b ab10 	vmov	d0, sl, fp
 8008912:	f7ff f9c9 	bl	8007ca8 <__ulp>
 8008916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800891a:	ec51 0b10 	vmov	r0, r1, d0
 800891e:	f7f7 fe6b 	bl	80005f8 <__aeabi_dmul>
 8008922:	4652      	mov	r2, sl
 8008924:	465b      	mov	r3, fp
 8008926:	f7f7 fcb1 	bl	800028c <__adddf3>
 800892a:	460b      	mov	r3, r1
 800892c:	4949      	ldr	r1, [pc, #292]	@ (8008a54 <_strtod_l+0xaf4>)
 800892e:	4a4e      	ldr	r2, [pc, #312]	@ (8008a68 <_strtod_l+0xb08>)
 8008930:	4019      	ands	r1, r3
 8008932:	4291      	cmp	r1, r2
 8008934:	4682      	mov	sl, r0
 8008936:	d942      	bls.n	80089be <_strtod_l+0xa5e>
 8008938:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800893a:	4b47      	ldr	r3, [pc, #284]	@ (8008a58 <_strtod_l+0xaf8>)
 800893c:	429a      	cmp	r2, r3
 800893e:	d103      	bne.n	8008948 <_strtod_l+0x9e8>
 8008940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008942:	3301      	adds	r3, #1
 8008944:	f43f ad2f 	beq.w	80083a6 <_strtod_l+0x446>
 8008948:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008a58 <_strtod_l+0xaf8>
 800894c:	f04f 3aff 	mov.w	sl, #4294967295
 8008950:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008952:	9805      	ldr	r0, [sp, #20]
 8008954:	f7fe fe7c 	bl	8007650 <_Bfree>
 8008958:	9805      	ldr	r0, [sp, #20]
 800895a:	4649      	mov	r1, r9
 800895c:	f7fe fe78 	bl	8007650 <_Bfree>
 8008960:	9805      	ldr	r0, [sp, #20]
 8008962:	4641      	mov	r1, r8
 8008964:	f7fe fe74 	bl	8007650 <_Bfree>
 8008968:	9805      	ldr	r0, [sp, #20]
 800896a:	4621      	mov	r1, r4
 800896c:	f7fe fe70 	bl	8007650 <_Bfree>
 8008970:	e619      	b.n	80085a6 <_strtod_l+0x646>
 8008972:	f1ba 0f01 	cmp.w	sl, #1
 8008976:	d103      	bne.n	8008980 <_strtod_l+0xa20>
 8008978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800897a:	2b00      	cmp	r3, #0
 800897c:	f43f ada6 	beq.w	80084cc <_strtod_l+0x56c>
 8008980:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008a30 <_strtod_l+0xad0>
 8008984:	4f35      	ldr	r7, [pc, #212]	@ (8008a5c <_strtod_l+0xafc>)
 8008986:	ed8d 7b06 	vstr	d7, [sp, #24]
 800898a:	2600      	movs	r6, #0
 800898c:	e7b1      	b.n	80088f2 <_strtod_l+0x992>
 800898e:	4f34      	ldr	r7, [pc, #208]	@ (8008a60 <_strtod_l+0xb00>)
 8008990:	2600      	movs	r6, #0
 8008992:	e7aa      	b.n	80088ea <_strtod_l+0x98a>
 8008994:	4b32      	ldr	r3, [pc, #200]	@ (8008a60 <_strtod_l+0xb00>)
 8008996:	4630      	mov	r0, r6
 8008998:	4639      	mov	r1, r7
 800899a:	2200      	movs	r2, #0
 800899c:	f7f7 fe2c 	bl	80005f8 <__aeabi_dmul>
 80089a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089a2:	4606      	mov	r6, r0
 80089a4:	460f      	mov	r7, r1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d09f      	beq.n	80088ea <_strtod_l+0x98a>
 80089aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80089ae:	e7a0      	b.n	80088f2 <_strtod_l+0x992>
 80089b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008a38 <_strtod_l+0xad8>
 80089b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089b8:	ec57 6b17 	vmov	r6, r7, d7
 80089bc:	e799      	b.n	80088f2 <_strtod_l+0x992>
 80089be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1c1      	bne.n	8008950 <_strtod_l+0x9f0>
 80089cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089d0:	0d1b      	lsrs	r3, r3, #20
 80089d2:	051b      	lsls	r3, r3, #20
 80089d4:	429d      	cmp	r5, r3
 80089d6:	d1bb      	bne.n	8008950 <_strtod_l+0x9f0>
 80089d8:	4630      	mov	r0, r6
 80089da:	4639      	mov	r1, r7
 80089dc:	f7f8 f96c 	bl	8000cb8 <__aeabi_d2lz>
 80089e0:	f7f7 fddc 	bl	800059c <__aeabi_l2d>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4630      	mov	r0, r6
 80089ea:	4639      	mov	r1, r7
 80089ec:	f7f7 fc4c 	bl	8000288 <__aeabi_dsub>
 80089f0:	460b      	mov	r3, r1
 80089f2:	4602      	mov	r2, r0
 80089f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80089f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80089fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089fe:	ea46 060a 	orr.w	r6, r6, sl
 8008a02:	431e      	orrs	r6, r3
 8008a04:	d06f      	beq.n	8008ae6 <_strtod_l+0xb86>
 8008a06:	a30e      	add	r3, pc, #56	@ (adr r3, 8008a40 <_strtod_l+0xae0>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	f7f8 f866 	bl	8000adc <__aeabi_dcmplt>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f47f acd3 	bne.w	80083bc <_strtod_l+0x45c>
 8008a16:	a30c      	add	r3, pc, #48	@ (adr r3, 8008a48 <_strtod_l+0xae8>)
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a20:	f7f8 f87a 	bl	8000b18 <__aeabi_dcmpgt>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d093      	beq.n	8008950 <_strtod_l+0x9f0>
 8008a28:	e4c8      	b.n	80083bc <_strtod_l+0x45c>
 8008a2a:	bf00      	nop
 8008a2c:	f3af 8000 	nop.w
 8008a30:	00000000 	.word	0x00000000
 8008a34:	bff00000 	.word	0xbff00000
 8008a38:	00000000 	.word	0x00000000
 8008a3c:	3ff00000 	.word	0x3ff00000
 8008a40:	94a03595 	.word	0x94a03595
 8008a44:	3fdfffff 	.word	0x3fdfffff
 8008a48:	35afe535 	.word	0x35afe535
 8008a4c:	3fe00000 	.word	0x3fe00000
 8008a50:	000fffff 	.word	0x000fffff
 8008a54:	7ff00000 	.word	0x7ff00000
 8008a58:	7fefffff 	.word	0x7fefffff
 8008a5c:	3ff00000 	.word	0x3ff00000
 8008a60:	3fe00000 	.word	0x3fe00000
 8008a64:	7fe00000 	.word	0x7fe00000
 8008a68:	7c9fffff 	.word	0x7c9fffff
 8008a6c:	9b08      	ldr	r3, [sp, #32]
 8008a6e:	b323      	cbz	r3, 8008aba <_strtod_l+0xb5a>
 8008a70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008a74:	d821      	bhi.n	8008aba <_strtod_l+0xb5a>
 8008a76:	a328      	add	r3, pc, #160	@ (adr r3, 8008b18 <_strtod_l+0xbb8>)
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	4639      	mov	r1, r7
 8008a80:	f7f8 f836 	bl	8000af0 <__aeabi_dcmple>
 8008a84:	b1a0      	cbz	r0, 8008ab0 <_strtod_l+0xb50>
 8008a86:	4639      	mov	r1, r7
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7f8 f88d 	bl	8000ba8 <__aeabi_d2uiz>
 8008a8e:	2801      	cmp	r0, #1
 8008a90:	bf38      	it	cc
 8008a92:	2001      	movcc	r0, #1
 8008a94:	f7f7 fd36 	bl	8000504 <__aeabi_ui2d>
 8008a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	460f      	mov	r7, r1
 8008a9e:	b9fb      	cbnz	r3, 8008ae0 <_strtod_l+0xb80>
 8008aa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008aa4:	9014      	str	r0, [sp, #80]	@ 0x50
 8008aa6:	9315      	str	r3, [sp, #84]	@ 0x54
 8008aa8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008aac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ab0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ab2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008ab6:	1b5b      	subs	r3, r3, r5
 8008ab8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008aba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008abe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008ac2:	f7ff f8f1 	bl	8007ca8 <__ulp>
 8008ac6:	4650      	mov	r0, sl
 8008ac8:	ec53 2b10 	vmov	r2, r3, d0
 8008acc:	4659      	mov	r1, fp
 8008ace:	f7f7 fd93 	bl	80005f8 <__aeabi_dmul>
 8008ad2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008ad6:	f7f7 fbd9 	bl	800028c <__adddf3>
 8008ada:	4682      	mov	sl, r0
 8008adc:	468b      	mov	fp, r1
 8008ade:	e770      	b.n	80089c2 <_strtod_l+0xa62>
 8008ae0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008ae4:	e7e0      	b.n	8008aa8 <_strtod_l+0xb48>
 8008ae6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b20 <_strtod_l+0xbc0>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f7f7 fff6 	bl	8000adc <__aeabi_dcmplt>
 8008af0:	e798      	b.n	8008a24 <_strtod_l+0xac4>
 8008af2:	2300      	movs	r3, #0
 8008af4:	930e      	str	r3, [sp, #56]	@ 0x38
 8008af6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008af8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	f7ff ba6d 	b.w	8007fda <_strtod_l+0x7a>
 8008b00:	2a65      	cmp	r2, #101	@ 0x65
 8008b02:	f43f ab68 	beq.w	80081d6 <_strtod_l+0x276>
 8008b06:	2a45      	cmp	r2, #69	@ 0x45
 8008b08:	f43f ab65 	beq.w	80081d6 <_strtod_l+0x276>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f7ff bba0 	b.w	8008252 <_strtod_l+0x2f2>
 8008b12:	bf00      	nop
 8008b14:	f3af 8000 	nop.w
 8008b18:	ffc00000 	.word	0xffc00000
 8008b1c:	41dfffff 	.word	0x41dfffff
 8008b20:	94a03595 	.word	0x94a03595
 8008b24:	3fcfffff 	.word	0x3fcfffff

08008b28 <_strtod_r>:
 8008b28:	4b01      	ldr	r3, [pc, #4]	@ (8008b30 <_strtod_r+0x8>)
 8008b2a:	f7ff ba19 	b.w	8007f60 <_strtod_l>
 8008b2e:	bf00      	nop
 8008b30:	20000080 	.word	0x20000080

08008b34 <_strtol_l.isra.0>:
 8008b34:	2b24      	cmp	r3, #36	@ 0x24
 8008b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3a:	4686      	mov	lr, r0
 8008b3c:	4690      	mov	r8, r2
 8008b3e:	d801      	bhi.n	8008b44 <_strtol_l.isra.0+0x10>
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d106      	bne.n	8008b52 <_strtol_l.isra.0+0x1e>
 8008b44:	f7fd fdb8 	bl	80066b8 <__errno>
 8008b48:	2316      	movs	r3, #22
 8008b4a:	6003      	str	r3, [r0, #0]
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b52:	4834      	ldr	r0, [pc, #208]	@ (8008c24 <_strtol_l.isra.0+0xf0>)
 8008b54:	460d      	mov	r5, r1
 8008b56:	462a      	mov	r2, r5
 8008b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b5c:	5d06      	ldrb	r6, [r0, r4]
 8008b5e:	f016 0608 	ands.w	r6, r6, #8
 8008b62:	d1f8      	bne.n	8008b56 <_strtol_l.isra.0+0x22>
 8008b64:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b66:	d110      	bne.n	8008b8a <_strtol_l.isra.0+0x56>
 8008b68:	782c      	ldrb	r4, [r5, #0]
 8008b6a:	2601      	movs	r6, #1
 8008b6c:	1c95      	adds	r5, r2, #2
 8008b6e:	f033 0210 	bics.w	r2, r3, #16
 8008b72:	d115      	bne.n	8008ba0 <_strtol_l.isra.0+0x6c>
 8008b74:	2c30      	cmp	r4, #48	@ 0x30
 8008b76:	d10d      	bne.n	8008b94 <_strtol_l.isra.0+0x60>
 8008b78:	782a      	ldrb	r2, [r5, #0]
 8008b7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b7e:	2a58      	cmp	r2, #88	@ 0x58
 8008b80:	d108      	bne.n	8008b94 <_strtol_l.isra.0+0x60>
 8008b82:	786c      	ldrb	r4, [r5, #1]
 8008b84:	3502      	adds	r5, #2
 8008b86:	2310      	movs	r3, #16
 8008b88:	e00a      	b.n	8008ba0 <_strtol_l.isra.0+0x6c>
 8008b8a:	2c2b      	cmp	r4, #43	@ 0x2b
 8008b8c:	bf04      	itt	eq
 8008b8e:	782c      	ldrbeq	r4, [r5, #0]
 8008b90:	1c95      	addeq	r5, r2, #2
 8008b92:	e7ec      	b.n	8008b6e <_strtol_l.isra.0+0x3a>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1f6      	bne.n	8008b86 <_strtol_l.isra.0+0x52>
 8008b98:	2c30      	cmp	r4, #48	@ 0x30
 8008b9a:	bf14      	ite	ne
 8008b9c:	230a      	movne	r3, #10
 8008b9e:	2308      	moveq	r3, #8
 8008ba0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ba4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008ba8:	2200      	movs	r2, #0
 8008baa:	fbbc f9f3 	udiv	r9, ip, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008bb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008bb8:	2f09      	cmp	r7, #9
 8008bba:	d80f      	bhi.n	8008bdc <_strtol_l.isra.0+0xa8>
 8008bbc:	463c      	mov	r4, r7
 8008bbe:	42a3      	cmp	r3, r4
 8008bc0:	dd1b      	ble.n	8008bfa <_strtol_l.isra.0+0xc6>
 8008bc2:	1c57      	adds	r7, r2, #1
 8008bc4:	d007      	beq.n	8008bd6 <_strtol_l.isra.0+0xa2>
 8008bc6:	4581      	cmp	r9, r0
 8008bc8:	d314      	bcc.n	8008bf4 <_strtol_l.isra.0+0xc0>
 8008bca:	d101      	bne.n	8008bd0 <_strtol_l.isra.0+0x9c>
 8008bcc:	45a2      	cmp	sl, r4
 8008bce:	db11      	blt.n	8008bf4 <_strtol_l.isra.0+0xc0>
 8008bd0:	fb00 4003 	mla	r0, r0, r3, r4
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bda:	e7eb      	b.n	8008bb4 <_strtol_l.isra.0+0x80>
 8008bdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008be0:	2f19      	cmp	r7, #25
 8008be2:	d801      	bhi.n	8008be8 <_strtol_l.isra.0+0xb4>
 8008be4:	3c37      	subs	r4, #55	@ 0x37
 8008be6:	e7ea      	b.n	8008bbe <_strtol_l.isra.0+0x8a>
 8008be8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008bec:	2f19      	cmp	r7, #25
 8008bee:	d804      	bhi.n	8008bfa <_strtol_l.isra.0+0xc6>
 8008bf0:	3c57      	subs	r4, #87	@ 0x57
 8008bf2:	e7e4      	b.n	8008bbe <_strtol_l.isra.0+0x8a>
 8008bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf8:	e7ed      	b.n	8008bd6 <_strtol_l.isra.0+0xa2>
 8008bfa:	1c53      	adds	r3, r2, #1
 8008bfc:	d108      	bne.n	8008c10 <_strtol_l.isra.0+0xdc>
 8008bfe:	2322      	movs	r3, #34	@ 0x22
 8008c00:	f8ce 3000 	str.w	r3, [lr]
 8008c04:	4660      	mov	r0, ip
 8008c06:	f1b8 0f00 	cmp.w	r8, #0
 8008c0a:	d0a0      	beq.n	8008b4e <_strtol_l.isra.0+0x1a>
 8008c0c:	1e69      	subs	r1, r5, #1
 8008c0e:	e006      	b.n	8008c1e <_strtol_l.isra.0+0xea>
 8008c10:	b106      	cbz	r6, 8008c14 <_strtol_l.isra.0+0xe0>
 8008c12:	4240      	negs	r0, r0
 8008c14:	f1b8 0f00 	cmp.w	r8, #0
 8008c18:	d099      	beq.n	8008b4e <_strtol_l.isra.0+0x1a>
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	d1f6      	bne.n	8008c0c <_strtol_l.isra.0+0xd8>
 8008c1e:	f8c8 1000 	str.w	r1, [r8]
 8008c22:	e794      	b.n	8008b4e <_strtol_l.isra.0+0x1a>
 8008c24:	0800a569 	.word	0x0800a569

08008c28 <_strtol_r>:
 8008c28:	f7ff bf84 	b.w	8008b34 <_strtol_l.isra.0>

08008c2c <__ssputs_r>:
 8008c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c30:	688e      	ldr	r6, [r1, #8]
 8008c32:	461f      	mov	r7, r3
 8008c34:	42be      	cmp	r6, r7
 8008c36:	680b      	ldr	r3, [r1, #0]
 8008c38:	4682      	mov	sl, r0
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	4690      	mov	r8, r2
 8008c3e:	d82d      	bhi.n	8008c9c <__ssputs_r+0x70>
 8008c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c48:	d026      	beq.n	8008c98 <__ssputs_r+0x6c>
 8008c4a:	6965      	ldr	r5, [r4, #20]
 8008c4c:	6909      	ldr	r1, [r1, #16]
 8008c4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c52:	eba3 0901 	sub.w	r9, r3, r1
 8008c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c5a:	1c7b      	adds	r3, r7, #1
 8008c5c:	444b      	add	r3, r9
 8008c5e:	106d      	asrs	r5, r5, #1
 8008c60:	429d      	cmp	r5, r3
 8008c62:	bf38      	it	cc
 8008c64:	461d      	movcc	r5, r3
 8008c66:	0553      	lsls	r3, r2, #21
 8008c68:	d527      	bpl.n	8008cba <__ssputs_r+0x8e>
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	f7fe fc24 	bl	80074b8 <_malloc_r>
 8008c70:	4606      	mov	r6, r0
 8008c72:	b360      	cbz	r0, 8008cce <__ssputs_r+0xa2>
 8008c74:	6921      	ldr	r1, [r4, #16]
 8008c76:	464a      	mov	r2, r9
 8008c78:	f000 fa18 	bl	80090ac <memcpy>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	6126      	str	r6, [r4, #16]
 8008c8a:	6165      	str	r5, [r4, #20]
 8008c8c:	444e      	add	r6, r9
 8008c8e:	eba5 0509 	sub.w	r5, r5, r9
 8008c92:	6026      	str	r6, [r4, #0]
 8008c94:	60a5      	str	r5, [r4, #8]
 8008c96:	463e      	mov	r6, r7
 8008c98:	42be      	cmp	r6, r7
 8008c9a:	d900      	bls.n	8008c9e <__ssputs_r+0x72>
 8008c9c:	463e      	mov	r6, r7
 8008c9e:	6820      	ldr	r0, [r4, #0]
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	4641      	mov	r1, r8
 8008ca4:	f000 f9c6 	bl	8009034 <memmove>
 8008ca8:	68a3      	ldr	r3, [r4, #8]
 8008caa:	1b9b      	subs	r3, r3, r6
 8008cac:	60a3      	str	r3, [r4, #8]
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	4433      	add	r3, r6
 8008cb2:	6023      	str	r3, [r4, #0]
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cba:	462a      	mov	r2, r5
 8008cbc:	f000 fd89 	bl	80097d2 <_realloc_r>
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d1e0      	bne.n	8008c88 <__ssputs_r+0x5c>
 8008cc6:	6921      	ldr	r1, [r4, #16]
 8008cc8:	4650      	mov	r0, sl
 8008cca:	f7fe fb81 	bl	80073d0 <_free_r>
 8008cce:	230c      	movs	r3, #12
 8008cd0:	f8ca 3000 	str.w	r3, [sl]
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cda:	81a3      	strh	r3, [r4, #12]
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	e7e9      	b.n	8008cb6 <__ssputs_r+0x8a>
	...

08008ce4 <_svfiprintf_r>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	4698      	mov	r8, r3
 8008cea:	898b      	ldrh	r3, [r1, #12]
 8008cec:	061b      	lsls	r3, r3, #24
 8008cee:	b09d      	sub	sp, #116	@ 0x74
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	4614      	mov	r4, r2
 8008cf6:	d510      	bpl.n	8008d1a <_svfiprintf_r+0x36>
 8008cf8:	690b      	ldr	r3, [r1, #16]
 8008cfa:	b973      	cbnz	r3, 8008d1a <_svfiprintf_r+0x36>
 8008cfc:	2140      	movs	r1, #64	@ 0x40
 8008cfe:	f7fe fbdb 	bl	80074b8 <_malloc_r>
 8008d02:	6028      	str	r0, [r5, #0]
 8008d04:	6128      	str	r0, [r5, #16]
 8008d06:	b930      	cbnz	r0, 8008d16 <_svfiprintf_r+0x32>
 8008d08:	230c      	movs	r3, #12
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	b01d      	add	sp, #116	@ 0x74
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d16:	2340      	movs	r3, #64	@ 0x40
 8008d18:	616b      	str	r3, [r5, #20]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d1e:	2320      	movs	r3, #32
 8008d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d28:	2330      	movs	r3, #48	@ 0x30
 8008d2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ec8 <_svfiprintf_r+0x1e4>
 8008d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d32:	f04f 0901 	mov.w	r9, #1
 8008d36:	4623      	mov	r3, r4
 8008d38:	469a      	mov	sl, r3
 8008d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d3e:	b10a      	cbz	r2, 8008d44 <_svfiprintf_r+0x60>
 8008d40:	2a25      	cmp	r2, #37	@ 0x25
 8008d42:	d1f9      	bne.n	8008d38 <_svfiprintf_r+0x54>
 8008d44:	ebba 0b04 	subs.w	fp, sl, r4
 8008d48:	d00b      	beq.n	8008d62 <_svfiprintf_r+0x7e>
 8008d4a:	465b      	mov	r3, fp
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4638      	mov	r0, r7
 8008d52:	f7ff ff6b 	bl	8008c2c <__ssputs_r>
 8008d56:	3001      	adds	r0, #1
 8008d58:	f000 80a7 	beq.w	8008eaa <_svfiprintf_r+0x1c6>
 8008d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d5e:	445a      	add	r2, fp
 8008d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d62:	f89a 3000 	ldrb.w	r3, [sl]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 809f 	beq.w	8008eaa <_svfiprintf_r+0x1c6>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d76:	f10a 0a01 	add.w	sl, sl, #1
 8008d7a:	9304      	str	r3, [sp, #16]
 8008d7c:	9307      	str	r3, [sp, #28]
 8008d7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d84:	4654      	mov	r4, sl
 8008d86:	2205      	movs	r2, #5
 8008d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8c:	484e      	ldr	r0, [pc, #312]	@ (8008ec8 <_svfiprintf_r+0x1e4>)
 8008d8e:	f7f7 fa1f 	bl	80001d0 <memchr>
 8008d92:	9a04      	ldr	r2, [sp, #16]
 8008d94:	b9d8      	cbnz	r0, 8008dce <_svfiprintf_r+0xea>
 8008d96:	06d0      	lsls	r0, r2, #27
 8008d98:	bf44      	itt	mi
 8008d9a:	2320      	movmi	r3, #32
 8008d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008da0:	0711      	lsls	r1, r2, #28
 8008da2:	bf44      	itt	mi
 8008da4:	232b      	movmi	r3, #43	@ 0x2b
 8008da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008daa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8008db0:	d015      	beq.n	8008dde <_svfiprintf_r+0xfa>
 8008db2:	9a07      	ldr	r2, [sp, #28]
 8008db4:	4654      	mov	r4, sl
 8008db6:	2000      	movs	r0, #0
 8008db8:	f04f 0c0a 	mov.w	ip, #10
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dc2:	3b30      	subs	r3, #48	@ 0x30
 8008dc4:	2b09      	cmp	r3, #9
 8008dc6:	d94b      	bls.n	8008e60 <_svfiprintf_r+0x17c>
 8008dc8:	b1b0      	cbz	r0, 8008df8 <_svfiprintf_r+0x114>
 8008dca:	9207      	str	r2, [sp, #28]
 8008dcc:	e014      	b.n	8008df8 <_svfiprintf_r+0x114>
 8008dce:	eba0 0308 	sub.w	r3, r0, r8
 8008dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	9304      	str	r3, [sp, #16]
 8008dda:	46a2      	mov	sl, r4
 8008ddc:	e7d2      	b.n	8008d84 <_svfiprintf_r+0xa0>
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	1d19      	adds	r1, r3, #4
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	9103      	str	r1, [sp, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	bfbb      	ittet	lt
 8008dea:	425b      	neglt	r3, r3
 8008dec:	f042 0202 	orrlt.w	r2, r2, #2
 8008df0:	9307      	strge	r3, [sp, #28]
 8008df2:	9307      	strlt	r3, [sp, #28]
 8008df4:	bfb8      	it	lt
 8008df6:	9204      	strlt	r2, [sp, #16]
 8008df8:	7823      	ldrb	r3, [r4, #0]
 8008dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dfc:	d10a      	bne.n	8008e14 <_svfiprintf_r+0x130>
 8008dfe:	7863      	ldrb	r3, [r4, #1]
 8008e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e02:	d132      	bne.n	8008e6a <_svfiprintf_r+0x186>
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	1d1a      	adds	r2, r3, #4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	9203      	str	r2, [sp, #12]
 8008e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e10:	3402      	adds	r4, #2
 8008e12:	9305      	str	r3, [sp, #20]
 8008e14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ed8 <_svfiprintf_r+0x1f4>
 8008e18:	7821      	ldrb	r1, [r4, #0]
 8008e1a:	2203      	movs	r2, #3
 8008e1c:	4650      	mov	r0, sl
 8008e1e:	f7f7 f9d7 	bl	80001d0 <memchr>
 8008e22:	b138      	cbz	r0, 8008e34 <_svfiprintf_r+0x150>
 8008e24:	9b04      	ldr	r3, [sp, #16]
 8008e26:	eba0 000a 	sub.w	r0, r0, sl
 8008e2a:	2240      	movs	r2, #64	@ 0x40
 8008e2c:	4082      	lsls	r2, r0
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	3401      	adds	r4, #1
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e38:	4824      	ldr	r0, [pc, #144]	@ (8008ecc <_svfiprintf_r+0x1e8>)
 8008e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e3e:	2206      	movs	r2, #6
 8008e40:	f7f7 f9c6 	bl	80001d0 <memchr>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d036      	beq.n	8008eb6 <_svfiprintf_r+0x1d2>
 8008e48:	4b21      	ldr	r3, [pc, #132]	@ (8008ed0 <_svfiprintf_r+0x1ec>)
 8008e4a:	bb1b      	cbnz	r3, 8008e94 <_svfiprintf_r+0x1b0>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	3307      	adds	r3, #7
 8008e50:	f023 0307 	bic.w	r3, r3, #7
 8008e54:	3308      	adds	r3, #8
 8008e56:	9303      	str	r3, [sp, #12]
 8008e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e5a:	4433      	add	r3, r6
 8008e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e5e:	e76a      	b.n	8008d36 <_svfiprintf_r+0x52>
 8008e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e64:	460c      	mov	r4, r1
 8008e66:	2001      	movs	r0, #1
 8008e68:	e7a8      	b.n	8008dbc <_svfiprintf_r+0xd8>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	3401      	adds	r4, #1
 8008e6e:	9305      	str	r3, [sp, #20]
 8008e70:	4619      	mov	r1, r3
 8008e72:	f04f 0c0a 	mov.w	ip, #10
 8008e76:	4620      	mov	r0, r4
 8008e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e7c:	3a30      	subs	r2, #48	@ 0x30
 8008e7e:	2a09      	cmp	r2, #9
 8008e80:	d903      	bls.n	8008e8a <_svfiprintf_r+0x1a6>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0c6      	beq.n	8008e14 <_svfiprintf_r+0x130>
 8008e86:	9105      	str	r1, [sp, #20]
 8008e88:	e7c4      	b.n	8008e14 <_svfiprintf_r+0x130>
 8008e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e8e:	4604      	mov	r4, r0
 8008e90:	2301      	movs	r3, #1
 8008e92:	e7f0      	b.n	8008e76 <_svfiprintf_r+0x192>
 8008e94:	ab03      	add	r3, sp, #12
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	462a      	mov	r2, r5
 8008e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed4 <_svfiprintf_r+0x1f0>)
 8008e9c:	a904      	add	r1, sp, #16
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	f7fc fccc 	bl	800583c <_printf_float>
 8008ea4:	1c42      	adds	r2, r0, #1
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	d1d6      	bne.n	8008e58 <_svfiprintf_r+0x174>
 8008eaa:	89ab      	ldrh	r3, [r5, #12]
 8008eac:	065b      	lsls	r3, r3, #25
 8008eae:	f53f af2d 	bmi.w	8008d0c <_svfiprintf_r+0x28>
 8008eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008eb4:	e72c      	b.n	8008d10 <_svfiprintf_r+0x2c>
 8008eb6:	ab03      	add	r3, sp, #12
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4b05      	ldr	r3, [pc, #20]	@ (8008ed4 <_svfiprintf_r+0x1f0>)
 8008ebe:	a904      	add	r1, sp, #16
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7fc ff53 	bl	8005d6c <_printf_i>
 8008ec6:	e7ed      	b.n	8008ea4 <_svfiprintf_r+0x1c0>
 8008ec8:	0800a365 	.word	0x0800a365
 8008ecc:	0800a36f 	.word	0x0800a36f
 8008ed0:	0800583d 	.word	0x0800583d
 8008ed4:	08008c2d 	.word	0x08008c2d
 8008ed8:	0800a36b 	.word	0x0800a36b

08008edc <__sflush_r>:
 8008edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee4:	0716      	lsls	r6, r2, #28
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	460c      	mov	r4, r1
 8008eea:	d454      	bmi.n	8008f96 <__sflush_r+0xba>
 8008eec:	684b      	ldr	r3, [r1, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dc02      	bgt.n	8008ef8 <__sflush_r+0x1c>
 8008ef2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	dd48      	ble.n	8008f8a <__sflush_r+0xae>
 8008ef8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008efa:	2e00      	cmp	r6, #0
 8008efc:	d045      	beq.n	8008f8a <__sflush_r+0xae>
 8008efe:	2300      	movs	r3, #0
 8008f00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f04:	682f      	ldr	r7, [r5, #0]
 8008f06:	6a21      	ldr	r1, [r4, #32]
 8008f08:	602b      	str	r3, [r5, #0]
 8008f0a:	d030      	beq.n	8008f6e <__sflush_r+0x92>
 8008f0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	0759      	lsls	r1, r3, #29
 8008f12:	d505      	bpl.n	8008f20 <__sflush_r+0x44>
 8008f14:	6863      	ldr	r3, [r4, #4]
 8008f16:	1ad2      	subs	r2, r2, r3
 8008f18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f1a:	b10b      	cbz	r3, 8008f20 <__sflush_r+0x44>
 8008f1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f1e:	1ad2      	subs	r2, r2, r3
 8008f20:	2300      	movs	r3, #0
 8008f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f24:	6a21      	ldr	r1, [r4, #32]
 8008f26:	4628      	mov	r0, r5
 8008f28:	47b0      	blx	r6
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	d106      	bne.n	8008f3e <__sflush_r+0x62>
 8008f30:	6829      	ldr	r1, [r5, #0]
 8008f32:	291d      	cmp	r1, #29
 8008f34:	d82b      	bhi.n	8008f8e <__sflush_r+0xb2>
 8008f36:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe0 <__sflush_r+0x104>)
 8008f38:	40ca      	lsrs	r2, r1
 8008f3a:	07d6      	lsls	r6, r2, #31
 8008f3c:	d527      	bpl.n	8008f8e <__sflush_r+0xb2>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	6062      	str	r2, [r4, #4]
 8008f42:	04d9      	lsls	r1, r3, #19
 8008f44:	6922      	ldr	r2, [r4, #16]
 8008f46:	6022      	str	r2, [r4, #0]
 8008f48:	d504      	bpl.n	8008f54 <__sflush_r+0x78>
 8008f4a:	1c42      	adds	r2, r0, #1
 8008f4c:	d101      	bne.n	8008f52 <__sflush_r+0x76>
 8008f4e:	682b      	ldr	r3, [r5, #0]
 8008f50:	b903      	cbnz	r3, 8008f54 <__sflush_r+0x78>
 8008f52:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f56:	602f      	str	r7, [r5, #0]
 8008f58:	b1b9      	cbz	r1, 8008f8a <__sflush_r+0xae>
 8008f5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	d002      	beq.n	8008f68 <__sflush_r+0x8c>
 8008f62:	4628      	mov	r0, r5
 8008f64:	f7fe fa34 	bl	80073d0 <_free_r>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f6c:	e00d      	b.n	8008f8a <__sflush_r+0xae>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b0      	blx	r6
 8008f74:	4602      	mov	r2, r0
 8008f76:	1c50      	adds	r0, r2, #1
 8008f78:	d1c9      	bne.n	8008f0e <__sflush_r+0x32>
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0c6      	beq.n	8008f0e <__sflush_r+0x32>
 8008f80:	2b1d      	cmp	r3, #29
 8008f82:	d001      	beq.n	8008f88 <__sflush_r+0xac>
 8008f84:	2b16      	cmp	r3, #22
 8008f86:	d11e      	bne.n	8008fc6 <__sflush_r+0xea>
 8008f88:	602f      	str	r7, [r5, #0]
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	e022      	b.n	8008fd4 <__sflush_r+0xf8>
 8008f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f92:	b21b      	sxth	r3, r3
 8008f94:	e01b      	b.n	8008fce <__sflush_r+0xf2>
 8008f96:	690f      	ldr	r7, [r1, #16]
 8008f98:	2f00      	cmp	r7, #0
 8008f9a:	d0f6      	beq.n	8008f8a <__sflush_r+0xae>
 8008f9c:	0793      	lsls	r3, r2, #30
 8008f9e:	680e      	ldr	r6, [r1, #0]
 8008fa0:	bf08      	it	eq
 8008fa2:	694b      	ldreq	r3, [r1, #20]
 8008fa4:	600f      	str	r7, [r1, #0]
 8008fa6:	bf18      	it	ne
 8008fa8:	2300      	movne	r3, #0
 8008faa:	eba6 0807 	sub.w	r8, r6, r7
 8008fae:	608b      	str	r3, [r1, #8]
 8008fb0:	f1b8 0f00 	cmp.w	r8, #0
 8008fb4:	dde9      	ble.n	8008f8a <__sflush_r+0xae>
 8008fb6:	6a21      	ldr	r1, [r4, #32]
 8008fb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fba:	4643      	mov	r3, r8
 8008fbc:	463a      	mov	r2, r7
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	47b0      	blx	r6
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	dc08      	bgt.n	8008fd8 <__sflush_r+0xfc>
 8008fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd8:	4407      	add	r7, r0
 8008fda:	eba8 0800 	sub.w	r8, r8, r0
 8008fde:	e7e7      	b.n	8008fb0 <__sflush_r+0xd4>
 8008fe0:	20400001 	.word	0x20400001

08008fe4 <_fflush_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	690b      	ldr	r3, [r1, #16]
 8008fe8:	4605      	mov	r5, r0
 8008fea:	460c      	mov	r4, r1
 8008fec:	b913      	cbnz	r3, 8008ff4 <_fflush_r+0x10>
 8008fee:	2500      	movs	r5, #0
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	b118      	cbz	r0, 8008ffe <_fflush_r+0x1a>
 8008ff6:	6a03      	ldr	r3, [r0, #32]
 8008ff8:	b90b      	cbnz	r3, 8008ffe <_fflush_r+0x1a>
 8008ffa:	f7fd fa6f 	bl	80064dc <__sinit>
 8008ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0f3      	beq.n	8008fee <_fflush_r+0xa>
 8009006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009008:	07d0      	lsls	r0, r2, #31
 800900a:	d404      	bmi.n	8009016 <_fflush_r+0x32>
 800900c:	0599      	lsls	r1, r3, #22
 800900e:	d402      	bmi.n	8009016 <_fflush_r+0x32>
 8009010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009012:	f7fd fb7c 	bl	800670e <__retarget_lock_acquire_recursive>
 8009016:	4628      	mov	r0, r5
 8009018:	4621      	mov	r1, r4
 800901a:	f7ff ff5f 	bl	8008edc <__sflush_r>
 800901e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009020:	07da      	lsls	r2, r3, #31
 8009022:	4605      	mov	r5, r0
 8009024:	d4e4      	bmi.n	8008ff0 <_fflush_r+0xc>
 8009026:	89a3      	ldrh	r3, [r4, #12]
 8009028:	059b      	lsls	r3, r3, #22
 800902a:	d4e1      	bmi.n	8008ff0 <_fflush_r+0xc>
 800902c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800902e:	f7fd fb6f 	bl	8006710 <__retarget_lock_release_recursive>
 8009032:	e7dd      	b.n	8008ff0 <_fflush_r+0xc>

08009034 <memmove>:
 8009034:	4288      	cmp	r0, r1
 8009036:	b510      	push	{r4, lr}
 8009038:	eb01 0402 	add.w	r4, r1, r2
 800903c:	d902      	bls.n	8009044 <memmove+0x10>
 800903e:	4284      	cmp	r4, r0
 8009040:	4623      	mov	r3, r4
 8009042:	d807      	bhi.n	8009054 <memmove+0x20>
 8009044:	1e43      	subs	r3, r0, #1
 8009046:	42a1      	cmp	r1, r4
 8009048:	d008      	beq.n	800905c <memmove+0x28>
 800904a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800904e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009052:	e7f8      	b.n	8009046 <memmove+0x12>
 8009054:	4402      	add	r2, r0
 8009056:	4601      	mov	r1, r0
 8009058:	428a      	cmp	r2, r1
 800905a:	d100      	bne.n	800905e <memmove+0x2a>
 800905c:	bd10      	pop	{r4, pc}
 800905e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009066:	e7f7      	b.n	8009058 <memmove+0x24>

08009068 <strncmp>:
 8009068:	b510      	push	{r4, lr}
 800906a:	b16a      	cbz	r2, 8009088 <strncmp+0x20>
 800906c:	3901      	subs	r1, #1
 800906e:	1884      	adds	r4, r0, r2
 8009070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009074:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009078:	429a      	cmp	r2, r3
 800907a:	d103      	bne.n	8009084 <strncmp+0x1c>
 800907c:	42a0      	cmp	r0, r4
 800907e:	d001      	beq.n	8009084 <strncmp+0x1c>
 8009080:	2a00      	cmp	r2, #0
 8009082:	d1f5      	bne.n	8009070 <strncmp+0x8>
 8009084:	1ad0      	subs	r0, r2, r3
 8009086:	bd10      	pop	{r4, pc}
 8009088:	4610      	mov	r0, r2
 800908a:	e7fc      	b.n	8009086 <strncmp+0x1e>

0800908c <_sbrk_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d06      	ldr	r5, [pc, #24]	@ (80090a8 <_sbrk_r+0x1c>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	602b      	str	r3, [r5, #0]
 8009098:	f7f8 fcbc 	bl	8001a14 <_sbrk>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d102      	bne.n	80090a6 <_sbrk_r+0x1a>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	b103      	cbz	r3, 80090a6 <_sbrk_r+0x1a>
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	200004f4 	.word	0x200004f4

080090ac <memcpy>:
 80090ac:	440a      	add	r2, r1
 80090ae:	4291      	cmp	r1, r2
 80090b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090b4:	d100      	bne.n	80090b8 <memcpy+0xc>
 80090b6:	4770      	bx	lr
 80090b8:	b510      	push	{r4, lr}
 80090ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090c2:	4291      	cmp	r1, r2
 80090c4:	d1f9      	bne.n	80090ba <memcpy+0xe>
 80090c6:	bd10      	pop	{r4, pc}

080090c8 <nan>:
 80090c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80090d0 <nan+0x8>
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	00000000 	.word	0x00000000
 80090d4:	7ff80000 	.word	0x7ff80000

080090d8 <__assert_func>:
 80090d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090da:	4614      	mov	r4, r2
 80090dc:	461a      	mov	r2, r3
 80090de:	4b09      	ldr	r3, [pc, #36]	@ (8009104 <__assert_func+0x2c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4605      	mov	r5, r0
 80090e4:	68d8      	ldr	r0, [r3, #12]
 80090e6:	b14c      	cbz	r4, 80090fc <__assert_func+0x24>
 80090e8:	4b07      	ldr	r3, [pc, #28]	@ (8009108 <__assert_func+0x30>)
 80090ea:	9100      	str	r1, [sp, #0]
 80090ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090f0:	4906      	ldr	r1, [pc, #24]	@ (800910c <__assert_func+0x34>)
 80090f2:	462b      	mov	r3, r5
 80090f4:	f000 fba8 	bl	8009848 <fiprintf>
 80090f8:	f000 fbb8 	bl	800986c <abort>
 80090fc:	4b04      	ldr	r3, [pc, #16]	@ (8009110 <__assert_func+0x38>)
 80090fe:	461c      	mov	r4, r3
 8009100:	e7f3      	b.n	80090ea <__assert_func+0x12>
 8009102:	bf00      	nop
 8009104:	20000030 	.word	0x20000030
 8009108:	0800a37e 	.word	0x0800a37e
 800910c:	0800a38b 	.word	0x0800a38b
 8009110:	0800a3b9 	.word	0x0800a3b9

08009114 <_calloc_r>:
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	fba1 5402 	umull	r5, r4, r1, r2
 800911a:	b934      	cbnz	r4, 800912a <_calloc_r+0x16>
 800911c:	4629      	mov	r1, r5
 800911e:	f7fe f9cb 	bl	80074b8 <_malloc_r>
 8009122:	4606      	mov	r6, r0
 8009124:	b928      	cbnz	r0, 8009132 <_calloc_r+0x1e>
 8009126:	4630      	mov	r0, r6
 8009128:	bd70      	pop	{r4, r5, r6, pc}
 800912a:	220c      	movs	r2, #12
 800912c:	6002      	str	r2, [r0, #0]
 800912e:	2600      	movs	r6, #0
 8009130:	e7f9      	b.n	8009126 <_calloc_r+0x12>
 8009132:	462a      	mov	r2, r5
 8009134:	4621      	mov	r1, r4
 8009136:	f7fd fa6c 	bl	8006612 <memset>
 800913a:	e7f4      	b.n	8009126 <_calloc_r+0x12>

0800913c <rshift>:
 800913c:	6903      	ldr	r3, [r0, #16]
 800913e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009142:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009146:	ea4f 1261 	mov.w	r2, r1, asr #5
 800914a:	f100 0414 	add.w	r4, r0, #20
 800914e:	dd45      	ble.n	80091dc <rshift+0xa0>
 8009150:	f011 011f 	ands.w	r1, r1, #31
 8009154:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009158:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800915c:	d10c      	bne.n	8009178 <rshift+0x3c>
 800915e:	f100 0710 	add.w	r7, r0, #16
 8009162:	4629      	mov	r1, r5
 8009164:	42b1      	cmp	r1, r6
 8009166:	d334      	bcc.n	80091d2 <rshift+0x96>
 8009168:	1a9b      	subs	r3, r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	1eea      	subs	r2, r5, #3
 800916e:	4296      	cmp	r6, r2
 8009170:	bf38      	it	cc
 8009172:	2300      	movcc	r3, #0
 8009174:	4423      	add	r3, r4
 8009176:	e015      	b.n	80091a4 <rshift+0x68>
 8009178:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800917c:	f1c1 0820 	rsb	r8, r1, #32
 8009180:	40cf      	lsrs	r7, r1
 8009182:	f105 0e04 	add.w	lr, r5, #4
 8009186:	46a1      	mov	r9, r4
 8009188:	4576      	cmp	r6, lr
 800918a:	46f4      	mov	ip, lr
 800918c:	d815      	bhi.n	80091ba <rshift+0x7e>
 800918e:	1a9a      	subs	r2, r3, r2
 8009190:	0092      	lsls	r2, r2, #2
 8009192:	3a04      	subs	r2, #4
 8009194:	3501      	adds	r5, #1
 8009196:	42ae      	cmp	r6, r5
 8009198:	bf38      	it	cc
 800919a:	2200      	movcc	r2, #0
 800919c:	18a3      	adds	r3, r4, r2
 800919e:	50a7      	str	r7, [r4, r2]
 80091a0:	b107      	cbz	r7, 80091a4 <rshift+0x68>
 80091a2:	3304      	adds	r3, #4
 80091a4:	1b1a      	subs	r2, r3, r4
 80091a6:	42a3      	cmp	r3, r4
 80091a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091ac:	bf08      	it	eq
 80091ae:	2300      	moveq	r3, #0
 80091b0:	6102      	str	r2, [r0, #16]
 80091b2:	bf08      	it	eq
 80091b4:	6143      	streq	r3, [r0, #20]
 80091b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091ba:	f8dc c000 	ldr.w	ip, [ip]
 80091be:	fa0c fc08 	lsl.w	ip, ip, r8
 80091c2:	ea4c 0707 	orr.w	r7, ip, r7
 80091c6:	f849 7b04 	str.w	r7, [r9], #4
 80091ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091ce:	40cf      	lsrs	r7, r1
 80091d0:	e7da      	b.n	8009188 <rshift+0x4c>
 80091d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80091d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80091da:	e7c3      	b.n	8009164 <rshift+0x28>
 80091dc:	4623      	mov	r3, r4
 80091de:	e7e1      	b.n	80091a4 <rshift+0x68>

080091e0 <__hexdig_fun>:
 80091e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80091e4:	2b09      	cmp	r3, #9
 80091e6:	d802      	bhi.n	80091ee <__hexdig_fun+0xe>
 80091e8:	3820      	subs	r0, #32
 80091ea:	b2c0      	uxtb	r0, r0
 80091ec:	4770      	bx	lr
 80091ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80091f2:	2b05      	cmp	r3, #5
 80091f4:	d801      	bhi.n	80091fa <__hexdig_fun+0x1a>
 80091f6:	3847      	subs	r0, #71	@ 0x47
 80091f8:	e7f7      	b.n	80091ea <__hexdig_fun+0xa>
 80091fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80091fe:	2b05      	cmp	r3, #5
 8009200:	d801      	bhi.n	8009206 <__hexdig_fun+0x26>
 8009202:	3827      	subs	r0, #39	@ 0x27
 8009204:	e7f1      	b.n	80091ea <__hexdig_fun+0xa>
 8009206:	2000      	movs	r0, #0
 8009208:	4770      	bx	lr
	...

0800920c <__gethex>:
 800920c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	b085      	sub	sp, #20
 8009212:	468a      	mov	sl, r1
 8009214:	9302      	str	r3, [sp, #8]
 8009216:	680b      	ldr	r3, [r1, #0]
 8009218:	9001      	str	r0, [sp, #4]
 800921a:	4690      	mov	r8, r2
 800921c:	1c9c      	adds	r4, r3, #2
 800921e:	46a1      	mov	r9, r4
 8009220:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009224:	2830      	cmp	r0, #48	@ 0x30
 8009226:	d0fa      	beq.n	800921e <__gethex+0x12>
 8009228:	eba9 0303 	sub.w	r3, r9, r3
 800922c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009230:	f7ff ffd6 	bl	80091e0 <__hexdig_fun>
 8009234:	4605      	mov	r5, r0
 8009236:	2800      	cmp	r0, #0
 8009238:	d168      	bne.n	800930c <__gethex+0x100>
 800923a:	49a0      	ldr	r1, [pc, #640]	@ (80094bc <__gethex+0x2b0>)
 800923c:	2201      	movs	r2, #1
 800923e:	4648      	mov	r0, r9
 8009240:	f7ff ff12 	bl	8009068 <strncmp>
 8009244:	4607      	mov	r7, r0
 8009246:	2800      	cmp	r0, #0
 8009248:	d167      	bne.n	800931a <__gethex+0x10e>
 800924a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800924e:	4626      	mov	r6, r4
 8009250:	f7ff ffc6 	bl	80091e0 <__hexdig_fun>
 8009254:	2800      	cmp	r0, #0
 8009256:	d062      	beq.n	800931e <__gethex+0x112>
 8009258:	4623      	mov	r3, r4
 800925a:	7818      	ldrb	r0, [r3, #0]
 800925c:	2830      	cmp	r0, #48	@ 0x30
 800925e:	4699      	mov	r9, r3
 8009260:	f103 0301 	add.w	r3, r3, #1
 8009264:	d0f9      	beq.n	800925a <__gethex+0x4e>
 8009266:	f7ff ffbb 	bl	80091e0 <__hexdig_fun>
 800926a:	fab0 f580 	clz	r5, r0
 800926e:	096d      	lsrs	r5, r5, #5
 8009270:	f04f 0b01 	mov.w	fp, #1
 8009274:	464a      	mov	r2, r9
 8009276:	4616      	mov	r6, r2
 8009278:	3201      	adds	r2, #1
 800927a:	7830      	ldrb	r0, [r6, #0]
 800927c:	f7ff ffb0 	bl	80091e0 <__hexdig_fun>
 8009280:	2800      	cmp	r0, #0
 8009282:	d1f8      	bne.n	8009276 <__gethex+0x6a>
 8009284:	498d      	ldr	r1, [pc, #564]	@ (80094bc <__gethex+0x2b0>)
 8009286:	2201      	movs	r2, #1
 8009288:	4630      	mov	r0, r6
 800928a:	f7ff feed 	bl	8009068 <strncmp>
 800928e:	2800      	cmp	r0, #0
 8009290:	d13f      	bne.n	8009312 <__gethex+0x106>
 8009292:	b944      	cbnz	r4, 80092a6 <__gethex+0x9a>
 8009294:	1c74      	adds	r4, r6, #1
 8009296:	4622      	mov	r2, r4
 8009298:	4616      	mov	r6, r2
 800929a:	3201      	adds	r2, #1
 800929c:	7830      	ldrb	r0, [r6, #0]
 800929e:	f7ff ff9f 	bl	80091e0 <__hexdig_fun>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d1f8      	bne.n	8009298 <__gethex+0x8c>
 80092a6:	1ba4      	subs	r4, r4, r6
 80092a8:	00a7      	lsls	r7, r4, #2
 80092aa:	7833      	ldrb	r3, [r6, #0]
 80092ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80092b0:	2b50      	cmp	r3, #80	@ 0x50
 80092b2:	d13e      	bne.n	8009332 <__gethex+0x126>
 80092b4:	7873      	ldrb	r3, [r6, #1]
 80092b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80092b8:	d033      	beq.n	8009322 <__gethex+0x116>
 80092ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80092bc:	d034      	beq.n	8009328 <__gethex+0x11c>
 80092be:	1c71      	adds	r1, r6, #1
 80092c0:	2400      	movs	r4, #0
 80092c2:	7808      	ldrb	r0, [r1, #0]
 80092c4:	f7ff ff8c 	bl	80091e0 <__hexdig_fun>
 80092c8:	1e43      	subs	r3, r0, #1
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b18      	cmp	r3, #24
 80092ce:	d830      	bhi.n	8009332 <__gethex+0x126>
 80092d0:	f1a0 0210 	sub.w	r2, r0, #16
 80092d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092d8:	f7ff ff82 	bl	80091e0 <__hexdig_fun>
 80092dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80092e0:	fa5f fc8c 	uxtb.w	ip, ip
 80092e4:	f1bc 0f18 	cmp.w	ip, #24
 80092e8:	f04f 030a 	mov.w	r3, #10
 80092ec:	d91e      	bls.n	800932c <__gethex+0x120>
 80092ee:	b104      	cbz	r4, 80092f2 <__gethex+0xe6>
 80092f0:	4252      	negs	r2, r2
 80092f2:	4417      	add	r7, r2
 80092f4:	f8ca 1000 	str.w	r1, [sl]
 80092f8:	b1ed      	cbz	r5, 8009336 <__gethex+0x12a>
 80092fa:	f1bb 0f00 	cmp.w	fp, #0
 80092fe:	bf0c      	ite	eq
 8009300:	2506      	moveq	r5, #6
 8009302:	2500      	movne	r5, #0
 8009304:	4628      	mov	r0, r5
 8009306:	b005      	add	sp, #20
 8009308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930c:	2500      	movs	r5, #0
 800930e:	462c      	mov	r4, r5
 8009310:	e7b0      	b.n	8009274 <__gethex+0x68>
 8009312:	2c00      	cmp	r4, #0
 8009314:	d1c7      	bne.n	80092a6 <__gethex+0x9a>
 8009316:	4627      	mov	r7, r4
 8009318:	e7c7      	b.n	80092aa <__gethex+0x9e>
 800931a:	464e      	mov	r6, r9
 800931c:	462f      	mov	r7, r5
 800931e:	2501      	movs	r5, #1
 8009320:	e7c3      	b.n	80092aa <__gethex+0x9e>
 8009322:	2400      	movs	r4, #0
 8009324:	1cb1      	adds	r1, r6, #2
 8009326:	e7cc      	b.n	80092c2 <__gethex+0xb6>
 8009328:	2401      	movs	r4, #1
 800932a:	e7fb      	b.n	8009324 <__gethex+0x118>
 800932c:	fb03 0002 	mla	r0, r3, r2, r0
 8009330:	e7ce      	b.n	80092d0 <__gethex+0xc4>
 8009332:	4631      	mov	r1, r6
 8009334:	e7de      	b.n	80092f4 <__gethex+0xe8>
 8009336:	eba6 0309 	sub.w	r3, r6, r9
 800933a:	3b01      	subs	r3, #1
 800933c:	4629      	mov	r1, r5
 800933e:	2b07      	cmp	r3, #7
 8009340:	dc0a      	bgt.n	8009358 <__gethex+0x14c>
 8009342:	9801      	ldr	r0, [sp, #4]
 8009344:	f7fe f944 	bl	80075d0 <_Balloc>
 8009348:	4604      	mov	r4, r0
 800934a:	b940      	cbnz	r0, 800935e <__gethex+0x152>
 800934c:	4b5c      	ldr	r3, [pc, #368]	@ (80094c0 <__gethex+0x2b4>)
 800934e:	4602      	mov	r2, r0
 8009350:	21e4      	movs	r1, #228	@ 0xe4
 8009352:	485c      	ldr	r0, [pc, #368]	@ (80094c4 <__gethex+0x2b8>)
 8009354:	f7ff fec0 	bl	80090d8 <__assert_func>
 8009358:	3101      	adds	r1, #1
 800935a:	105b      	asrs	r3, r3, #1
 800935c:	e7ef      	b.n	800933e <__gethex+0x132>
 800935e:	f100 0a14 	add.w	sl, r0, #20
 8009362:	2300      	movs	r3, #0
 8009364:	4655      	mov	r5, sl
 8009366:	469b      	mov	fp, r3
 8009368:	45b1      	cmp	r9, r6
 800936a:	d337      	bcc.n	80093dc <__gethex+0x1d0>
 800936c:	f845 bb04 	str.w	fp, [r5], #4
 8009370:	eba5 050a 	sub.w	r5, r5, sl
 8009374:	10ad      	asrs	r5, r5, #2
 8009376:	6125      	str	r5, [r4, #16]
 8009378:	4658      	mov	r0, fp
 800937a:	f7fe fa1b 	bl	80077b4 <__hi0bits>
 800937e:	016d      	lsls	r5, r5, #5
 8009380:	f8d8 6000 	ldr.w	r6, [r8]
 8009384:	1a2d      	subs	r5, r5, r0
 8009386:	42b5      	cmp	r5, r6
 8009388:	dd54      	ble.n	8009434 <__gethex+0x228>
 800938a:	1bad      	subs	r5, r5, r6
 800938c:	4629      	mov	r1, r5
 800938e:	4620      	mov	r0, r4
 8009390:	f7fe fda7 	bl	8007ee2 <__any_on>
 8009394:	4681      	mov	r9, r0
 8009396:	b178      	cbz	r0, 80093b8 <__gethex+0x1ac>
 8009398:	1e6b      	subs	r3, r5, #1
 800939a:	1159      	asrs	r1, r3, #5
 800939c:	f003 021f 	and.w	r2, r3, #31
 80093a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80093a4:	f04f 0901 	mov.w	r9, #1
 80093a8:	fa09 f202 	lsl.w	r2, r9, r2
 80093ac:	420a      	tst	r2, r1
 80093ae:	d003      	beq.n	80093b8 <__gethex+0x1ac>
 80093b0:	454b      	cmp	r3, r9
 80093b2:	dc36      	bgt.n	8009422 <__gethex+0x216>
 80093b4:	f04f 0902 	mov.w	r9, #2
 80093b8:	4629      	mov	r1, r5
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff febe 	bl	800913c <rshift>
 80093c0:	442f      	add	r7, r5
 80093c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093c6:	42bb      	cmp	r3, r7
 80093c8:	da42      	bge.n	8009450 <__gethex+0x244>
 80093ca:	9801      	ldr	r0, [sp, #4]
 80093cc:	4621      	mov	r1, r4
 80093ce:	f7fe f93f 	bl	8007650 <_Bfree>
 80093d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093d4:	2300      	movs	r3, #0
 80093d6:	6013      	str	r3, [r2, #0]
 80093d8:	25a3      	movs	r5, #163	@ 0xa3
 80093da:	e793      	b.n	8009304 <__gethex+0xf8>
 80093dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80093e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80093e2:	d012      	beq.n	800940a <__gethex+0x1fe>
 80093e4:	2b20      	cmp	r3, #32
 80093e6:	d104      	bne.n	80093f2 <__gethex+0x1e6>
 80093e8:	f845 bb04 	str.w	fp, [r5], #4
 80093ec:	f04f 0b00 	mov.w	fp, #0
 80093f0:	465b      	mov	r3, fp
 80093f2:	7830      	ldrb	r0, [r6, #0]
 80093f4:	9303      	str	r3, [sp, #12]
 80093f6:	f7ff fef3 	bl	80091e0 <__hexdig_fun>
 80093fa:	9b03      	ldr	r3, [sp, #12]
 80093fc:	f000 000f 	and.w	r0, r0, #15
 8009400:	4098      	lsls	r0, r3
 8009402:	ea4b 0b00 	orr.w	fp, fp, r0
 8009406:	3304      	adds	r3, #4
 8009408:	e7ae      	b.n	8009368 <__gethex+0x15c>
 800940a:	45b1      	cmp	r9, r6
 800940c:	d8ea      	bhi.n	80093e4 <__gethex+0x1d8>
 800940e:	492b      	ldr	r1, [pc, #172]	@ (80094bc <__gethex+0x2b0>)
 8009410:	9303      	str	r3, [sp, #12]
 8009412:	2201      	movs	r2, #1
 8009414:	4630      	mov	r0, r6
 8009416:	f7ff fe27 	bl	8009068 <strncmp>
 800941a:	9b03      	ldr	r3, [sp, #12]
 800941c:	2800      	cmp	r0, #0
 800941e:	d1e1      	bne.n	80093e4 <__gethex+0x1d8>
 8009420:	e7a2      	b.n	8009368 <__gethex+0x15c>
 8009422:	1ea9      	subs	r1, r5, #2
 8009424:	4620      	mov	r0, r4
 8009426:	f7fe fd5c 	bl	8007ee2 <__any_on>
 800942a:	2800      	cmp	r0, #0
 800942c:	d0c2      	beq.n	80093b4 <__gethex+0x1a8>
 800942e:	f04f 0903 	mov.w	r9, #3
 8009432:	e7c1      	b.n	80093b8 <__gethex+0x1ac>
 8009434:	da09      	bge.n	800944a <__gethex+0x23e>
 8009436:	1b75      	subs	r5, r6, r5
 8009438:	4621      	mov	r1, r4
 800943a:	9801      	ldr	r0, [sp, #4]
 800943c:	462a      	mov	r2, r5
 800943e:	f7fe fb17 	bl	8007a70 <__lshift>
 8009442:	1b7f      	subs	r7, r7, r5
 8009444:	4604      	mov	r4, r0
 8009446:	f100 0a14 	add.w	sl, r0, #20
 800944a:	f04f 0900 	mov.w	r9, #0
 800944e:	e7b8      	b.n	80093c2 <__gethex+0x1b6>
 8009450:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009454:	42bd      	cmp	r5, r7
 8009456:	dd6f      	ble.n	8009538 <__gethex+0x32c>
 8009458:	1bed      	subs	r5, r5, r7
 800945a:	42ae      	cmp	r6, r5
 800945c:	dc34      	bgt.n	80094c8 <__gethex+0x2bc>
 800945e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d022      	beq.n	80094ac <__gethex+0x2a0>
 8009466:	2b03      	cmp	r3, #3
 8009468:	d024      	beq.n	80094b4 <__gethex+0x2a8>
 800946a:	2b01      	cmp	r3, #1
 800946c:	d115      	bne.n	800949a <__gethex+0x28e>
 800946e:	42ae      	cmp	r6, r5
 8009470:	d113      	bne.n	800949a <__gethex+0x28e>
 8009472:	2e01      	cmp	r6, #1
 8009474:	d10b      	bne.n	800948e <__gethex+0x282>
 8009476:	9a02      	ldr	r2, [sp, #8]
 8009478:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	2301      	movs	r3, #1
 8009480:	6123      	str	r3, [r4, #16]
 8009482:	f8ca 3000 	str.w	r3, [sl]
 8009486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009488:	2562      	movs	r5, #98	@ 0x62
 800948a:	601c      	str	r4, [r3, #0]
 800948c:	e73a      	b.n	8009304 <__gethex+0xf8>
 800948e:	1e71      	subs	r1, r6, #1
 8009490:	4620      	mov	r0, r4
 8009492:	f7fe fd26 	bl	8007ee2 <__any_on>
 8009496:	2800      	cmp	r0, #0
 8009498:	d1ed      	bne.n	8009476 <__gethex+0x26a>
 800949a:	9801      	ldr	r0, [sp, #4]
 800949c:	4621      	mov	r1, r4
 800949e:	f7fe f8d7 	bl	8007650 <_Bfree>
 80094a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094a4:	2300      	movs	r3, #0
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	2550      	movs	r5, #80	@ 0x50
 80094aa:	e72b      	b.n	8009304 <__gethex+0xf8>
 80094ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1f3      	bne.n	800949a <__gethex+0x28e>
 80094b2:	e7e0      	b.n	8009476 <__gethex+0x26a>
 80094b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1dd      	bne.n	8009476 <__gethex+0x26a>
 80094ba:	e7ee      	b.n	800949a <__gethex+0x28e>
 80094bc:	0800a363 	.word	0x0800a363
 80094c0:	0800a2f9 	.word	0x0800a2f9
 80094c4:	0800a3ba 	.word	0x0800a3ba
 80094c8:	1e6f      	subs	r7, r5, #1
 80094ca:	f1b9 0f00 	cmp.w	r9, #0
 80094ce:	d130      	bne.n	8009532 <__gethex+0x326>
 80094d0:	b127      	cbz	r7, 80094dc <__gethex+0x2d0>
 80094d2:	4639      	mov	r1, r7
 80094d4:	4620      	mov	r0, r4
 80094d6:	f7fe fd04 	bl	8007ee2 <__any_on>
 80094da:	4681      	mov	r9, r0
 80094dc:	117a      	asrs	r2, r7, #5
 80094de:	2301      	movs	r3, #1
 80094e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80094e4:	f007 071f 	and.w	r7, r7, #31
 80094e8:	40bb      	lsls	r3, r7
 80094ea:	4213      	tst	r3, r2
 80094ec:	4629      	mov	r1, r5
 80094ee:	4620      	mov	r0, r4
 80094f0:	bf18      	it	ne
 80094f2:	f049 0902 	orrne.w	r9, r9, #2
 80094f6:	f7ff fe21 	bl	800913c <rshift>
 80094fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80094fe:	1b76      	subs	r6, r6, r5
 8009500:	2502      	movs	r5, #2
 8009502:	f1b9 0f00 	cmp.w	r9, #0
 8009506:	d047      	beq.n	8009598 <__gethex+0x38c>
 8009508:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d015      	beq.n	800953c <__gethex+0x330>
 8009510:	2b03      	cmp	r3, #3
 8009512:	d017      	beq.n	8009544 <__gethex+0x338>
 8009514:	2b01      	cmp	r3, #1
 8009516:	d109      	bne.n	800952c <__gethex+0x320>
 8009518:	f019 0f02 	tst.w	r9, #2
 800951c:	d006      	beq.n	800952c <__gethex+0x320>
 800951e:	f8da 3000 	ldr.w	r3, [sl]
 8009522:	ea49 0903 	orr.w	r9, r9, r3
 8009526:	f019 0f01 	tst.w	r9, #1
 800952a:	d10e      	bne.n	800954a <__gethex+0x33e>
 800952c:	f045 0510 	orr.w	r5, r5, #16
 8009530:	e032      	b.n	8009598 <__gethex+0x38c>
 8009532:	f04f 0901 	mov.w	r9, #1
 8009536:	e7d1      	b.n	80094dc <__gethex+0x2d0>
 8009538:	2501      	movs	r5, #1
 800953a:	e7e2      	b.n	8009502 <__gethex+0x2f6>
 800953c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800953e:	f1c3 0301 	rsb	r3, r3, #1
 8009542:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f0      	beq.n	800952c <__gethex+0x320>
 800954a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800954e:	f104 0314 	add.w	r3, r4, #20
 8009552:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009556:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800955a:	f04f 0c00 	mov.w	ip, #0
 800955e:	4618      	mov	r0, r3
 8009560:	f853 2b04 	ldr.w	r2, [r3], #4
 8009564:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009568:	d01b      	beq.n	80095a2 <__gethex+0x396>
 800956a:	3201      	adds	r2, #1
 800956c:	6002      	str	r2, [r0, #0]
 800956e:	2d02      	cmp	r5, #2
 8009570:	f104 0314 	add.w	r3, r4, #20
 8009574:	d13c      	bne.n	80095f0 <__gethex+0x3e4>
 8009576:	f8d8 2000 	ldr.w	r2, [r8]
 800957a:	3a01      	subs	r2, #1
 800957c:	42b2      	cmp	r2, r6
 800957e:	d109      	bne.n	8009594 <__gethex+0x388>
 8009580:	1171      	asrs	r1, r6, #5
 8009582:	2201      	movs	r2, #1
 8009584:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009588:	f006 061f 	and.w	r6, r6, #31
 800958c:	fa02 f606 	lsl.w	r6, r2, r6
 8009590:	421e      	tst	r6, r3
 8009592:	d13a      	bne.n	800960a <__gethex+0x3fe>
 8009594:	f045 0520 	orr.w	r5, r5, #32
 8009598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800959a:	601c      	str	r4, [r3, #0]
 800959c:	9b02      	ldr	r3, [sp, #8]
 800959e:	601f      	str	r7, [r3, #0]
 80095a0:	e6b0      	b.n	8009304 <__gethex+0xf8>
 80095a2:	4299      	cmp	r1, r3
 80095a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80095a8:	d8d9      	bhi.n	800955e <__gethex+0x352>
 80095aa:	68a3      	ldr	r3, [r4, #8]
 80095ac:	459b      	cmp	fp, r3
 80095ae:	db17      	blt.n	80095e0 <__gethex+0x3d4>
 80095b0:	6861      	ldr	r1, [r4, #4]
 80095b2:	9801      	ldr	r0, [sp, #4]
 80095b4:	3101      	adds	r1, #1
 80095b6:	f7fe f80b 	bl	80075d0 <_Balloc>
 80095ba:	4681      	mov	r9, r0
 80095bc:	b918      	cbnz	r0, 80095c6 <__gethex+0x3ba>
 80095be:	4b1a      	ldr	r3, [pc, #104]	@ (8009628 <__gethex+0x41c>)
 80095c0:	4602      	mov	r2, r0
 80095c2:	2184      	movs	r1, #132	@ 0x84
 80095c4:	e6c5      	b.n	8009352 <__gethex+0x146>
 80095c6:	6922      	ldr	r2, [r4, #16]
 80095c8:	3202      	adds	r2, #2
 80095ca:	f104 010c 	add.w	r1, r4, #12
 80095ce:	0092      	lsls	r2, r2, #2
 80095d0:	300c      	adds	r0, #12
 80095d2:	f7ff fd6b 	bl	80090ac <memcpy>
 80095d6:	4621      	mov	r1, r4
 80095d8:	9801      	ldr	r0, [sp, #4]
 80095da:	f7fe f839 	bl	8007650 <_Bfree>
 80095de:	464c      	mov	r4, r9
 80095e0:	6923      	ldr	r3, [r4, #16]
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095e8:	6122      	str	r2, [r4, #16]
 80095ea:	2201      	movs	r2, #1
 80095ec:	615a      	str	r2, [r3, #20]
 80095ee:	e7be      	b.n	800956e <__gethex+0x362>
 80095f0:	6922      	ldr	r2, [r4, #16]
 80095f2:	455a      	cmp	r2, fp
 80095f4:	dd0b      	ble.n	800960e <__gethex+0x402>
 80095f6:	2101      	movs	r1, #1
 80095f8:	4620      	mov	r0, r4
 80095fa:	f7ff fd9f 	bl	800913c <rshift>
 80095fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009602:	3701      	adds	r7, #1
 8009604:	42bb      	cmp	r3, r7
 8009606:	f6ff aee0 	blt.w	80093ca <__gethex+0x1be>
 800960a:	2501      	movs	r5, #1
 800960c:	e7c2      	b.n	8009594 <__gethex+0x388>
 800960e:	f016 061f 	ands.w	r6, r6, #31
 8009612:	d0fa      	beq.n	800960a <__gethex+0x3fe>
 8009614:	4453      	add	r3, sl
 8009616:	f1c6 0620 	rsb	r6, r6, #32
 800961a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800961e:	f7fe f8c9 	bl	80077b4 <__hi0bits>
 8009622:	42b0      	cmp	r0, r6
 8009624:	dbe7      	blt.n	80095f6 <__gethex+0x3ea>
 8009626:	e7f0      	b.n	800960a <__gethex+0x3fe>
 8009628:	0800a2f9 	.word	0x0800a2f9

0800962c <L_shift>:
 800962c:	f1c2 0208 	rsb	r2, r2, #8
 8009630:	0092      	lsls	r2, r2, #2
 8009632:	b570      	push	{r4, r5, r6, lr}
 8009634:	f1c2 0620 	rsb	r6, r2, #32
 8009638:	6843      	ldr	r3, [r0, #4]
 800963a:	6804      	ldr	r4, [r0, #0]
 800963c:	fa03 f506 	lsl.w	r5, r3, r6
 8009640:	432c      	orrs	r4, r5
 8009642:	40d3      	lsrs	r3, r2
 8009644:	6004      	str	r4, [r0, #0]
 8009646:	f840 3f04 	str.w	r3, [r0, #4]!
 800964a:	4288      	cmp	r0, r1
 800964c:	d3f4      	bcc.n	8009638 <L_shift+0xc>
 800964e:	bd70      	pop	{r4, r5, r6, pc}

08009650 <__match>:
 8009650:	b530      	push	{r4, r5, lr}
 8009652:	6803      	ldr	r3, [r0, #0]
 8009654:	3301      	adds	r3, #1
 8009656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800965a:	b914      	cbnz	r4, 8009662 <__match+0x12>
 800965c:	6003      	str	r3, [r0, #0]
 800965e:	2001      	movs	r0, #1
 8009660:	bd30      	pop	{r4, r5, pc}
 8009662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009666:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800966a:	2d19      	cmp	r5, #25
 800966c:	bf98      	it	ls
 800966e:	3220      	addls	r2, #32
 8009670:	42a2      	cmp	r2, r4
 8009672:	d0f0      	beq.n	8009656 <__match+0x6>
 8009674:	2000      	movs	r0, #0
 8009676:	e7f3      	b.n	8009660 <__match+0x10>

08009678 <__hexnan>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	680b      	ldr	r3, [r1, #0]
 800967e:	6801      	ldr	r1, [r0, #0]
 8009680:	115e      	asrs	r6, r3, #5
 8009682:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009686:	f013 031f 	ands.w	r3, r3, #31
 800968a:	b087      	sub	sp, #28
 800968c:	bf18      	it	ne
 800968e:	3604      	addne	r6, #4
 8009690:	2500      	movs	r5, #0
 8009692:	1f37      	subs	r7, r6, #4
 8009694:	4682      	mov	sl, r0
 8009696:	4690      	mov	r8, r2
 8009698:	9301      	str	r3, [sp, #4]
 800969a:	f846 5c04 	str.w	r5, [r6, #-4]
 800969e:	46b9      	mov	r9, r7
 80096a0:	463c      	mov	r4, r7
 80096a2:	9502      	str	r5, [sp, #8]
 80096a4:	46ab      	mov	fp, r5
 80096a6:	784a      	ldrb	r2, [r1, #1]
 80096a8:	1c4b      	adds	r3, r1, #1
 80096aa:	9303      	str	r3, [sp, #12]
 80096ac:	b342      	cbz	r2, 8009700 <__hexnan+0x88>
 80096ae:	4610      	mov	r0, r2
 80096b0:	9105      	str	r1, [sp, #20]
 80096b2:	9204      	str	r2, [sp, #16]
 80096b4:	f7ff fd94 	bl	80091e0 <__hexdig_fun>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d151      	bne.n	8009760 <__hexnan+0xe8>
 80096bc:	9a04      	ldr	r2, [sp, #16]
 80096be:	9905      	ldr	r1, [sp, #20]
 80096c0:	2a20      	cmp	r2, #32
 80096c2:	d818      	bhi.n	80096f6 <__hexnan+0x7e>
 80096c4:	9b02      	ldr	r3, [sp, #8]
 80096c6:	459b      	cmp	fp, r3
 80096c8:	dd13      	ble.n	80096f2 <__hexnan+0x7a>
 80096ca:	454c      	cmp	r4, r9
 80096cc:	d206      	bcs.n	80096dc <__hexnan+0x64>
 80096ce:	2d07      	cmp	r5, #7
 80096d0:	dc04      	bgt.n	80096dc <__hexnan+0x64>
 80096d2:	462a      	mov	r2, r5
 80096d4:	4649      	mov	r1, r9
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7ff ffa8 	bl	800962c <L_shift>
 80096dc:	4544      	cmp	r4, r8
 80096de:	d952      	bls.n	8009786 <__hexnan+0x10e>
 80096e0:	2300      	movs	r3, #0
 80096e2:	f1a4 0904 	sub.w	r9, r4, #4
 80096e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80096ea:	f8cd b008 	str.w	fp, [sp, #8]
 80096ee:	464c      	mov	r4, r9
 80096f0:	461d      	mov	r5, r3
 80096f2:	9903      	ldr	r1, [sp, #12]
 80096f4:	e7d7      	b.n	80096a6 <__hexnan+0x2e>
 80096f6:	2a29      	cmp	r2, #41	@ 0x29
 80096f8:	d157      	bne.n	80097aa <__hexnan+0x132>
 80096fa:	3102      	adds	r1, #2
 80096fc:	f8ca 1000 	str.w	r1, [sl]
 8009700:	f1bb 0f00 	cmp.w	fp, #0
 8009704:	d051      	beq.n	80097aa <__hexnan+0x132>
 8009706:	454c      	cmp	r4, r9
 8009708:	d206      	bcs.n	8009718 <__hexnan+0xa0>
 800970a:	2d07      	cmp	r5, #7
 800970c:	dc04      	bgt.n	8009718 <__hexnan+0xa0>
 800970e:	462a      	mov	r2, r5
 8009710:	4649      	mov	r1, r9
 8009712:	4620      	mov	r0, r4
 8009714:	f7ff ff8a 	bl	800962c <L_shift>
 8009718:	4544      	cmp	r4, r8
 800971a:	d936      	bls.n	800978a <__hexnan+0x112>
 800971c:	f1a8 0204 	sub.w	r2, r8, #4
 8009720:	4623      	mov	r3, r4
 8009722:	f853 1b04 	ldr.w	r1, [r3], #4
 8009726:	f842 1f04 	str.w	r1, [r2, #4]!
 800972a:	429f      	cmp	r7, r3
 800972c:	d2f9      	bcs.n	8009722 <__hexnan+0xaa>
 800972e:	1b3b      	subs	r3, r7, r4
 8009730:	f023 0303 	bic.w	r3, r3, #3
 8009734:	3304      	adds	r3, #4
 8009736:	3401      	adds	r4, #1
 8009738:	3e03      	subs	r6, #3
 800973a:	42b4      	cmp	r4, r6
 800973c:	bf88      	it	hi
 800973e:	2304      	movhi	r3, #4
 8009740:	4443      	add	r3, r8
 8009742:	2200      	movs	r2, #0
 8009744:	f843 2b04 	str.w	r2, [r3], #4
 8009748:	429f      	cmp	r7, r3
 800974a:	d2fb      	bcs.n	8009744 <__hexnan+0xcc>
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	b91b      	cbnz	r3, 8009758 <__hexnan+0xe0>
 8009750:	4547      	cmp	r7, r8
 8009752:	d128      	bne.n	80097a6 <__hexnan+0x12e>
 8009754:	2301      	movs	r3, #1
 8009756:	603b      	str	r3, [r7, #0]
 8009758:	2005      	movs	r0, #5
 800975a:	b007      	add	sp, #28
 800975c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009760:	3501      	adds	r5, #1
 8009762:	2d08      	cmp	r5, #8
 8009764:	f10b 0b01 	add.w	fp, fp, #1
 8009768:	dd06      	ble.n	8009778 <__hexnan+0x100>
 800976a:	4544      	cmp	r4, r8
 800976c:	d9c1      	bls.n	80096f2 <__hexnan+0x7a>
 800976e:	2300      	movs	r3, #0
 8009770:	f844 3c04 	str.w	r3, [r4, #-4]
 8009774:	2501      	movs	r5, #1
 8009776:	3c04      	subs	r4, #4
 8009778:	6822      	ldr	r2, [r4, #0]
 800977a:	f000 000f 	and.w	r0, r0, #15
 800977e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009782:	6020      	str	r0, [r4, #0]
 8009784:	e7b5      	b.n	80096f2 <__hexnan+0x7a>
 8009786:	2508      	movs	r5, #8
 8009788:	e7b3      	b.n	80096f2 <__hexnan+0x7a>
 800978a:	9b01      	ldr	r3, [sp, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d0dd      	beq.n	800974c <__hexnan+0xd4>
 8009790:	f1c3 0320 	rsb	r3, r3, #32
 8009794:	f04f 32ff 	mov.w	r2, #4294967295
 8009798:	40da      	lsrs	r2, r3
 800979a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800979e:	4013      	ands	r3, r2
 80097a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80097a4:	e7d2      	b.n	800974c <__hexnan+0xd4>
 80097a6:	3f04      	subs	r7, #4
 80097a8:	e7d0      	b.n	800974c <__hexnan+0xd4>
 80097aa:	2004      	movs	r0, #4
 80097ac:	e7d5      	b.n	800975a <__hexnan+0xe2>

080097ae <__ascii_mbtowc>:
 80097ae:	b082      	sub	sp, #8
 80097b0:	b901      	cbnz	r1, 80097b4 <__ascii_mbtowc+0x6>
 80097b2:	a901      	add	r1, sp, #4
 80097b4:	b142      	cbz	r2, 80097c8 <__ascii_mbtowc+0x1a>
 80097b6:	b14b      	cbz	r3, 80097cc <__ascii_mbtowc+0x1e>
 80097b8:	7813      	ldrb	r3, [r2, #0]
 80097ba:	600b      	str	r3, [r1, #0]
 80097bc:	7812      	ldrb	r2, [r2, #0]
 80097be:	1e10      	subs	r0, r2, #0
 80097c0:	bf18      	it	ne
 80097c2:	2001      	movne	r0, #1
 80097c4:	b002      	add	sp, #8
 80097c6:	4770      	bx	lr
 80097c8:	4610      	mov	r0, r2
 80097ca:	e7fb      	b.n	80097c4 <__ascii_mbtowc+0x16>
 80097cc:	f06f 0001 	mvn.w	r0, #1
 80097d0:	e7f8      	b.n	80097c4 <__ascii_mbtowc+0x16>

080097d2 <_realloc_r>:
 80097d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d6:	4607      	mov	r7, r0
 80097d8:	4614      	mov	r4, r2
 80097da:	460d      	mov	r5, r1
 80097dc:	b921      	cbnz	r1, 80097e8 <_realloc_r+0x16>
 80097de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097e2:	4611      	mov	r1, r2
 80097e4:	f7fd be68 	b.w	80074b8 <_malloc_r>
 80097e8:	b92a      	cbnz	r2, 80097f6 <_realloc_r+0x24>
 80097ea:	f7fd fdf1 	bl	80073d0 <_free_r>
 80097ee:	4625      	mov	r5, r4
 80097f0:	4628      	mov	r0, r5
 80097f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f6:	f000 f840 	bl	800987a <_malloc_usable_size_r>
 80097fa:	4284      	cmp	r4, r0
 80097fc:	4606      	mov	r6, r0
 80097fe:	d802      	bhi.n	8009806 <_realloc_r+0x34>
 8009800:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009804:	d8f4      	bhi.n	80097f0 <_realloc_r+0x1e>
 8009806:	4621      	mov	r1, r4
 8009808:	4638      	mov	r0, r7
 800980a:	f7fd fe55 	bl	80074b8 <_malloc_r>
 800980e:	4680      	mov	r8, r0
 8009810:	b908      	cbnz	r0, 8009816 <_realloc_r+0x44>
 8009812:	4645      	mov	r5, r8
 8009814:	e7ec      	b.n	80097f0 <_realloc_r+0x1e>
 8009816:	42b4      	cmp	r4, r6
 8009818:	4622      	mov	r2, r4
 800981a:	4629      	mov	r1, r5
 800981c:	bf28      	it	cs
 800981e:	4632      	movcs	r2, r6
 8009820:	f7ff fc44 	bl	80090ac <memcpy>
 8009824:	4629      	mov	r1, r5
 8009826:	4638      	mov	r0, r7
 8009828:	f7fd fdd2 	bl	80073d0 <_free_r>
 800982c:	e7f1      	b.n	8009812 <_realloc_r+0x40>

0800982e <__ascii_wctomb>:
 800982e:	4603      	mov	r3, r0
 8009830:	4608      	mov	r0, r1
 8009832:	b141      	cbz	r1, 8009846 <__ascii_wctomb+0x18>
 8009834:	2aff      	cmp	r2, #255	@ 0xff
 8009836:	d904      	bls.n	8009842 <__ascii_wctomb+0x14>
 8009838:	228a      	movs	r2, #138	@ 0x8a
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	4770      	bx	lr
 8009842:	700a      	strb	r2, [r1, #0]
 8009844:	2001      	movs	r0, #1
 8009846:	4770      	bx	lr

08009848 <fiprintf>:
 8009848:	b40e      	push	{r1, r2, r3}
 800984a:	b503      	push	{r0, r1, lr}
 800984c:	4601      	mov	r1, r0
 800984e:	ab03      	add	r3, sp, #12
 8009850:	4805      	ldr	r0, [pc, #20]	@ (8009868 <fiprintf+0x20>)
 8009852:	f853 2b04 	ldr.w	r2, [r3], #4
 8009856:	6800      	ldr	r0, [r0, #0]
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	f000 f83f 	bl	80098dc <_vfiprintf_r>
 800985e:	b002      	add	sp, #8
 8009860:	f85d eb04 	ldr.w	lr, [sp], #4
 8009864:	b003      	add	sp, #12
 8009866:	4770      	bx	lr
 8009868:	20000030 	.word	0x20000030

0800986c <abort>:
 800986c:	b508      	push	{r3, lr}
 800986e:	2006      	movs	r0, #6
 8009870:	f000 fa08 	bl	8009c84 <raise>
 8009874:	2001      	movs	r0, #1
 8009876:	f7f8 f854 	bl	8001922 <_exit>

0800987a <_malloc_usable_size_r>:
 800987a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800987e:	1f18      	subs	r0, r3, #4
 8009880:	2b00      	cmp	r3, #0
 8009882:	bfbc      	itt	lt
 8009884:	580b      	ldrlt	r3, [r1, r0]
 8009886:	18c0      	addlt	r0, r0, r3
 8009888:	4770      	bx	lr

0800988a <__sfputc_r>:
 800988a:	6893      	ldr	r3, [r2, #8]
 800988c:	3b01      	subs	r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	b410      	push	{r4}
 8009892:	6093      	str	r3, [r2, #8]
 8009894:	da08      	bge.n	80098a8 <__sfputc_r+0x1e>
 8009896:	6994      	ldr	r4, [r2, #24]
 8009898:	42a3      	cmp	r3, r4
 800989a:	db01      	blt.n	80098a0 <__sfputc_r+0x16>
 800989c:	290a      	cmp	r1, #10
 800989e:	d103      	bne.n	80098a8 <__sfputc_r+0x1e>
 80098a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098a4:	f000 b932 	b.w	8009b0c <__swbuf_r>
 80098a8:	6813      	ldr	r3, [r2, #0]
 80098aa:	1c58      	adds	r0, r3, #1
 80098ac:	6010      	str	r0, [r2, #0]
 80098ae:	7019      	strb	r1, [r3, #0]
 80098b0:	4608      	mov	r0, r1
 80098b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <__sfputs_r>:
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ba:	4606      	mov	r6, r0
 80098bc:	460f      	mov	r7, r1
 80098be:	4614      	mov	r4, r2
 80098c0:	18d5      	adds	r5, r2, r3
 80098c2:	42ac      	cmp	r4, r5
 80098c4:	d101      	bne.n	80098ca <__sfputs_r+0x12>
 80098c6:	2000      	movs	r0, #0
 80098c8:	e007      	b.n	80098da <__sfputs_r+0x22>
 80098ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ce:	463a      	mov	r2, r7
 80098d0:	4630      	mov	r0, r6
 80098d2:	f7ff ffda 	bl	800988a <__sfputc_r>
 80098d6:	1c43      	adds	r3, r0, #1
 80098d8:	d1f3      	bne.n	80098c2 <__sfputs_r+0xa>
 80098da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098dc <_vfiprintf_r>:
 80098dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e0:	460d      	mov	r5, r1
 80098e2:	b09d      	sub	sp, #116	@ 0x74
 80098e4:	4614      	mov	r4, r2
 80098e6:	4698      	mov	r8, r3
 80098e8:	4606      	mov	r6, r0
 80098ea:	b118      	cbz	r0, 80098f4 <_vfiprintf_r+0x18>
 80098ec:	6a03      	ldr	r3, [r0, #32]
 80098ee:	b90b      	cbnz	r3, 80098f4 <_vfiprintf_r+0x18>
 80098f0:	f7fc fdf4 	bl	80064dc <__sinit>
 80098f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098f6:	07d9      	lsls	r1, r3, #31
 80098f8:	d405      	bmi.n	8009906 <_vfiprintf_r+0x2a>
 80098fa:	89ab      	ldrh	r3, [r5, #12]
 80098fc:	059a      	lsls	r2, r3, #22
 80098fe:	d402      	bmi.n	8009906 <_vfiprintf_r+0x2a>
 8009900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009902:	f7fc ff04 	bl	800670e <__retarget_lock_acquire_recursive>
 8009906:	89ab      	ldrh	r3, [r5, #12]
 8009908:	071b      	lsls	r3, r3, #28
 800990a:	d501      	bpl.n	8009910 <_vfiprintf_r+0x34>
 800990c:	692b      	ldr	r3, [r5, #16]
 800990e:	b99b      	cbnz	r3, 8009938 <_vfiprintf_r+0x5c>
 8009910:	4629      	mov	r1, r5
 8009912:	4630      	mov	r0, r6
 8009914:	f000 f938 	bl	8009b88 <__swsetup_r>
 8009918:	b170      	cbz	r0, 8009938 <_vfiprintf_r+0x5c>
 800991a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800991c:	07dc      	lsls	r4, r3, #31
 800991e:	d504      	bpl.n	800992a <_vfiprintf_r+0x4e>
 8009920:	f04f 30ff 	mov.w	r0, #4294967295
 8009924:	b01d      	add	sp, #116	@ 0x74
 8009926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992a:	89ab      	ldrh	r3, [r5, #12]
 800992c:	0598      	lsls	r0, r3, #22
 800992e:	d4f7      	bmi.n	8009920 <_vfiprintf_r+0x44>
 8009930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009932:	f7fc feed 	bl	8006710 <__retarget_lock_release_recursive>
 8009936:	e7f3      	b.n	8009920 <_vfiprintf_r+0x44>
 8009938:	2300      	movs	r3, #0
 800993a:	9309      	str	r3, [sp, #36]	@ 0x24
 800993c:	2320      	movs	r3, #32
 800993e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009942:	f8cd 800c 	str.w	r8, [sp, #12]
 8009946:	2330      	movs	r3, #48	@ 0x30
 8009948:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009af8 <_vfiprintf_r+0x21c>
 800994c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009950:	f04f 0901 	mov.w	r9, #1
 8009954:	4623      	mov	r3, r4
 8009956:	469a      	mov	sl, r3
 8009958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800995c:	b10a      	cbz	r2, 8009962 <_vfiprintf_r+0x86>
 800995e:	2a25      	cmp	r2, #37	@ 0x25
 8009960:	d1f9      	bne.n	8009956 <_vfiprintf_r+0x7a>
 8009962:	ebba 0b04 	subs.w	fp, sl, r4
 8009966:	d00b      	beq.n	8009980 <_vfiprintf_r+0xa4>
 8009968:	465b      	mov	r3, fp
 800996a:	4622      	mov	r2, r4
 800996c:	4629      	mov	r1, r5
 800996e:	4630      	mov	r0, r6
 8009970:	f7ff ffa2 	bl	80098b8 <__sfputs_r>
 8009974:	3001      	adds	r0, #1
 8009976:	f000 80a7 	beq.w	8009ac8 <_vfiprintf_r+0x1ec>
 800997a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800997c:	445a      	add	r2, fp
 800997e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009980:	f89a 3000 	ldrb.w	r3, [sl]
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 809f 	beq.w	8009ac8 <_vfiprintf_r+0x1ec>
 800998a:	2300      	movs	r3, #0
 800998c:	f04f 32ff 	mov.w	r2, #4294967295
 8009990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009994:	f10a 0a01 	add.w	sl, sl, #1
 8009998:	9304      	str	r3, [sp, #16]
 800999a:	9307      	str	r3, [sp, #28]
 800999c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80099a2:	4654      	mov	r4, sl
 80099a4:	2205      	movs	r2, #5
 80099a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099aa:	4853      	ldr	r0, [pc, #332]	@ (8009af8 <_vfiprintf_r+0x21c>)
 80099ac:	f7f6 fc10 	bl	80001d0 <memchr>
 80099b0:	9a04      	ldr	r2, [sp, #16]
 80099b2:	b9d8      	cbnz	r0, 80099ec <_vfiprintf_r+0x110>
 80099b4:	06d1      	lsls	r1, r2, #27
 80099b6:	bf44      	itt	mi
 80099b8:	2320      	movmi	r3, #32
 80099ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099be:	0713      	lsls	r3, r2, #28
 80099c0:	bf44      	itt	mi
 80099c2:	232b      	movmi	r3, #43	@ 0x2b
 80099c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099c8:	f89a 3000 	ldrb.w	r3, [sl]
 80099cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80099ce:	d015      	beq.n	80099fc <_vfiprintf_r+0x120>
 80099d0:	9a07      	ldr	r2, [sp, #28]
 80099d2:	4654      	mov	r4, sl
 80099d4:	2000      	movs	r0, #0
 80099d6:	f04f 0c0a 	mov.w	ip, #10
 80099da:	4621      	mov	r1, r4
 80099dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099e0:	3b30      	subs	r3, #48	@ 0x30
 80099e2:	2b09      	cmp	r3, #9
 80099e4:	d94b      	bls.n	8009a7e <_vfiprintf_r+0x1a2>
 80099e6:	b1b0      	cbz	r0, 8009a16 <_vfiprintf_r+0x13a>
 80099e8:	9207      	str	r2, [sp, #28]
 80099ea:	e014      	b.n	8009a16 <_vfiprintf_r+0x13a>
 80099ec:	eba0 0308 	sub.w	r3, r0, r8
 80099f0:	fa09 f303 	lsl.w	r3, r9, r3
 80099f4:	4313      	orrs	r3, r2
 80099f6:	9304      	str	r3, [sp, #16]
 80099f8:	46a2      	mov	sl, r4
 80099fa:	e7d2      	b.n	80099a2 <_vfiprintf_r+0xc6>
 80099fc:	9b03      	ldr	r3, [sp, #12]
 80099fe:	1d19      	adds	r1, r3, #4
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	9103      	str	r1, [sp, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	bfbb      	ittet	lt
 8009a08:	425b      	neglt	r3, r3
 8009a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8009a0e:	9307      	strge	r3, [sp, #28]
 8009a10:	9307      	strlt	r3, [sp, #28]
 8009a12:	bfb8      	it	lt
 8009a14:	9204      	strlt	r2, [sp, #16]
 8009a16:	7823      	ldrb	r3, [r4, #0]
 8009a18:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a1a:	d10a      	bne.n	8009a32 <_vfiprintf_r+0x156>
 8009a1c:	7863      	ldrb	r3, [r4, #1]
 8009a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a20:	d132      	bne.n	8009a88 <_vfiprintf_r+0x1ac>
 8009a22:	9b03      	ldr	r3, [sp, #12]
 8009a24:	1d1a      	adds	r2, r3, #4
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	9203      	str	r2, [sp, #12]
 8009a2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a2e:	3402      	adds	r4, #2
 8009a30:	9305      	str	r3, [sp, #20]
 8009a32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b08 <_vfiprintf_r+0x22c>
 8009a36:	7821      	ldrb	r1, [r4, #0]
 8009a38:	2203      	movs	r2, #3
 8009a3a:	4650      	mov	r0, sl
 8009a3c:	f7f6 fbc8 	bl	80001d0 <memchr>
 8009a40:	b138      	cbz	r0, 8009a52 <_vfiprintf_r+0x176>
 8009a42:	9b04      	ldr	r3, [sp, #16]
 8009a44:	eba0 000a 	sub.w	r0, r0, sl
 8009a48:	2240      	movs	r2, #64	@ 0x40
 8009a4a:	4082      	lsls	r2, r0
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	3401      	adds	r4, #1
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a56:	4829      	ldr	r0, [pc, #164]	@ (8009afc <_vfiprintf_r+0x220>)
 8009a58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a5c:	2206      	movs	r2, #6
 8009a5e:	f7f6 fbb7 	bl	80001d0 <memchr>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d03f      	beq.n	8009ae6 <_vfiprintf_r+0x20a>
 8009a66:	4b26      	ldr	r3, [pc, #152]	@ (8009b00 <_vfiprintf_r+0x224>)
 8009a68:	bb1b      	cbnz	r3, 8009ab2 <_vfiprintf_r+0x1d6>
 8009a6a:	9b03      	ldr	r3, [sp, #12]
 8009a6c:	3307      	adds	r3, #7
 8009a6e:	f023 0307 	bic.w	r3, r3, #7
 8009a72:	3308      	adds	r3, #8
 8009a74:	9303      	str	r3, [sp, #12]
 8009a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a78:	443b      	add	r3, r7
 8009a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a7c:	e76a      	b.n	8009954 <_vfiprintf_r+0x78>
 8009a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a82:	460c      	mov	r4, r1
 8009a84:	2001      	movs	r0, #1
 8009a86:	e7a8      	b.n	80099da <_vfiprintf_r+0xfe>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	3401      	adds	r4, #1
 8009a8c:	9305      	str	r3, [sp, #20]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	f04f 0c0a 	mov.w	ip, #10
 8009a94:	4620      	mov	r0, r4
 8009a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a9a:	3a30      	subs	r2, #48	@ 0x30
 8009a9c:	2a09      	cmp	r2, #9
 8009a9e:	d903      	bls.n	8009aa8 <_vfiprintf_r+0x1cc>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0c6      	beq.n	8009a32 <_vfiprintf_r+0x156>
 8009aa4:	9105      	str	r1, [sp, #20]
 8009aa6:	e7c4      	b.n	8009a32 <_vfiprintf_r+0x156>
 8009aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aac:	4604      	mov	r4, r0
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e7f0      	b.n	8009a94 <_vfiprintf_r+0x1b8>
 8009ab2:	ab03      	add	r3, sp, #12
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	462a      	mov	r2, r5
 8009ab8:	4b12      	ldr	r3, [pc, #72]	@ (8009b04 <_vfiprintf_r+0x228>)
 8009aba:	a904      	add	r1, sp, #16
 8009abc:	4630      	mov	r0, r6
 8009abe:	f7fb febd 	bl	800583c <_printf_float>
 8009ac2:	4607      	mov	r7, r0
 8009ac4:	1c78      	adds	r0, r7, #1
 8009ac6:	d1d6      	bne.n	8009a76 <_vfiprintf_r+0x19a>
 8009ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aca:	07d9      	lsls	r1, r3, #31
 8009acc:	d405      	bmi.n	8009ada <_vfiprintf_r+0x1fe>
 8009ace:	89ab      	ldrh	r3, [r5, #12]
 8009ad0:	059a      	lsls	r2, r3, #22
 8009ad2:	d402      	bmi.n	8009ada <_vfiprintf_r+0x1fe>
 8009ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ad6:	f7fc fe1b 	bl	8006710 <__retarget_lock_release_recursive>
 8009ada:	89ab      	ldrh	r3, [r5, #12]
 8009adc:	065b      	lsls	r3, r3, #25
 8009ade:	f53f af1f 	bmi.w	8009920 <_vfiprintf_r+0x44>
 8009ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ae4:	e71e      	b.n	8009924 <_vfiprintf_r+0x48>
 8009ae6:	ab03      	add	r3, sp, #12
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	462a      	mov	r2, r5
 8009aec:	4b05      	ldr	r3, [pc, #20]	@ (8009b04 <_vfiprintf_r+0x228>)
 8009aee:	a904      	add	r1, sp, #16
 8009af0:	4630      	mov	r0, r6
 8009af2:	f7fc f93b 	bl	8005d6c <_printf_i>
 8009af6:	e7e4      	b.n	8009ac2 <_vfiprintf_r+0x1e6>
 8009af8:	0800a365 	.word	0x0800a365
 8009afc:	0800a36f 	.word	0x0800a36f
 8009b00:	0800583d 	.word	0x0800583d
 8009b04:	080098b9 	.word	0x080098b9
 8009b08:	0800a36b 	.word	0x0800a36b

08009b0c <__swbuf_r>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	460e      	mov	r6, r1
 8009b10:	4614      	mov	r4, r2
 8009b12:	4605      	mov	r5, r0
 8009b14:	b118      	cbz	r0, 8009b1e <__swbuf_r+0x12>
 8009b16:	6a03      	ldr	r3, [r0, #32]
 8009b18:	b90b      	cbnz	r3, 8009b1e <__swbuf_r+0x12>
 8009b1a:	f7fc fcdf 	bl	80064dc <__sinit>
 8009b1e:	69a3      	ldr	r3, [r4, #24]
 8009b20:	60a3      	str	r3, [r4, #8]
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	071a      	lsls	r2, r3, #28
 8009b26:	d501      	bpl.n	8009b2c <__swbuf_r+0x20>
 8009b28:	6923      	ldr	r3, [r4, #16]
 8009b2a:	b943      	cbnz	r3, 8009b3e <__swbuf_r+0x32>
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f000 f82a 	bl	8009b88 <__swsetup_r>
 8009b34:	b118      	cbz	r0, 8009b3e <__swbuf_r+0x32>
 8009b36:	f04f 37ff 	mov.w	r7, #4294967295
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	6922      	ldr	r2, [r4, #16]
 8009b42:	1a98      	subs	r0, r3, r2
 8009b44:	6963      	ldr	r3, [r4, #20]
 8009b46:	b2f6      	uxtb	r6, r6
 8009b48:	4283      	cmp	r3, r0
 8009b4a:	4637      	mov	r7, r6
 8009b4c:	dc05      	bgt.n	8009b5a <__swbuf_r+0x4e>
 8009b4e:	4621      	mov	r1, r4
 8009b50:	4628      	mov	r0, r5
 8009b52:	f7ff fa47 	bl	8008fe4 <_fflush_r>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	d1ed      	bne.n	8009b36 <__swbuf_r+0x2a>
 8009b5a:	68a3      	ldr	r3, [r4, #8]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	60a3      	str	r3, [r4, #8]
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	6022      	str	r2, [r4, #0]
 8009b66:	701e      	strb	r6, [r3, #0]
 8009b68:	6962      	ldr	r2, [r4, #20]
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d004      	beq.n	8009b7a <__swbuf_r+0x6e>
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	07db      	lsls	r3, r3, #31
 8009b74:	d5e1      	bpl.n	8009b3a <__swbuf_r+0x2e>
 8009b76:	2e0a      	cmp	r6, #10
 8009b78:	d1df      	bne.n	8009b3a <__swbuf_r+0x2e>
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f7ff fa31 	bl	8008fe4 <_fflush_r>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d0d9      	beq.n	8009b3a <__swbuf_r+0x2e>
 8009b86:	e7d6      	b.n	8009b36 <__swbuf_r+0x2a>

08009b88 <__swsetup_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4b29      	ldr	r3, [pc, #164]	@ (8009c30 <__swsetup_r+0xa8>)
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	6818      	ldr	r0, [r3, #0]
 8009b90:	460c      	mov	r4, r1
 8009b92:	b118      	cbz	r0, 8009b9c <__swsetup_r+0x14>
 8009b94:	6a03      	ldr	r3, [r0, #32]
 8009b96:	b90b      	cbnz	r3, 8009b9c <__swsetup_r+0x14>
 8009b98:	f7fc fca0 	bl	80064dc <__sinit>
 8009b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ba0:	0719      	lsls	r1, r3, #28
 8009ba2:	d422      	bmi.n	8009bea <__swsetup_r+0x62>
 8009ba4:	06da      	lsls	r2, r3, #27
 8009ba6:	d407      	bmi.n	8009bb8 <__swsetup_r+0x30>
 8009ba8:	2209      	movs	r2, #9
 8009baa:	602a      	str	r2, [r5, #0]
 8009bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb6:	e033      	b.n	8009c20 <__swsetup_r+0x98>
 8009bb8:	0758      	lsls	r0, r3, #29
 8009bba:	d512      	bpl.n	8009be2 <__swsetup_r+0x5a>
 8009bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bbe:	b141      	cbz	r1, 8009bd2 <__swsetup_r+0x4a>
 8009bc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bc4:	4299      	cmp	r1, r3
 8009bc6:	d002      	beq.n	8009bce <__swsetup_r+0x46>
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f7fd fc01 	bl	80073d0 <_free_r>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bd8:	81a3      	strh	r3, [r4, #12]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	6063      	str	r3, [r4, #4]
 8009bde:	6923      	ldr	r3, [r4, #16]
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	f043 0308 	orr.w	r3, r3, #8
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	b94b      	cbnz	r3, 8009c02 <__swsetup_r+0x7a>
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bf8:	d003      	beq.n	8009c02 <__swsetup_r+0x7a>
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	f000 f883 	bl	8009d08 <__smakebuf_r>
 8009c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c06:	f013 0201 	ands.w	r2, r3, #1
 8009c0a:	d00a      	beq.n	8009c22 <__swsetup_r+0x9a>
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	60a2      	str	r2, [r4, #8]
 8009c10:	6962      	ldr	r2, [r4, #20]
 8009c12:	4252      	negs	r2, r2
 8009c14:	61a2      	str	r2, [r4, #24]
 8009c16:	6922      	ldr	r2, [r4, #16]
 8009c18:	b942      	cbnz	r2, 8009c2c <__swsetup_r+0xa4>
 8009c1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c1e:	d1c5      	bne.n	8009bac <__swsetup_r+0x24>
 8009c20:	bd38      	pop	{r3, r4, r5, pc}
 8009c22:	0799      	lsls	r1, r3, #30
 8009c24:	bf58      	it	pl
 8009c26:	6962      	ldrpl	r2, [r4, #20]
 8009c28:	60a2      	str	r2, [r4, #8]
 8009c2a:	e7f4      	b.n	8009c16 <__swsetup_r+0x8e>
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	e7f7      	b.n	8009c20 <__swsetup_r+0x98>
 8009c30:	20000030 	.word	0x20000030

08009c34 <_raise_r>:
 8009c34:	291f      	cmp	r1, #31
 8009c36:	b538      	push	{r3, r4, r5, lr}
 8009c38:	4605      	mov	r5, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	d904      	bls.n	8009c48 <_raise_r+0x14>
 8009c3e:	2316      	movs	r3, #22
 8009c40:	6003      	str	r3, [r0, #0]
 8009c42:	f04f 30ff 	mov.w	r0, #4294967295
 8009c46:	bd38      	pop	{r3, r4, r5, pc}
 8009c48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c4a:	b112      	cbz	r2, 8009c52 <_raise_r+0x1e>
 8009c4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c50:	b94b      	cbnz	r3, 8009c66 <_raise_r+0x32>
 8009c52:	4628      	mov	r0, r5
 8009c54:	f000 f830 	bl	8009cb8 <_getpid_r>
 8009c58:	4622      	mov	r2, r4
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c62:	f000 b817 	b.w	8009c94 <_kill_r>
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d00a      	beq.n	8009c80 <_raise_r+0x4c>
 8009c6a:	1c59      	adds	r1, r3, #1
 8009c6c:	d103      	bne.n	8009c76 <_raise_r+0x42>
 8009c6e:	2316      	movs	r3, #22
 8009c70:	6003      	str	r3, [r0, #0]
 8009c72:	2001      	movs	r0, #1
 8009c74:	e7e7      	b.n	8009c46 <_raise_r+0x12>
 8009c76:	2100      	movs	r1, #0
 8009c78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	4798      	blx	r3
 8009c80:	2000      	movs	r0, #0
 8009c82:	e7e0      	b.n	8009c46 <_raise_r+0x12>

08009c84 <raise>:
 8009c84:	4b02      	ldr	r3, [pc, #8]	@ (8009c90 <raise+0xc>)
 8009c86:	4601      	mov	r1, r0
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	f7ff bfd3 	b.w	8009c34 <_raise_r>
 8009c8e:	bf00      	nop
 8009c90:	20000030 	.word	0x20000030

08009c94 <_kill_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	4d07      	ldr	r5, [pc, #28]	@ (8009cb4 <_kill_r+0x20>)
 8009c98:	2300      	movs	r3, #0
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	602b      	str	r3, [r5, #0]
 8009ca2:	f7f7 fe2e 	bl	8001902 <_kill>
 8009ca6:	1c43      	adds	r3, r0, #1
 8009ca8:	d102      	bne.n	8009cb0 <_kill_r+0x1c>
 8009caa:	682b      	ldr	r3, [r5, #0]
 8009cac:	b103      	cbz	r3, 8009cb0 <_kill_r+0x1c>
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	bd38      	pop	{r3, r4, r5, pc}
 8009cb2:	bf00      	nop
 8009cb4:	200004f4 	.word	0x200004f4

08009cb8 <_getpid_r>:
 8009cb8:	f7f7 be1b 	b.w	80018f2 <_getpid>

08009cbc <__swhatbuf_r>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	b096      	sub	sp, #88	@ 0x58
 8009cc8:	4615      	mov	r5, r2
 8009cca:	461e      	mov	r6, r3
 8009ccc:	da0d      	bge.n	8009cea <__swhatbuf_r+0x2e>
 8009cce:	89a3      	ldrh	r3, [r4, #12]
 8009cd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009cd4:	f04f 0100 	mov.w	r1, #0
 8009cd8:	bf14      	ite	ne
 8009cda:	2340      	movne	r3, #64	@ 0x40
 8009cdc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	6031      	str	r1, [r6, #0]
 8009ce4:	602b      	str	r3, [r5, #0]
 8009ce6:	b016      	add	sp, #88	@ 0x58
 8009ce8:	bd70      	pop	{r4, r5, r6, pc}
 8009cea:	466a      	mov	r2, sp
 8009cec:	f000 f848 	bl	8009d80 <_fstat_r>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	dbec      	blt.n	8009cce <__swhatbuf_r+0x12>
 8009cf4:	9901      	ldr	r1, [sp, #4]
 8009cf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009cfa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009cfe:	4259      	negs	r1, r3
 8009d00:	4159      	adcs	r1, r3
 8009d02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d06:	e7eb      	b.n	8009ce0 <__swhatbuf_r+0x24>

08009d08 <__smakebuf_r>:
 8009d08:	898b      	ldrh	r3, [r1, #12]
 8009d0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d0c:	079d      	lsls	r5, r3, #30
 8009d0e:	4606      	mov	r6, r0
 8009d10:	460c      	mov	r4, r1
 8009d12:	d507      	bpl.n	8009d24 <__smakebuf_r+0x1c>
 8009d14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	6123      	str	r3, [r4, #16]
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	6163      	str	r3, [r4, #20]
 8009d20:	b003      	add	sp, #12
 8009d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d24:	ab01      	add	r3, sp, #4
 8009d26:	466a      	mov	r2, sp
 8009d28:	f7ff ffc8 	bl	8009cbc <__swhatbuf_r>
 8009d2c:	9f00      	ldr	r7, [sp, #0]
 8009d2e:	4605      	mov	r5, r0
 8009d30:	4639      	mov	r1, r7
 8009d32:	4630      	mov	r0, r6
 8009d34:	f7fd fbc0 	bl	80074b8 <_malloc_r>
 8009d38:	b948      	cbnz	r0, 8009d4e <__smakebuf_r+0x46>
 8009d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d3e:	059a      	lsls	r2, r3, #22
 8009d40:	d4ee      	bmi.n	8009d20 <__smakebuf_r+0x18>
 8009d42:	f023 0303 	bic.w	r3, r3, #3
 8009d46:	f043 0302 	orr.w	r3, r3, #2
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	e7e2      	b.n	8009d14 <__smakebuf_r+0xc>
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	6020      	str	r0, [r4, #0]
 8009d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	9b01      	ldr	r3, [sp, #4]
 8009d5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d5e:	b15b      	cbz	r3, 8009d78 <__smakebuf_r+0x70>
 8009d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d64:	4630      	mov	r0, r6
 8009d66:	f000 f81d 	bl	8009da4 <_isatty_r>
 8009d6a:	b128      	cbz	r0, 8009d78 <__smakebuf_r+0x70>
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	f023 0303 	bic.w	r3, r3, #3
 8009d72:	f043 0301 	orr.w	r3, r3, #1
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	431d      	orrs	r5, r3
 8009d7c:	81a5      	strh	r5, [r4, #12]
 8009d7e:	e7cf      	b.n	8009d20 <__smakebuf_r+0x18>

08009d80 <_fstat_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d07      	ldr	r5, [pc, #28]	@ (8009da0 <_fstat_r+0x20>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	602b      	str	r3, [r5, #0]
 8009d8e:	f7f7 fe18 	bl	80019c2 <_fstat>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	d102      	bne.n	8009d9c <_fstat_r+0x1c>
 8009d96:	682b      	ldr	r3, [r5, #0]
 8009d98:	b103      	cbz	r3, 8009d9c <_fstat_r+0x1c>
 8009d9a:	6023      	str	r3, [r4, #0]
 8009d9c:	bd38      	pop	{r3, r4, r5, pc}
 8009d9e:	bf00      	nop
 8009da0:	200004f4 	.word	0x200004f4

08009da4 <_isatty_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d06      	ldr	r5, [pc, #24]	@ (8009dc0 <_isatty_r+0x1c>)
 8009da8:	2300      	movs	r3, #0
 8009daa:	4604      	mov	r4, r0
 8009dac:	4608      	mov	r0, r1
 8009dae:	602b      	str	r3, [r5, #0]
 8009db0:	f7f7 fe17 	bl	80019e2 <_isatty>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_isatty_r+0x1a>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_isatty_r+0x1a>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	200004f4 	.word	0x200004f4
 8009dc4:	00000000 	.word	0x00000000

08009dc8 <log>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	ed2d 8b02 	vpush	{d8}
 8009dce:	ec55 4b10 	vmov	r4, r5, d0
 8009dd2:	f000 f839 	bl	8009e48 <__ieee754_log>
 8009dd6:	4622      	mov	r2, r4
 8009dd8:	462b      	mov	r3, r5
 8009dda:	4620      	mov	r0, r4
 8009ddc:	4629      	mov	r1, r5
 8009dde:	eeb0 8a40 	vmov.f32	s16, s0
 8009de2:	eef0 8a60 	vmov.f32	s17, s1
 8009de6:	f7f6 fea1 	bl	8000b2c <__aeabi_dcmpun>
 8009dea:	b998      	cbnz	r0, 8009e14 <log+0x4c>
 8009dec:	2200      	movs	r2, #0
 8009dee:	2300      	movs	r3, #0
 8009df0:	4620      	mov	r0, r4
 8009df2:	4629      	mov	r1, r5
 8009df4:	f7f6 fe90 	bl	8000b18 <__aeabi_dcmpgt>
 8009df8:	b960      	cbnz	r0, 8009e14 <log+0x4c>
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	4620      	mov	r0, r4
 8009e00:	4629      	mov	r1, r5
 8009e02:	f7f6 fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e06:	b160      	cbz	r0, 8009e22 <log+0x5a>
 8009e08:	f7fc fc56 	bl	80066b8 <__errno>
 8009e0c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8009e38 <log+0x70>
 8009e10:	2322      	movs	r3, #34	@ 0x22
 8009e12:	6003      	str	r3, [r0, #0]
 8009e14:	eeb0 0a48 	vmov.f32	s0, s16
 8009e18:	eef0 0a68 	vmov.f32	s1, s17
 8009e1c:	ecbd 8b02 	vpop	{d8}
 8009e20:	bd38      	pop	{r3, r4, r5, pc}
 8009e22:	f7fc fc49 	bl	80066b8 <__errno>
 8009e26:	ecbd 8b02 	vpop	{d8}
 8009e2a:	2321      	movs	r3, #33	@ 0x21
 8009e2c:	6003      	str	r3, [r0, #0]
 8009e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e32:	4803      	ldr	r0, [pc, #12]	@ (8009e40 <log+0x78>)
 8009e34:	f7ff b948 	b.w	80090c8 <nan>
 8009e38:	00000000 	.word	0x00000000
 8009e3c:	fff00000 	.word	0xfff00000
 8009e40:	0800a3b9 	.word	0x0800a3b9
 8009e44:	00000000 	.word	0x00000000

08009e48 <__ieee754_log>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	ec51 0b10 	vmov	r0, r1, d0
 8009e50:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009e54:	b087      	sub	sp, #28
 8009e56:	460d      	mov	r5, r1
 8009e58:	da26      	bge.n	8009ea8 <__ieee754_log+0x60>
 8009e5a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009e5e:	4303      	orrs	r3, r0
 8009e60:	4602      	mov	r2, r0
 8009e62:	d10a      	bne.n	8009e7a <__ieee754_log+0x32>
 8009e64:	49ce      	ldr	r1, [pc, #824]	@ (800a1a0 <__ieee754_log+0x358>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	2300      	movs	r3, #0
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	f7f6 fcee 	bl	800084c <__aeabi_ddiv>
 8009e70:	ec41 0b10 	vmov	d0, r0, r1
 8009e74:	b007      	add	sp, #28
 8009e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7a:	2900      	cmp	r1, #0
 8009e7c:	da05      	bge.n	8009e8a <__ieee754_log+0x42>
 8009e7e:	460b      	mov	r3, r1
 8009e80:	f7f6 fa02 	bl	8000288 <__aeabi_dsub>
 8009e84:	2200      	movs	r2, #0
 8009e86:	2300      	movs	r3, #0
 8009e88:	e7f0      	b.n	8009e6c <__ieee754_log+0x24>
 8009e8a:	4bc6      	ldr	r3, [pc, #792]	@ (800a1a4 <__ieee754_log+0x35c>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f7f6 fbb3 	bl	80005f8 <__aeabi_dmul>
 8009e92:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8009e96:	460d      	mov	r5, r1
 8009e98:	4ac3      	ldr	r2, [pc, #780]	@ (800a1a8 <__ieee754_log+0x360>)
 8009e9a:	4295      	cmp	r5, r2
 8009e9c:	dd06      	ble.n	8009eac <__ieee754_log+0x64>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	f7f6 f9f3 	bl	800028c <__adddf3>
 8009ea6:	e7e3      	b.n	8009e70 <__ieee754_log+0x28>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e7f5      	b.n	8009e98 <__ieee754_log+0x50>
 8009eac:	152c      	asrs	r4, r5, #20
 8009eae:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8009eb2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009eb6:	441c      	add	r4, r3
 8009eb8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8009ebc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009ec0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ec4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009ec8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8009ecc:	ea42 0105 	orr.w	r1, r2, r5
 8009ed0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	4bb5      	ldr	r3, [pc, #724]	@ (800a1ac <__ieee754_log+0x364>)
 8009ed8:	f7f6 f9d6 	bl	8000288 <__aeabi_dsub>
 8009edc:	1cab      	adds	r3, r5, #2
 8009ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	4682      	mov	sl, r0
 8009ee6:	468b      	mov	fp, r1
 8009ee8:	f04f 0200 	mov.w	r2, #0
 8009eec:	dc53      	bgt.n	8009f96 <__ieee754_log+0x14e>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f7f6 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef4:	b1d0      	cbz	r0, 8009f2c <__ieee754_log+0xe4>
 8009ef6:	2c00      	cmp	r4, #0
 8009ef8:	f000 8120 	beq.w	800a13c <__ieee754_log+0x2f4>
 8009efc:	4620      	mov	r0, r4
 8009efe:	f7f6 fb11 	bl	8000524 <__aeabi_i2d>
 8009f02:	a391      	add	r3, pc, #580	@ (adr r3, 800a148 <__ieee754_log+0x300>)
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	4606      	mov	r6, r0
 8009f0a:	460f      	mov	r7, r1
 8009f0c:	f7f6 fb74 	bl	80005f8 <__aeabi_dmul>
 8009f10:	a38f      	add	r3, pc, #572	@ (adr r3, 800a150 <__ieee754_log+0x308>)
 8009f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f16:	4604      	mov	r4, r0
 8009f18:	460d      	mov	r5, r1
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	4639      	mov	r1, r7
 8009f1e:	f7f6 fb6b 	bl	80005f8 <__aeabi_dmul>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4620      	mov	r0, r4
 8009f28:	4629      	mov	r1, r5
 8009f2a:	e7ba      	b.n	8009ea2 <__ieee754_log+0x5a>
 8009f2c:	a38a      	add	r3, pc, #552	@ (adr r3, 800a158 <__ieee754_log+0x310>)
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	4650      	mov	r0, sl
 8009f34:	4659      	mov	r1, fp
 8009f36:	f7f6 fb5f 	bl	80005f8 <__aeabi_dmul>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	2000      	movs	r0, #0
 8009f40:	499b      	ldr	r1, [pc, #620]	@ (800a1b0 <__ieee754_log+0x368>)
 8009f42:	f7f6 f9a1 	bl	8000288 <__aeabi_dsub>
 8009f46:	4652      	mov	r2, sl
 8009f48:	4606      	mov	r6, r0
 8009f4a:	460f      	mov	r7, r1
 8009f4c:	465b      	mov	r3, fp
 8009f4e:	4650      	mov	r0, sl
 8009f50:	4659      	mov	r1, fp
 8009f52:	f7f6 fb51 	bl	80005f8 <__aeabi_dmul>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	f7f6 fb4b 	bl	80005f8 <__aeabi_dmul>
 8009f62:	4606      	mov	r6, r0
 8009f64:	460f      	mov	r7, r1
 8009f66:	b914      	cbnz	r4, 8009f6e <__ieee754_log+0x126>
 8009f68:	4632      	mov	r2, r6
 8009f6a:	463b      	mov	r3, r7
 8009f6c:	e0a0      	b.n	800a0b0 <__ieee754_log+0x268>
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f7f6 fad8 	bl	8000524 <__aeabi_i2d>
 8009f74:	a374      	add	r3, pc, #464	@ (adr r3, 800a148 <__ieee754_log+0x300>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	4680      	mov	r8, r0
 8009f7c:	4689      	mov	r9, r1
 8009f7e:	f7f6 fb3b 	bl	80005f8 <__aeabi_dmul>
 8009f82:	a373      	add	r3, pc, #460	@ (adr r3, 800a150 <__ieee754_log+0x308>)
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	4604      	mov	r4, r0
 8009f8a:	460d      	mov	r5, r1
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	4649      	mov	r1, r9
 8009f90:	f7f6 fb32 	bl	80005f8 <__aeabi_dmul>
 8009f94:	e0a5      	b.n	800a0e2 <__ieee754_log+0x29a>
 8009f96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f9a:	f7f6 f977 	bl	800028c <__adddf3>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4650      	mov	r0, sl
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	f7f6 fc51 	bl	800084c <__aeabi_ddiv>
 8009faa:	e9cd 0100 	strd	r0, r1, [sp]
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f7f6 fab8 	bl	8000524 <__aeabi_i2d>
 8009fb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	f7f6 fb1a 	bl	80005f8 <__aeabi_dmul>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fcc:	f7f6 fb14 	bl	80005f8 <__aeabi_dmul>
 8009fd0:	a363      	add	r3, pc, #396	@ (adr r3, 800a160 <__ieee754_log+0x318>)
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	4680      	mov	r8, r0
 8009fd8:	4689      	mov	r9, r1
 8009fda:	f7f6 fb0d 	bl	80005f8 <__aeabi_dmul>
 8009fde:	a362      	add	r3, pc, #392	@ (adr r3, 800a168 <__ieee754_log+0x320>)
 8009fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe4:	f7f6 f952 	bl	800028c <__adddf3>
 8009fe8:	4642      	mov	r2, r8
 8009fea:	464b      	mov	r3, r9
 8009fec:	f7f6 fb04 	bl	80005f8 <__aeabi_dmul>
 8009ff0:	a35f      	add	r3, pc, #380	@ (adr r3, 800a170 <__ieee754_log+0x328>)
 8009ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff6:	f7f6 f949 	bl	800028c <__adddf3>
 8009ffa:	4642      	mov	r2, r8
 8009ffc:	464b      	mov	r3, r9
 8009ffe:	f7f6 fafb 	bl	80005f8 <__aeabi_dmul>
 800a002:	a35d      	add	r3, pc, #372	@ (adr r3, 800a178 <__ieee754_log+0x330>)
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	f7f6 f940 	bl	800028c <__adddf3>
 800a00c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a010:	f7f6 faf2 	bl	80005f8 <__aeabi_dmul>
 800a014:	a35a      	add	r3, pc, #360	@ (adr r3, 800a180 <__ieee754_log+0x338>)
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a01e:	4640      	mov	r0, r8
 800a020:	4649      	mov	r1, r9
 800a022:	f7f6 fae9 	bl	80005f8 <__aeabi_dmul>
 800a026:	a358      	add	r3, pc, #352	@ (adr r3, 800a188 <__ieee754_log+0x340>)
 800a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02c:	f7f6 f92e 	bl	800028c <__adddf3>
 800a030:	4642      	mov	r2, r8
 800a032:	464b      	mov	r3, r9
 800a034:	f7f6 fae0 	bl	80005f8 <__aeabi_dmul>
 800a038:	a355      	add	r3, pc, #340	@ (adr r3, 800a190 <__ieee754_log+0x348>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7f6 f925 	bl	800028c <__adddf3>
 800a042:	4642      	mov	r2, r8
 800a044:	464b      	mov	r3, r9
 800a046:	f7f6 fad7 	bl	80005f8 <__aeabi_dmul>
 800a04a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800a056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a05a:	f7f6 f917 	bl	800028c <__adddf3>
 800a05e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800a062:	3551      	adds	r5, #81	@ 0x51
 800a064:	4335      	orrs	r5, r6
 800a066:	2d00      	cmp	r5, #0
 800a068:	4680      	mov	r8, r0
 800a06a:	4689      	mov	r9, r1
 800a06c:	dd48      	ble.n	800a100 <__ieee754_log+0x2b8>
 800a06e:	4b50      	ldr	r3, [pc, #320]	@ (800a1b0 <__ieee754_log+0x368>)
 800a070:	2200      	movs	r2, #0
 800a072:	4650      	mov	r0, sl
 800a074:	4659      	mov	r1, fp
 800a076:	f7f6 fabf 	bl	80005f8 <__aeabi_dmul>
 800a07a:	4652      	mov	r2, sl
 800a07c:	465b      	mov	r3, fp
 800a07e:	f7f6 fabb 	bl	80005f8 <__aeabi_dmul>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	4606      	mov	r6, r0
 800a088:	460f      	mov	r7, r1
 800a08a:	4640      	mov	r0, r8
 800a08c:	4649      	mov	r1, r9
 800a08e:	f7f6 f8fd 	bl	800028c <__adddf3>
 800a092:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a096:	f7f6 faaf 	bl	80005f8 <__aeabi_dmul>
 800a09a:	4680      	mov	r8, r0
 800a09c:	4689      	mov	r9, r1
 800a09e:	b964      	cbnz	r4, 800a0ba <__ieee754_log+0x272>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	f7f6 f8ee 	bl	8000288 <__aeabi_dsub>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4650      	mov	r0, sl
 800a0b2:	4659      	mov	r1, fp
 800a0b4:	f7f6 f8e8 	bl	8000288 <__aeabi_dsub>
 800a0b8:	e6da      	b.n	8009e70 <__ieee754_log+0x28>
 800a0ba:	a323      	add	r3, pc, #140	@ (adr r3, 800a148 <__ieee754_log+0x300>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c4:	f7f6 fa98 	bl	80005f8 <__aeabi_dmul>
 800a0c8:	a321      	add	r3, pc, #132	@ (adr r3, 800a150 <__ieee754_log+0x308>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0d6:	f7f6 fa8f 	bl	80005f8 <__aeabi_dmul>
 800a0da:	4642      	mov	r2, r8
 800a0dc:	464b      	mov	r3, r9
 800a0de:	f7f6 f8d5 	bl	800028c <__adddf3>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f7f6 f8cd 	bl	8000288 <__aeabi_dsub>
 800a0ee:	4652      	mov	r2, sl
 800a0f0:	465b      	mov	r3, fp
 800a0f2:	f7f6 f8c9 	bl	8000288 <__aeabi_dsub>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	e7d9      	b.n	800a0b4 <__ieee754_log+0x26c>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4650      	mov	r0, sl
 800a106:	4659      	mov	r1, fp
 800a108:	f7f6 f8be 	bl	8000288 <__aeabi_dsub>
 800a10c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a110:	f7f6 fa72 	bl	80005f8 <__aeabi_dmul>
 800a114:	4606      	mov	r6, r0
 800a116:	460f      	mov	r7, r1
 800a118:	2c00      	cmp	r4, #0
 800a11a:	f43f af25 	beq.w	8009f68 <__ieee754_log+0x120>
 800a11e:	a30a      	add	r3, pc, #40	@ (adr r3, 800a148 <__ieee754_log+0x300>)
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a128:	f7f6 fa66 	bl	80005f8 <__aeabi_dmul>
 800a12c:	a308      	add	r3, pc, #32	@ (adr r3, 800a150 <__ieee754_log+0x308>)
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	4604      	mov	r4, r0
 800a134:	460d      	mov	r5, r1
 800a136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a13a:	e729      	b.n	8009f90 <__ieee754_log+0x148>
 800a13c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800a198 <__ieee754_log+0x350>
 800a140:	e698      	b.n	8009e74 <__ieee754_log+0x2c>
 800a142:	bf00      	nop
 800a144:	f3af 8000 	nop.w
 800a148:	fee00000 	.word	0xfee00000
 800a14c:	3fe62e42 	.word	0x3fe62e42
 800a150:	35793c76 	.word	0x35793c76
 800a154:	3dea39ef 	.word	0x3dea39ef
 800a158:	55555555 	.word	0x55555555
 800a15c:	3fd55555 	.word	0x3fd55555
 800a160:	df3e5244 	.word	0xdf3e5244
 800a164:	3fc2f112 	.word	0x3fc2f112
 800a168:	96cb03de 	.word	0x96cb03de
 800a16c:	3fc74664 	.word	0x3fc74664
 800a170:	94229359 	.word	0x94229359
 800a174:	3fd24924 	.word	0x3fd24924
 800a178:	55555593 	.word	0x55555593
 800a17c:	3fe55555 	.word	0x3fe55555
 800a180:	d078c69f 	.word	0xd078c69f
 800a184:	3fc39a09 	.word	0x3fc39a09
 800a188:	1d8e78af 	.word	0x1d8e78af
 800a18c:	3fcc71c5 	.word	0x3fcc71c5
 800a190:	9997fa04 	.word	0x9997fa04
 800a194:	3fd99999 	.word	0x3fd99999
	...
 800a1a0:	c3500000 	.word	0xc3500000
 800a1a4:	43500000 	.word	0x43500000
 800a1a8:	7fefffff 	.word	0x7fefffff
 800a1ac:	3ff00000 	.word	0x3ff00000
 800a1b0:	3fe00000 	.word	0x3fe00000

0800a1b4 <_init>:
 800a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b6:	bf00      	nop
 800a1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ba:	bc08      	pop	{r3}
 800a1bc:	469e      	mov	lr, r3
 800a1be:	4770      	bx	lr

0800a1c0 <_fini>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	bf00      	nop
 800a1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c6:	bc08      	pop	{r3}
 800a1c8:	469e      	mov	lr, r3
 800a1ca:	4770      	bx	lr
